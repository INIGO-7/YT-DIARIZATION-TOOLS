,id,seek,start,end,text,tokens,temperature,avg_logprob,compression_ratio,no_speech_prob
0,0,0,0.0,10.88, Can you imagine possible features that Python 4.0 might have that would necessitate the creation,"[50363, 1680, 345, 5967, 1744, 3033, 326, 11361, 604, 13, 15, 1244, 423, 326, 561, 2418, 12027, 262, 6282, 50907]",0.0,-0.18422257060735997,1.4723618090452262,0.027033016085624695
1,1,0,10.88,20.0," of the new 4.0? Given the amount of pain and joy, suffering, and triumph that was involved in the","[50907, 286, 262, 649, 604, 13, 15, 30, 11259, 262, 2033, 286, 2356, 290, 8716, 11, 7195, 11, 290, 15499, 326, 373, 2950, 287, 262, 51363]",0.0,-0.18422257060735997,1.4723618090452262,0.027033016085624695
2,2,0,20.0,28.0," move between version two and version three. The following is a conversation with Guido van Rassam,","[51363, 1445, 1022, 2196, 734, 290, 2196, 1115, 13, 383, 1708, 318, 257, 5273, 351, 1962, 17305, 5719, 371, 562, 321, 11, 51763]",0.0,-0.18422257060735997,1.4723618090452262,0.027033016085624695
3,3,2800,28.0,33.52, his second time on this podcast. He is the creator of the Python programming language and,"[50363, 465, 1218, 640, 319, 428, 9905, 13, 679, 318, 262, 13172, 286, 262, 11361, 8300, 3303, 290, 50639]",0.0,-0.15659873962402343,1.484375,0.1226910874247551
4,4,2800,33.52,41.120000000000005," is Python's Emeritus BDFL, benevolent dictator for life. This is the Lex Friedman podcast. To","[50639, 318, 11361, 338, 10320, 17506, 347, 8068, 43, 11, 45599, 26671, 329, 1204, 13, 770, 318, 262, 17210, 25865, 9905, 13, 1675, 51019]",0.0,-0.15659873962402343,1.484375,0.1226910874247551
5,5,2800,41.120000000000005,46.8," support it, please check out our sponsors in the description. And now, dear friends, here's Guido","[51019, 1104, 340, 11, 3387, 2198, 503, 674, 18073, 287, 262, 6764, 13, 843, 783, 11, 13674, 2460, 11, 994, 338, 1962, 17305, 51303]",0.0,-0.15659873962402343,1.484375,0.1226910874247551
6,6,2800,46.8,57.6," van Rassam. Python 3.11 is coming out very soon. In it, see Python claimed to be 10 to 60% faster.","[51303, 5719, 371, 562, 321, 13, 11361, 513, 13, 1157, 318, 2406, 503, 845, 2582, 13, 554, 340, 11, 766, 11361, 4752, 284, 307, 838, 284, 3126, 4, 5443, 13, 51843]",0.0,-0.15659873962402343,1.484375,0.1226910874247551
7,7,5760,57.68,63.44, How did you pull that off? And what's C Python? C Python is the last Python implementation,"[50367, 1374, 750, 345, 2834, 326, 572, 30, 843, 644, 338, 327, 11361, 30, 327, 11361, 318, 262, 938, 11361, 7822, 50655]",0.0,-0.13624610375920568,1.7536764705882353,0.0643431544303894
8,8,5760,63.44,68.96000000000001," standing. Also, the first one that was ever created, the original Python implementation that I started","[50655, 5055, 13, 4418, 11, 262, 717, 530, 326, 373, 1683, 2727, 11, 262, 2656, 11361, 7822, 326, 314, 2067, 50931]",0.0,-0.13624610375920568,1.7536764705882353,0.0643431544303894
9,9,5760,68.96000000000001,74.48," over 30 years ago. So what does it mean that Python, the programming language is implemented","[50931, 625, 1542, 812, 2084, 13, 1406, 644, 857, 340, 1612, 326, 11361, 11, 262, 8300, 3303, 318, 9177, 51207]",0.0,-0.13624610375920568,1.7536764705882353,0.0643431544303894
10,10,5760,74.48,79.12, in another programming language called C? What kind of audience do you have in mind here?,"[51207, 287, 1194, 8300, 3303, 1444, 327, 30, 1867, 1611, 286, 5386, 466, 345, 423, 287, 2000, 994, 30, 51439]",0.0,-0.13624610375920568,1.7536764705882353,0.0643431544303894
11,11,5760,79.68,84.64," People who know programming? No, there's somebody on a boat that's interfishing and have never heard","[51467, 4380, 508, 760, 8300, 30, 1400, 11, 612, 338, 8276, 319, 257, 8848, 326, 338, 987, 69, 3929, 290, 423, 1239, 2982, 51715]",0.0,-0.13624610375920568,1.7536764705882353,0.0643431544303894
12,12,8464,84.64,89.36," about programming, but also some world class programmers. You're going to have to speak to both.","[50363, 546, 8300, 11, 475, 635, 617, 995, 1398, 24867, 13, 921, 821, 1016, 284, 423, 284, 2740, 284, 1111, 13, 50599]",0.0,-0.110382202344063,1.7773722627737227,0.0020461168605834246
13,13,8464,89.36,94.72, Imagine a boat with two people. One of them has not heard about programming is really interfishing.,"[50599, 18450, 257, 8848, 351, 734, 661, 13, 1881, 286, 606, 468, 407, 2982, 546, 8300, 318, 1107, 987, 69, 3929, 13, 50867]",0.0,-0.110382202344063,1.7773722627737227,0.0020461168605834246
14,14,8464,94.72,101.44, And the other one is like an incredible Silicon Valley programmer that's programmed in everything.,"[50867, 843, 262, 584, 530, 318, 588, 281, 8082, 18210, 6916, 24292, 326, 338, 27402, 287, 2279, 13, 51203]",0.0,-0.110382202344063,1.7773722627737227,0.0020461168605834246
15,15,8464,101.44,107.44," C, C++, Python, Rust, Java, it knows the entire history of programming languages. So you're going","[51203, 327, 11, 327, 4880, 11, 11361, 11, 17103, 11, 7349, 11, 340, 4206, 262, 2104, 2106, 286, 8300, 8950, 13, 1406, 345, 821, 1016, 51503]",0.0,-0.110382202344063,1.7773722627737227,0.0020461168605834246
16,16,8464,107.44,112.64, to have to speak to both. I imagine that boat in the middle of the ocean. I'm going to please,"[51503, 284, 423, 284, 2740, 284, 1111, 13, 314, 5967, 326, 8848, 287, 262, 3504, 286, 262, 9151, 13, 314, 1101, 1016, 284, 3387, 51763]",0.0,-0.110382202344063,1.7773722627737227,0.0020461168605834246
17,17,11264,112.64,118.8," the guy who knows how to fish first. Yes, please. He seems like the most useful in the","[50363, 262, 3516, 508, 4206, 703, 284, 5916, 717, 13, 3363, 11, 3387, 13, 679, 2331, 588, 262, 749, 4465, 287, 262, 50671]",0.0,-0.09429384998439513,1.625531914893617,0.001049256301485002
18,18,11264,118.8,125.28, middle of the ocean. You got to make a map. I'm sure he has a cell phone. So he's probably very,"[50671, 3504, 286, 262, 9151, 13, 921, 1392, 284, 787, 257, 3975, 13, 314, 1101, 1654, 339, 468, 257, 2685, 3072, 13, 1406, 339, 338, 2192, 845, 50995]",0.0,-0.09429384998439513,1.625531914893617,0.001049256301485002
19,19,11264,125.28,130.48," suspicious about what goes on in that cell phone, but he must have heard that inside his cell phone","[50995, 13678, 546, 644, 2925, 319, 287, 326, 2685, 3072, 11, 475, 339, 1276, 423, 2982, 326, 2641, 465, 2685, 3072, 51255]",0.0,-0.09429384998439513,1.625531914893617,0.001049256301485002
20,20,11264,130.48,137.28, is a tiny computer. And a programming language is computer code that tells the computer what to do.,"[51255, 318, 257, 7009, 3644, 13, 843, 257, 8300, 3303, 318, 3644, 2438, 326, 4952, 262, 3644, 644, 284, 466, 13, 51595]",0.0,-0.09429384998439513,1.625531914893617,0.001049256301485002
21,21,13728,137.36,143.04," It's a very low level language. It's zeros and ones, and then there's assembly.","[50367, 632, 338, 257, 845, 1877, 1241, 3303, 13, 632, 338, 1976, 27498, 290, 3392, 11, 290, 788, 612, 338, 10474, 13, 50651]",0.0,-0.1495777087265186,1.6966824644549763,0.0050773718394339085
22,22,13728,143.6,149.6," And then... Oh, yeah, we don't talk about these really low levels because those just confuse","[50679, 843, 788, 986, 3966, 11, 10194, 11, 356, 836, 470, 1561, 546, 777, 1107, 1877, 2974, 780, 883, 655, 27531, 50979]",0.0,-0.1495777087265186,1.6966824644549763,0.0050773718394339085
23,23,13728,149.6,154.96," people. I mean, when we're talking about human language, we're not usually talking about vocal","[50979, 661, 13, 314, 1612, 11, 618, 356, 821, 3375, 546, 1692, 3303, 11, 356, 821, 407, 3221, 3375, 546, 12435, 51247]",0.0,-0.1495777087265186,1.6966824644549763,0.0050773718394339085
24,24,13728,154.96,160.48, tracts and how you position your tongue. I was talking yesterday about how when you have a,"[51247, 42385, 290, 703, 345, 2292, 534, 11880, 13, 314, 373, 3375, 7415, 546, 703, 618, 345, 423, 257, 51523]",0.0,-0.1495777087265186,1.6966824644549763,0.0050773718394339085
25,25,16048,160.48,167.76," Chinese person and they speak English, this is a bit of a stereotype. They often don't know.","[50363, 3999, 1048, 290, 484, 2740, 3594, 11, 428, 318, 257, 1643, 286, 257, 31240, 13, 1119, 1690, 836, 470, 760, 13, 50727]",0.0,-0.12448943643008961,1.5209302325581395,0.0052071185782551765
26,26,16048,168.79999999999998,172.95999999999998, They can't seem to make the difference well between an L and an R.,"[50779, 1119, 460, 470, 1283, 284, 787, 262, 3580, 880, 1022, 281, 406, 290, 281, 371, 13, 50987]",0.0,-0.12448943643008961,1.5209302325581395,0.0052071185782551765
27,27,16048,174.0,177.67999999999998," And I have a theory about that, and I've never checked this with linguists,","[51039, 843, 314, 423, 257, 4583, 546, 326, 11, 290, 314, 1053, 1239, 10667, 428, 351, 20280, 1023, 11, 51223]",0.0,-0.12448943643008961,1.5209302325581395,0.0052071185782551765
28,28,16048,179.76,184.95999999999998," that it probably has to do with the fact that in Chinese, there is not really a difference,","[51327, 326, 340, 2192, 468, 284, 466, 351, 262, 1109, 326, 287, 3999, 11, 612, 318, 407, 1107, 257, 3580, 11, 51587]",0.0,-0.12448943643008961,1.5209302325581395,0.0052071185782551765
29,29,18496,185.6,192.64000000000001, and it could be that there are regional variations in how native Chinese speakers pronounce that,"[50395, 290, 340, 714, 307, 326, 612, 389, 7915, 13991, 287, 703, 6868, 3999, 11636, 28942, 326, 50747]",0.0,-0.11298914444752228,1.5837320574162679,0.00032629186171106994
30,30,18496,192.64000000000001,199.20000000000002, one sound that sounds like L to some of them like R to others.,"[50747, 530, 2128, 326, 5238, 588, 406, 284, 617, 286, 606, 588, 371, 284, 1854, 13, 51075]",0.0,-0.11298914444752228,1.5837320574162679,0.00032629186171106994
31,31,18496,199.20000000000002,205.12," So it's both the sounds you produce with your mouth throughout the history of your life,","[51075, 1406, 340, 338, 1111, 262, 5238, 345, 4439, 351, 534, 5422, 3690, 262, 2106, 286, 534, 1204, 11, 51371]",0.0,-0.11298914444752228,1.5837320574162679,0.00032629186171106994
32,32,18496,205.12,208.8," and what you're used to listening to. I mean, every language has that. Russian has","[51371, 290, 644, 345, 821, 973, 284, 8680, 284, 13, 314, 1612, 11, 790, 3303, 468, 326, 13, 3394, 468, 51555]",0.0,-0.11298914444752228,1.5837320574162679,0.00032629186171106994
33,33,20880,209.52,217.84, the Slavic languages have sounds like the letter like Americans or English speakers don't seem to,"[50399, 262, 34314, 291, 8950, 423, 5238, 588, 262, 3850, 588, 3399, 393, 3594, 11636, 836, 470, 1283, 284, 50815]",0.0,-0.23390051189221833,1.6101694915254237,0.0022609473671764135
34,34,20880,217.84,226.72000000000003," know the sound. They seem uncomfortable with that sound. Yeah, so I'm sure. Oh, yes. Okay, so we're not","[50815, 760, 262, 2128, 13, 1119, 1283, 12916, 351, 326, 2128, 13, 9425, 11, 523, 314, 1101, 1654, 13, 3966, 11, 3763, 13, 16805, 11, 523, 356, 821, 407, 51259]",0.0,-0.23390051189221833,1.6101694915254237,0.0022609473671764135
35,35,20880,226.72000000000003,232.24," going to the shapes of tongues and the sounds that the mouth can make. Fine. And similarly,","[51259, 1016, 284, 262, 15268, 286, 39413, 290, 262, 5238, 326, 262, 5422, 460, 787, 13, 17867, 13, 843, 12470, 11, 51535]",0.0,-0.23390051189221833,1.6101694915254237,0.0022609473671764135
36,36,20880,232.24,237.68, we're not going into the ones and zeros or machine language. I would say a programming,"[51535, 356, 821, 407, 1016, 656, 262, 3392, 290, 1976, 27498, 393, 4572, 3303, 13, 314, 561, 910, 257, 8300, 51807]",0.0,-0.23390051189221833,1.6101694915254237,0.0022609473671764135
37,37,23768,237.76000000000002,245.92000000000002, language is a list of instructions like a cookbook recipe that sort of tells you how to do a certain,"[50367, 3303, 318, 257, 1351, 286, 7729, 588, 257, 4255, 2070, 8364, 326, 3297, 286, 4952, 345, 703, 284, 466, 257, 1728, 50775]",0.0,-0.11946773529052734,1.6312849162011174,0.0013255132362246513
38,38,23768,245.92000000000002,254.24," thing, like make a sandwich. Well, acquire a loaf of bread, cut it in slices, take two slices,","[50775, 1517, 11, 588, 787, 257, 20433, 13, 3894, 11, 12831, 257, 40134, 286, 8509, 11, 2005, 340, 287, 24314, 11, 1011, 734, 24314, 11, 51191]",0.0,-0.11946773529052734,1.6312849162011174,0.0013255132362246513
39,39,23768,255.20000000000002,262.08," put mustard on one, put jelly on the other or something, then add the meat, then add the cheese.","[51239, 1234, 33694, 319, 530, 11, 1234, 27644, 319, 262, 584, 393, 1223, 11, 788, 751, 262, 6174, 11, 788, 751, 262, 9891, 13, 51583]",0.0,-0.11946773529052734,1.6312849162011174,0.0013255132362246513
40,40,26208,262.96,270.15999999999997, I've heard that science teachers can actually do great stuff with recipes like that and trying,"[50407, 314, 1053, 2982, 326, 3783, 7799, 460, 1682, 466, 1049, 3404, 351, 14296, 588, 326, 290, 2111, 50767]",0.0,-0.1508231692843967,1.672340425531915,0.002121975878253579
41,41,26208,270.15999999999997,276.24, to interpret their students instructions incorrectly until the students are completely unambiguous about,"[50767, 284, 6179, 511, 2444, 7729, 23175, 1566, 262, 2444, 389, 3190, 42053, 29709, 546, 51071]",0.0,-0.1508231692843967,1.672340425531915,0.002121975878253579
42,42,26208,276.24,282.15999999999997," it. With language, see, that's the difference between natural languages and programming languages.","[51071, 340, 13, 2080, 3303, 11, 766, 11, 326, 338, 262, 3580, 1022, 3288, 8950, 290, 8300, 8950, 13, 51367]",0.0,-0.1508231692843967,1.672340425531915,0.002121975878253579
43,43,26208,282.79999999999995,291.68," I think ambiguity is a feature, not a bug in human spoken languages. Like, that's the dance of","[51399, 314, 892, 33985, 318, 257, 3895, 11, 407, 257, 5434, 287, 1692, 9635, 8950, 13, 4525, 11, 326, 338, 262, 9280, 286, 51843]",0.0,-0.1508231692843967,1.672340425531915,0.002121975878253579
44,44,29168,291.68,297.76," communication between humans. Well, for lawyers, ambiguity certainly is a feature.","[50363, 6946, 1022, 5384, 13, 3894, 11, 329, 9326, 11, 33985, 3729, 318, 257, 3895, 13, 50667]",0.0,-0.1181846300760905,1.574468085106383,0.00019543203234206885
45,45,29168,299.84000000000003,307.6," For plenty of other cases, the ambiguity is not much of a feature, but we work around it, of course.","[50771, 1114, 6088, 286, 584, 2663, 11, 262, 33985, 318, 407, 881, 286, 257, 3895, 11, 475, 356, 670, 1088, 340, 11, 286, 1781, 13, 51159]",0.0,-0.1181846300760905,1.574468085106383,0.00019543203234206885
46,46,29168,308.16,314.16," Well, what's more important is context. So with context, the precision of the statement","[51187, 3894, 11, 644, 338, 517, 1593, 318, 4732, 13, 1406, 351, 4732, 11, 262, 15440, 286, 262, 2643, 51487]",0.0,-0.1181846300760905,1.574468085106383,0.00019543203234206885
47,47,29168,314.16,321.04," becomes more and more concrete, right? But when you say, I love you to a person that matters a lot","[51487, 4329, 517, 290, 517, 10017, 11, 826, 30, 887, 618, 345, 910, 11, 314, 1842, 345, 284, 257, 1048, 326, 6067, 257, 1256, 51831]",0.0,-0.1181846300760905,1.574468085106383,0.00019543203234206885
48,48,32104,321.12,326.16," to you, the person doesn't try to compile that statement and return an error saying,","[50367, 284, 345, 11, 262, 1048, 1595, 470, 1949, 284, 17632, 326, 2643, 290, 1441, 281, 4049, 2282, 11, 50619]",0.0,-0.15880287170410157,1.5275590551181102,0.0010498970514163375
49,49,32104,326.16,334.16," please define love, right? No, but I imagine that my wife and my son interpreted very differently.","[50619, 3387, 8160, 1842, 11, 826, 30, 1400, 11, 475, 314, 5967, 326, 616, 3656, 290, 616, 3367, 16173, 845, 10338, 13, 51019]",0.0,-0.15880287170410157,1.5275590551181102,0.0010498970514163375
50,50,32104,335.44,338.56, Yes. Even though it's the same three words. But imprecisely still.,"[51083, 3363, 13, 3412, 996, 340, 338, 262, 976, 1115, 2456, 13, 887, 848, 8344, 786, 306, 991, 13, 51239]",0.0,-0.15880287170410157,1.5275590551181102,0.0010498970514163375
51,51,32104,339.92,344.48," Oh, for sure. Well, lawyers never have a lot of follow-up questions for you.","[51307, 3966, 11, 329, 1654, 13, 3894, 11, 9326, 1239, 423, 257, 1256, 286, 1061, 12, 929, 2683, 329, 345, 13, 51535]",0.0,-0.15880287170410157,1.5275590551181102,0.0010498970514163375
52,52,32104,344.48,348.16," Nevertheless, the context is already different in that case.","[51535, 15933, 11, 262, 4732, 318, 1541, 1180, 287, 326, 1339, 13, 51719]",0.0,-0.15880287170410157,1.5275590551181102,0.0010498970514163375
53,53,34816,348.24,356.88000000000005," Yes, fair enough. So that's a programming language, is ability to unambiguously state a recipe.","[50367, 3363, 11, 3148, 1576, 13, 1406, 326, 338, 257, 8300, 3303, 11, 318, 2694, 284, 42053, 328, 24987, 1181, 257, 8364, 13, 50799]",0.0,-0.16048123286320612,1.4974358974358974,0.001565409591421485
54,54,34816,358.0,364.40000000000003," Actually, let's go back. Let's go to Pepe. You go through in Pepe, the style guy for Python code,","[50855, 18689, 11, 1309, 338, 467, 736, 13, 3914, 338, 467, 284, 49761, 13, 921, 467, 832, 287, 49761, 11, 262, 3918, 3516, 329, 11361, 2438, 11, 51175]",0.0,-0.16048123286320612,1.4974358974358974,0.001565409591421485
55,55,34816,365.12,372.40000000000003," some ideas of what this language should look like, feel like, read like. And the big idea there is","[51211, 617, 4213, 286, 644, 428, 3303, 815, 804, 588, 11, 1254, 588, 11, 1100, 588, 13, 843, 262, 1263, 2126, 612, 318, 51575]",0.0,-0.16048123286320612,1.4974358974358974,0.001565409591421485
56,56,37240,372.4,377.59999999999997, that code readability counts. What does that mean to you? And how do we achieve that? So this,"[50363, 326, 2438, 1100, 1799, 9853, 13, 1867, 857, 326, 1612, 284, 345, 30, 843, 703, 466, 356, 4620, 326, 30, 1406, 428, 50623]",0.0,-0.10906199046543666,1.6212765957446809,0.0014169736532494426
57,57,37240,377.59999999999997,384.96," recipe should be readable. That's a thing between programmers. Because on the one hand, we always","[50623, 8364, 815, 307, 31744, 13, 1320, 338, 257, 1517, 1022, 24867, 13, 4362, 319, 262, 530, 1021, 11, 356, 1464, 50991]",0.0,-0.10906199046543666,1.6212765957446809,0.0014169736532494426
58,58,37240,384.96,392.15999999999997, explain the concept of programming language as computers need instructions and computers are,"[50991, 4727, 262, 3721, 286, 8300, 3303, 355, 9061, 761, 7729, 290, 9061, 389, 51351]",0.0,-0.10906199046543666,1.6212765957446809,0.0014169736532494426
59,59,37240,392.15999999999997,397.91999999999996," very dumb and they need very precise instructions because they don't have much context. In fact,","[51351, 845, 13526, 290, 484, 761, 845, 7141, 7729, 780, 484, 836, 470, 423, 881, 4732, 13, 554, 1109, 11, 51639]",0.0,-0.10906199046543666,1.6212765957446809,0.0014169736532494426
60,60,39792,397.92,405.36," they have lots of context, but their context is very different. But what we've seen emerged","[50363, 484, 423, 6041, 286, 4732, 11, 475, 511, 4732, 318, 845, 1180, 13, 887, 644, 356, 1053, 1775, 9349, 50735]",0.0,-0.10630002388587365,1.5621621621621622,0.0045247627422213554
61,61,39792,405.36,414.32, during the development of software starting in the probably in the late 40s is that software is a,"[50735, 1141, 262, 2478, 286, 3788, 3599, 287, 262, 2192, 287, 262, 2739, 2319, 82, 318, 326, 3788, 318, 257, 51183]",0.0,-0.10630002388587365,1.5621621621621622,0.0045247627422213554
62,62,39792,414.32,421.52000000000004, very social activity. A software developer is not a mad scientist who sits alone in his lab writing,"[51183, 845, 1919, 3842, 13, 317, 3788, 8517, 318, 407, 257, 8805, 11444, 508, 10718, 3436, 287, 465, 2248, 3597, 51543]",0.0,-0.10630002388587365,1.5621621621621622,0.0045247627422213554
63,63,42152,421.52,430.79999999999995, brilliant code. A software is developed by teams of people. Even the mad scientist sitting alone in,"[50363, 10457, 2438, 13, 317, 3788, 318, 4166, 416, 3466, 286, 661, 13, 3412, 262, 8805, 11444, 5586, 3436, 287, 50827]",0.0,-0.09950227597180535,1.5828877005347595,0.00773076293990016
64,64,42152,430.79999999999995,437.59999999999997," his lab can type fast enough to produce enough code so that by the time he's done with his coding,","[50827, 465, 2248, 460, 2099, 3049, 1576, 284, 4439, 1576, 2438, 523, 326, 416, 262, 640, 339, 338, 1760, 351, 465, 19617, 11, 51167]",0.0,-0.09950227597180535,1.5828877005347595,0.00773076293990016
65,65,42152,437.59999999999997,445.68, he still remembers what the first few lines he wrote mean. So even the mad scientist coding alone,"[51167, 339, 991, 18140, 644, 262, 717, 1178, 3951, 339, 2630, 1612, 13, 1406, 772, 262, 8805, 11444, 19617, 3436, 51571]",0.0,-0.09950227597180535,1.5828877005347595,0.00773076293990016
66,66,44568,445.84000000000003,456.08, in his lab would be sort of wise to adopt conventions on how to format the instructions that he gives,"[50371, 287, 465, 2248, 561, 307, 3297, 286, 10787, 284, 11206, 21396, 319, 703, 284, 5794, 262, 7729, 326, 339, 3607, 50883]",0.0,-0.09046555256498033,1.6536312849162011,0.0034833047538995743
67,67,44568,456.08,462.88, to the computer so that the thing is there is a difference between a cookbook recipe and a computer,"[50883, 284, 262, 3644, 523, 326, 262, 1517, 318, 612, 318, 257, 3580, 1022, 257, 4255, 2070, 8364, 290, 257, 3644, 51223]",0.0,-0.09046555256498033,1.6536312849162011,0.0034833047538995743
68,68,44568,462.88,471.36," program. The cookbook recipe, the author of the cookbook writes it once and then is printed in","[51223, 1430, 13, 383, 4255, 2070, 8364, 11, 262, 1772, 286, 262, 4255, 2070, 6797, 340, 1752, 290, 788, 318, 10398, 287, 51647]",0.0,-0.09046555256498033,1.6536312849162011,0.0034833047538995743
69,69,47136,471.44,478.64," 100,000 copies and then lots of people in their kitchens try to recreate that recipe, that that","[50367, 1802, 11, 830, 9088, 290, 788, 6041, 286, 661, 287, 511, 48184, 1949, 284, 32049, 326, 8364, 11, 326, 326, 50727]",0.0,-0.15403887884957448,1.575268817204301,0.005427851341664791
70,70,47136,478.64,491.12, particular pie or dish from the recipe. And so there the goal of the cookbook author is to make it clear,"[50727, 1948, 2508, 393, 9433, 422, 262, 8364, 13, 843, 523, 612, 262, 3061, 286, 262, 4255, 2070, 1772, 318, 284, 787, 340, 1598, 51351]",0.0,-0.15403887884957448,1.575268817204301,0.005427851341664791
71,71,47136,492.0,501.2," to the human reader of the recipe, the human amateur chef in most cases. When you're writing","[51395, 284, 262, 1692, 9173, 286, 262, 8364, 11, 262, 1692, 18585, 21221, 287, 749, 2663, 13, 1649, 345, 821, 3597, 51855]",0.0,-0.15403887884957448,1.575268817204301,0.005427851341664791
72,72,50136,502.08000000000004,510.72," a computer program, you have two audiences at once. It needs to tell the computer what to do","[50399, 257, 3644, 1430, 11, 345, 423, 734, 15579, 379, 1752, 13, 632, 2476, 284, 1560, 262, 3644, 644, 284, 466, 50831]",0.0,-0.07922707181988341,1.5635359116022098,0.000353285955497995
73,73,50136,512.48,521.6," but it also is useful if that program is readable by other programmers because computer software,","[50919, 475, 340, 635, 318, 4465, 611, 326, 1430, 318, 31744, 416, 584, 24867, 780, 3644, 3788, 11, 51375]",0.0,-0.07922707181988341,1.5635359116022098,0.000353285955497995
74,74,50136,521.6,531.28," unlike the typical recipe for a cherry pie, is so complex that you don't get all of it right","[51375, 5023, 262, 7226, 8364, 329, 257, 23612, 2508, 11, 318, 523, 3716, 326, 345, 836, 470, 651, 477, 286, 340, 826, 51859]",0.0,-0.07922707181988341,1.5635359116022098,0.000353285955497995
75,75,53128,531.36,539.28," at once. You end up with the activity of debugging and you end up with the activity of, so debugging is","[50367, 379, 1752, 13, 921, 886, 510, 351, 262, 3842, 286, 28769, 290, 345, 886, 510, 351, 262, 3842, 286, 11, 523, 28769, 318, 50763]",0.0,-0.17725034289889866,1.7809523809523808,0.0004153635527472943
76,76,53128,542.0799999999999,545.8399999999999, trying to figure out why your code doesn't run the way you thought it should run.,"[50903, 2111, 284, 3785, 503, 1521, 534, 2438, 1595, 470, 1057, 262, 835, 345, 1807, 340, 815, 1057, 13, 51091]",0.0,-0.17725034289889866,1.7809523809523808,0.0004153635527472943
77,77,53128,546.48,551.28," That means broad, it could be stupid little errors, there could be big logical errors.","[51123, 1320, 1724, 3154, 11, 340, 714, 307, 8531, 1310, 8563, 11, 612, 714, 307, 1263, 12219, 8563, 13, 51363]",0.0,-0.17725034289889866,1.7809523809523808,0.0004153635527472943
78,78,53128,551.28,559.68," It could be anything spiritual. Yeah, it could be anything from a typo to a wrong choice of algorithm","[51363, 632, 714, 307, 1997, 8557, 13, 9425, 11, 340, 714, 307, 1997, 422, 257, 46517, 284, 257, 2642, 3572, 286, 11862, 51783]",0.0,-0.17725034289889866,1.7809523809523808,0.0004153635527472943
79,79,55968,559.68,565.4399999999999, to building something that does what you tell it to do but that's not useful.,"[50363, 284, 2615, 1223, 326, 857, 644, 345, 1560, 340, 284, 466, 475, 326, 338, 407, 4465, 13, 50651]",0.0,-0.1461020746538716,1.5829596412556053,0.0004158368392381817
80,80,55968,566.4799999999999,573.5999999999999," Yeah, it seems to work really well 90, 90% of the time but does weird things 1% of the time on","[50703, 9425, 11, 340, 2331, 284, 670, 1107, 880, 4101, 11, 4101, 4, 286, 262, 640, 475, 857, 7650, 1243, 352, 4, 286, 262, 640, 319, 51059]",0.0,-0.1461020746538716,1.5829596412556053,0.0004158368392381817
81,81,55968,573.5999999999999,578.88," some edge cases. That's pretty much all software nowadays. All good software, right?","[51059, 617, 5743, 2663, 13, 1320, 338, 2495, 881, 477, 3788, 26760, 13, 1439, 922, 3788, 11, 826, 30, 51323]",0.0,-0.1461020746538716,1.5829596412556053,0.0004158368392381817
82,82,55968,578.88,585.92," Well, yeah, for bad software that 99 goes down a lot. But it's not just about the complexity of","[51323, 3894, 11, 10194, 11, 329, 2089, 3788, 326, 7388, 2925, 866, 257, 1256, 13, 887, 340, 338, 407, 655, 546, 262, 13357, 286, 51675]",0.0,-0.1461020746538716,1.5829596412556053,0.0004158368392381817
83,83,58592,585.92,593.04," the program. Like you said, it is a social endeavor in that you're constantly improving","[50363, 262, 1430, 13, 4525, 345, 531, 11, 340, 318, 257, 1919, 28251, 287, 326, 345, 821, 7558, 10068, 50719]",0.0,-0.12811919450759887,1.6616161616161615,0.001169943017885089
84,84,58592,593.04,598.0799999999999, that recipe for the cherry pie. But you're in a group of people,"[50719, 326, 8364, 329, 262, 23612, 2508, 13, 887, 345, 821, 287, 257, 1448, 286, 661, 50971]",0.0,-0.12811919450759887,1.6616161616161615,0.001169943017885089
85,85,58592,598.7199999999999,606.0, improving that recipe or the mad scientist is improving the recipe that he created a year ago,"[51003, 10068, 326, 8364, 393, 262, 8805, 11444, 318, 10068, 262, 8364, 326, 339, 2727, 257, 614, 2084, 51367]",0.0,-0.12811919450759887,1.6616161616161615,0.001169943017885089
86,86,58592,606.56,613.76," and making it better or adding something. He decides that he wants a, I don't know,","[51395, 290, 1642, 340, 1365, 393, 4375, 1223, 13, 679, 13267, 326, 339, 3382, 257, 11, 314, 836, 470, 760, 11, 51755]",0.0,-0.12811919450759887,1.6616161616161615,0.001169943017885089
87,87,61376,613.84,619.92, he wants some decoration on his pie or icing or. So there's broad philosophical things and,"[50367, 339, 3382, 617, 42050, 319, 465, 2508, 393, 41567, 393, 13, 1406, 612, 338, 3154, 17580, 1243, 290, 50671]",0.0,-0.15526867960835553,1.610878661087866,0.0005967954639345407
88,88,61376,619.92,624.96," there's specific advice on style. So first of all, the thing that people first experience when","[50671, 612, 338, 2176, 5608, 319, 3918, 13, 1406, 717, 286, 477, 11, 262, 1517, 326, 661, 717, 1998, 618, 50923]",0.0,-0.15526867960835553,1.610878661087866,0.0005967954639345407
89,89,61376,624.96,633.28," they look up Python, there is a, it is very readable but there's also like a spatial structure to it.","[50923, 484, 804, 510, 11361, 11, 612, 318, 257, 11, 340, 318, 845, 31744, 475, 612, 338, 635, 588, 257, 21739, 4645, 284, 340, 13, 51339]",0.0,-0.15526867960835553,1.610878661087866,0.0005967954639345407
90,90,61376,634.08,640.88, Can you explain the indentation style of Python and what is the magic to it? Spaces are important,"[51379, 1680, 345, 4727, 262, 33793, 341, 3918, 286, 11361, 290, 644, 318, 262, 5536, 284, 340, 30, 48086, 389, 1593, 51719]",0.0,-0.15526867960835553,1.610878661087866,0.0005967954639345407
91,91,64088,640.88,650.08, for readability of any kind of text. If you take a cookbook recipe and you remove all the sort of,"[50363, 329, 1100, 1799, 286, 597, 1611, 286, 2420, 13, 1002, 345, 1011, 257, 4255, 2070, 8364, 290, 345, 4781, 477, 262, 3297, 286, 50823]",0.0,-0.09655303955078125,1.6089385474860336,0.0009684912511147559
92,92,64088,651.92,658.4," all the bullets and other markup and you just crunch all the text together, maybe you leave","[50915, 477, 262, 16043, 290, 584, 41485, 290, 345, 655, 23527, 477, 262, 2420, 1978, 11, 3863, 345, 2666, 51239]",0.0,-0.09655303955078125,1.6089385474860336,0.0009684912511147559
93,93,64088,658.4,665.28, the spaces between the words but that's all you leave. When you're in the kitchen trying to figure,"[51239, 262, 9029, 1022, 262, 2456, 475, 326, 338, 477, 345, 2666, 13, 1649, 345, 821, 287, 262, 9592, 2111, 284, 3785, 51583]",0.0,-0.09655303955078125,1.6089385474860336,0.0009684912511147559
94,94,66528,665.36,671.4399999999999," out, oh, what are the ingredients and what are the steps and where does this step end and the next","[50367, 503, 11, 11752, 11, 644, 389, 262, 9391, 290, 644, 389, 262, 4831, 290, 810, 857, 428, 2239, 886, 290, 262, 1306, 50671]",0.0,-0.126107379643604,1.6519823788546255,0.00945833045989275
95,95,66528,671.4399999999999,676.3199999999999," step begin? You're going to have a hard time if it's, if it's just one solid block of text.","[50671, 2239, 2221, 30, 921, 821, 1016, 284, 423, 257, 1327, 640, 611, 340, 338, 11, 611, 340, 338, 655, 530, 4735, 2512, 286, 2420, 13, 50915]",0.0,-0.126107379643604,1.6519823788546255,0.00945833045989275
96,96,66528,677.52,682.8," On the other hand, what, what a typical cookbook does if the paper is not too expensive,","[50975, 1550, 262, 584, 1021, 11, 644, 11, 644, 257, 7226, 4255, 2070, 857, 611, 262, 3348, 318, 407, 1165, 5789, 11, 51239]",0.0,-0.126107379643604,1.6519823788546255,0.00945833045989275
97,97,66528,683.8399999999999,690.0, each recipe starts on its own page. Maybe there's a picture next to it. The list of ingredients,"[51291, 1123, 8364, 4940, 319, 663, 898, 2443, 13, 6674, 612, 338, 257, 4286, 1306, 284, 340, 13, 383, 1351, 286, 9391, 51599]",0.0,-0.126107379643604,1.6519823788546255,0.00945833045989275
98,98,69000,690.0,698.0, comes first. There's a standard notation. There's shortcuts so that you don't have to,"[50363, 2058, 717, 13, 1318, 338, 257, 3210, 33274, 13, 1318, 338, 32953, 523, 326, 345, 836, 470, 423, 284, 50763]",0.0,-0.150276704268022,1.5919282511210762,0.005612391047179699
99,99,69000,698.72,704.56, sort of write two sentences on how you have to cut the onion because there are only three ways,"[50799, 3297, 286, 3551, 734, 13439, 319, 703, 345, 423, 284, 2005, 262, 21670, 780, 612, 389, 691, 1115, 2842, 51091]",0.0,-0.150276704268022,1.5919282511210762,0.005612391047179699
100,100,69000,704.56,710.32," that people ever cut onions in the kitchen, small, medium, and in slices or something like that.","[51091, 326, 661, 1683, 2005, 24681, 287, 262, 9592, 11, 1402, 11, 7090, 11, 290, 287, 24314, 393, 1223, 588, 326, 13, 51379]",0.0,-0.150276704268022,1.5919282511210762,0.005612391047179699
101,101,69000,711.52,715.6," Right. None of my examples make any sense to real cooks, of course, but yeah.","[51439, 6498, 13, 6045, 286, 616, 6096, 787, 597, 2565, 284, 1103, 38383, 11, 286, 1781, 11, 475, 10194, 13, 51643]",0.0,-0.150276704268022,1.5919282511210762,0.005612391047179699
102,102,71560,716.4,722.48, We're talking to programmers with a metaphor of cooking. I love it. But there is a strictness,"[50403, 775, 821, 3375, 284, 24867, 351, 257, 23094, 286, 10801, 13, 314, 1842, 340, 13, 887, 612, 318, 257, 7646, 1108, 50707]",0.0,-0.23311509757206358,1.6710526315789473,0.00028648640727624297
103,103,71560,722.48,729.6," to the spacing that Python defines. So there's some looser things, some stricter things but the","[50707, 284, 262, 31050, 326, 11361, 15738, 13, 1406, 612, 338, 617, 2376, 13416, 1243, 11, 617, 36602, 1243, 475, 262, 51063]",0.0,-0.23311509757206358,1.6710526315789473,0.00028648640727624297
104,104,71560,729.6,737.6, four spaces for the indentation is really interesting. It really defines what the language looks and,"[51063, 1440, 9029, 329, 262, 33793, 341, 318, 1107, 3499, 13, 632, 1107, 15738, 644, 262, 3303, 3073, 290, 51463]",0.0,-0.23311509757206358,1.6710526315789473,0.00028648640727624297
105,105,71560,737.6,744.48, feels like. Because indentation sort of taking a block of text and then having inside that,"[51463, 5300, 588, 13, 4362, 33793, 341, 3297, 286, 2263, 257, 2512, 286, 2420, 290, 788, 1719, 2641, 326, 51807]",0.0,-0.23311509757206358,1.6710526315789473,0.00028648640727624297
106,106,74448,745.44,753.52," block of text, a smaller block of text that is indented further as sort of a group. It's like","[50411, 2512, 286, 2420, 11, 257, 4833, 2512, 286, 2420, 326, 318, 773, 4714, 2252, 355, 3297, 286, 257, 1448, 13, 632, 338, 588, 50815]",0.0,-0.09827347876320422,1.6647058823529413,0.00046572592691518366
107,107,74448,754.08,762.0, you have a bulleted list in a complex business document and inside some of the bullets are,"[50843, 345, 423, 257, 4807, 33342, 1351, 287, 257, 3716, 1597, 3188, 290, 2641, 617, 286, 262, 16043, 389, 51239]",0.0,-0.09827347876320422,1.6647058823529413,0.00046572592691518366
108,108,74448,762.0,769.44," other bulleted lists. You will indent those too. If each bulleted list is indented several inches,","[51239, 584, 4807, 33342, 8341, 13, 921, 481, 33793, 883, 1165, 13, 1002, 1123, 4807, 33342, 1351, 318, 773, 4714, 1811, 8331, 11, 51611]",0.0,-0.09827347876320422,1.6647058823529413,0.00046572592691518366
109,109,76944,770.24,776.32, then at two levels deep there's no space left on the page to put any of the words of the text.,"[50403, 788, 379, 734, 2974, 2769, 612, 338, 645, 2272, 1364, 319, 262, 2443, 284, 1234, 597, 286, 262, 2456, 286, 262, 2420, 13, 50707]",0.0,-0.09140393168655868,1.7808219178082192,0.0002709830005187541
110,110,76944,776.32,782.72," So you can't indent too far. On the other hand, if you don't indent at all, you can tell whether","[50707, 1406, 345, 460, 470, 33793, 1165, 1290, 13, 1550, 262, 584, 1021, 11, 611, 345, 836, 470, 33793, 379, 477, 11, 345, 460, 1560, 1771, 51027]",0.0,-0.09140393168655868,1.7808219178082192,0.0002709830005187541
111,111,76944,782.72,787.7600000000001, something is a top level bullet or a second level bullet or a third level bullet. So you have to have,"[51027, 1223, 318, 257, 1353, 1241, 10492, 393, 257, 1218, 1241, 10492, 393, 257, 2368, 1241, 10492, 13, 1406, 345, 423, 284, 423, 51279]",0.0,-0.09140393168655868,1.7808219178082192,0.0002709830005187541
112,112,76944,788.8000000000001,798.6400000000001, some compromise and based on ancient conventions and the sort of the typical width of a computer,"[51331, 617, 13110, 290, 1912, 319, 6156, 21396, 290, 262, 3297, 286, 262, 7226, 9647, 286, 257, 3644, 51823]",0.0,-0.09140393168655868,1.7808219178082192,0.0002709830005187541
113,113,79864,798.64,809.6, screen in the 80s and all sorts of things sort of we came up with sort of four spaces as a compromise.,"[50363, 3159, 287, 262, 4019, 82, 290, 477, 10524, 286, 1243, 3297, 286, 356, 1625, 510, 351, 3297, 286, 1440, 9029, 355, 257, 13110, 13, 50911]",0.0,-0.1471189260482788,1.6043956043956045,0.0009761020191945136
114,114,79864,810.24,817.76," I mean there are groups, there are large groups of people who code with two spaces per indent","[50943, 314, 1612, 612, 389, 2628, 11, 612, 389, 1588, 2628, 286, 661, 508, 2438, 351, 734, 9029, 583, 33793, 51319]",0.0,-0.1471189260482788,1.6043956043956045,0.0009761020191945136
115,115,79864,817.76,824.24," level. For example, the Google style guide, all the Google Python code and I think also all the","[51319, 1241, 13, 1114, 1672, 11, 262, 3012, 3918, 5698, 11, 477, 262, 3012, 11361, 2438, 290, 314, 892, 635, 477, 262, 51643]",0.0,-0.1471189260482788,1.6043956043956045,0.0009761020191945136
116,116,82424,824.24,829.6," Google C++ code is indented with only two spaces per lock. If you're not used to that,","[50363, 3012, 327, 4880, 2438, 318, 773, 4714, 351, 691, 734, 9029, 583, 5793, 13, 1002, 345, 821, 407, 973, 284, 326, 11, 50631]",0.0,-0.12121753902225704,1.6200873362445414,0.002959227655082941
117,117,82424,830.24,838.8, it's harder to at the glance understand the code because the sort of the high level structure,"[50663, 340, 338, 7069, 284, 379, 262, 16086, 1833, 262, 2438, 780, 262, 3297, 286, 262, 1029, 1241, 4645, 51091]",0.0,-0.12121753902225704,1.6200873362445414,0.002959227655082941
118,118,82424,838.8,844.32," is determined by the indentation. On the other hand, there are other programming languages where","[51091, 318, 5295, 416, 262, 33793, 341, 13, 1550, 262, 584, 1021, 11, 612, 389, 584, 8300, 8950, 810, 51367]",0.0,-0.12121753902225704,1.6200873362445414,0.002959227655082941
119,119,82424,844.32,851.92," the indentation is eight spaces or a whole tap stop in sort of classic unics. And to me, that","[51367, 262, 33793, 341, 318, 3624, 9029, 393, 257, 2187, 9814, 2245, 287, 3297, 286, 6833, 555, 873, 13, 843, 284, 502, 11, 326, 51747]",0.0,-0.12121753902225704,1.6200873362445414,0.002959227655082941
120,120,85192,851.92,856.7199999999999," looks weird because you sort of after three indent levels, you've got no room left.","[50363, 3073, 7650, 780, 345, 3297, 286, 706, 1115, 33793, 2974, 11, 345, 1053, 1392, 645, 2119, 1364, 13, 50603]",0.0,-0.15204381430020897,1.6166666666666667,0.003265443490818143
121,121,85192,857.92,864.0," Well, there's some languages where the indentation is a recommendation. It's a stylistic one. The code","[50663, 3894, 11, 612, 338, 617, 8950, 810, 262, 33793, 341, 318, 257, 15602, 13, 632, 338, 257, 22152, 2569, 530, 13, 383, 2438, 50967]",0.0,-0.15204381430020897,1.6166666666666667,0.003265443490818143
122,122,85192,864.0,870.64, compiles even without any indentation. And then Python really indentations a fundamental part of the,"[50967, 552, 2915, 772, 1231, 597, 33793, 341, 13, 843, 788, 11361, 1107, 33793, 602, 257, 7531, 636, 286, 262, 51299]",0.0,-0.15204381430020897,1.6166666666666667,0.003265443490818143
123,123,85192,870.64,878.9599999999999," language, right? It doesn't have to be four spaces. So you can code Python with two spaces per block","[51299, 3303, 11, 826, 30, 632, 1595, 470, 423, 284, 307, 1440, 9029, 13, 1406, 345, 460, 2438, 11361, 351, 734, 9029, 583, 2512, 51715]",0.0,-0.15204381430020897,1.6166666666666667,0.003265443490818143
124,124,87896,878.96,889.84, or six spaces or 12 if you really want to go wild. But sort of everything that belongs to the same,"[50363, 393, 2237, 9029, 393, 1105, 611, 345, 1107, 765, 284, 467, 4295, 13, 887, 3297, 286, 2279, 326, 14448, 284, 262, 976, 50907]",0.0,-0.11996023995535714,1.49009900990099,0.001619576127268374
125,125,87896,889.84,896.1600000000001," block needs to be indented the same way. In practice, in most other languages, people recommend doing","[50907, 2512, 2476, 284, 307, 773, 4714, 262, 976, 835, 13, 554, 3357, 11, 287, 749, 584, 8950, 11, 661, 4313, 1804, 51223]",0.0,-0.11996023995535714,1.49009900990099,0.001619576127268374
126,126,87896,896.1600000000001,906.96," that anyway. If you look at C or Rust or C++, all those languages, Java, don't have a requirement of","[51223, 326, 6949, 13, 1002, 345, 804, 379, 327, 393, 17103, 393, 327, 4880, 11, 477, 883, 8950, 11, 7349, 11, 836, 470, 423, 257, 9079, 286, 51763]",0.0,-0.11996023995535714,1.49009900990099,0.001619576127268374
127,127,90696,906.96,915.84," indentation. But except in extreme cases, they're just as anal about having their code properly","[50363, 33793, 341, 13, 887, 2845, 287, 3257, 2663, 11, 484, 821, 655, 355, 2037, 546, 1719, 511, 2438, 6105, 50807]",0.0,-0.09481133877391547,1.53125,0.0021762752439826727
128,128,90696,915.84,925.12," indented. So any ID is that the syntax highlighting that works with Java or C++, they will yell at you","[50807, 773, 4714, 13, 1406, 597, 4522, 318, 326, 262, 15582, 21292, 326, 2499, 351, 7349, 393, 327, 4880, 11, 484, 481, 28946, 379, 345, 51271]",0.0,-0.09481133877391547,1.53125,0.0021762752439826727
129,129,90696,925.76,931.6, aggressively if you don't do proper indentation. They'd suggest the proper indentation for you.,"[51303, 19855, 611, 345, 836, 470, 466, 1774, 33793, 341, 13, 1119, 1549, 1950, 262, 1774, 33793, 341, 329, 345, 13, 51595]",0.0,-0.09481133877391547,1.53125,0.0021762752439826727
130,130,93160,932.4,940.88," Like in C, you type a few words and then you type curly brace, which is their notion of sort of","[50403, 4525, 287, 327, 11, 345, 2099, 257, 1178, 2456, 290, 788, 345, 2099, 45731, 22581, 11, 543, 318, 511, 9495, 286, 3297, 286, 50827]",0.0,-0.15124135858872356,1.544502617801047,0.003000304102897644
131,131,93160,940.88,949.2, begin an indented block. Then you hit return and then it automatically indents four or eight spaces,"[50827, 2221, 281, 773, 4714, 2512, 13, 3244, 345, 2277, 1441, 290, 788, 340, 6338, 773, 658, 1440, 393, 3624, 9029, 51243]",0.0,-0.15124135858872356,1.544502617801047,0.003000304102897644
132,132,93160,949.2,955.84, depending on your style preferences or how your editor is configured. Was there a possible universe,"[51243, 6906, 319, 534, 3918, 15387, 393, 703, 534, 5464, 318, 17839, 13, 8920, 612, 257, 1744, 6881, 51575]",0.0,-0.15124135858872356,1.544502617801047,0.003000304102897644
133,133,95584,955.84,962.96," in which you considered having braces in Python? Absolutely. Yeah. Well, there's a 60 40 70 30","[50363, 287, 543, 345, 3177, 1719, 47241, 287, 11361, 30, 28416, 13, 9425, 13, 3894, 11, 612, 338, 257, 3126, 2319, 4317, 1542, 50719]",0.0,-0.12940429959978375,1.450261780104712,0.004376697354018688
134,134,95584,963.6800000000001,972.24," in your head. What was the trade off? For a long time, I was actually convinced that the indentation","[50755, 287, 534, 1182, 13, 1867, 373, 262, 3292, 572, 30, 1114, 257, 890, 640, 11, 314, 373, 1682, 9431, 326, 262, 33793, 341, 51183]",0.0,-0.12940429959978375,1.450261780104712,0.004376697354018688
135,135,95584,972.24,981.84," was just better. Without context, I would still claim that indentation is better.","[51183, 373, 655, 1365, 13, 9170, 4732, 11, 314, 561, 991, 1624, 326, 33793, 341, 318, 1365, 13, 51663]",0.0,-0.12940429959978375,1.450261780104712,0.004376697354018688
136,136,98184,982.5600000000001,990.72," It reduces clutter. However, as I started to say earlier, context is almost everything.","[50399, 632, 12850, 45343, 13, 2102, 11, 355, 314, 2067, 284, 910, 2961, 11, 4732, 318, 2048, 2279, 13, 50807]",0.0,-0.157103621441385,1.4517766497461928,0.00026273378171026707
137,137,98184,990.72,999.6800000000001," And in the context of coding, most programmers are familiar with multiple languages, even if they're","[50807, 843, 287, 262, 4732, 286, 19617, 11, 749, 24867, 389, 5385, 351, 3294, 8950, 11, 772, 611, 484, 821, 51255]",0.0,-0.157103621441385,1.4517766497461928,0.00026273378171026707
138,138,98184,999.6800000000001,1007.12," only good at one or two. And apart from Python and maybe Fortran, I don't know how that's written","[51255, 691, 922, 379, 530, 393, 734, 13, 843, 5475, 422, 11361, 290, 3863, 6401, 2596, 11, 314, 836, 470, 760, 703, 326, 338, 3194, 51627]",0.0,-0.157103621441385,1.4517766497461928,0.00026273378171026707
139,139,100712,1007.2,1013.52," these days anymore. But all the other languages, Java, Rust, CC plus plus JavaScript, TypeScript,","[50367, 777, 1528, 7471, 13, 887, 477, 262, 584, 8950, 11, 7349, 11, 17103, 11, 12624, 5556, 5556, 11933, 11, 5994, 7391, 11, 50683]",0.0,-0.20101398468017578,1.5103092783505154,0.0031251762993633747
140,140,100712,1014.16,1023.92," Perl, are all using curly braces to sort of indicate blocks. And so Python is the odd one out.","[50715, 24316, 11, 389, 477, 1262, 45731, 47241, 284, 3297, 286, 7603, 7021, 13, 843, 523, 11361, 318, 262, 5629, 530, 503, 13, 51203]",0.0,-0.20101398468017578,1.5103092783505154,0.0031251762993633747
141,141,100712,1024.64,1031.12," So it's a radical idea. Do you still, as a radical renegade revolutionary, do you still stand behind","[51239, 1406, 340, 338, 257, 7702, 2126, 13, 2141, 345, 991, 11, 355, 257, 7702, 30780, 671, 12253, 11, 466, 345, 991, 1302, 2157, 51563]",0.0,-0.20101398468017578,1.5103092783505154,0.0031251762993633747
142,142,103112,1031.1999999999998,1038.1599999999999, this idea of space of indentation versus braces? Like what can you dig into a little bit more?,"[50367, 428, 2126, 286, 2272, 286, 33793, 341, 9051, 47241, 30, 4525, 644, 460, 345, 3100, 656, 257, 1310, 1643, 517, 30, 50715]",0.0,-0.1587133263096665,1.5081967213114753,0.004576690495014191
143,143,103112,1039.12,1046.1599999999999, Why you still stand behind indentation? Because context is not the whole story history,"[50763, 4162, 345, 991, 1302, 2157, 33793, 341, 30, 4362, 4732, 318, 407, 262, 2187, 1621, 2106, 51115]",0.0,-0.1587133263096665,1.5081967213114753,0.004576690495014191
144,144,103112,1046.9599999999998,1057.04," in a sense provides more context. So for Python, there is no chance that we can switch. Python","[51155, 287, 257, 2565, 3769, 517, 4732, 13, 1406, 329, 11361, 11, 612, 318, 645, 2863, 326, 356, 460, 5078, 13, 11361, 51659]",0.0,-0.1587133263096665,1.5081967213114753,0.004576690495014191
145,145,105704,1057.04,1063.76," is using curly braces for something else, dictionaries mostly. We would get in trouble if we wanted to","[50363, 318, 1262, 45731, 47241, 329, 1223, 2073, 11, 48589, 3166, 4632, 13, 775, 561, 651, 287, 5876, 611, 356, 2227, 284, 50699]",0.0,-0.14647603679347682,1.5618556701030928,0.008088354021310806
146,146,105704,1063.76,1073.6," switch. Just like you couldn't redefine C to use indentation, even if you agree that indentation","[50699, 5078, 13, 2329, 588, 345, 3521, 470, 34087, 500, 327, 284, 779, 33793, 341, 11, 772, 611, 345, 4236, 326, 33793, 341, 51191]",0.0,-0.14647603679347682,1.5618556701030928,0.008088354021310806
147,147,105704,1073.6,1081.84," sort of in a greenfield environment would be better, you can't change that kind of thing in a language.","[51191, 3297, 286, 287, 257, 4077, 3245, 2858, 561, 307, 1365, 11, 345, 460, 470, 1487, 326, 1611, 286, 1517, 287, 257, 3303, 13, 51603]",0.0,-0.14647603679347682,1.5618556701030928,0.008088354021310806
148,148,108184,1082.72,1089.84," It's hard enough to reach agreement over much more minor details. Maybe, I mean, in the past in","[50407, 632, 338, 1327, 1576, 284, 3151, 4381, 625, 881, 517, 4159, 3307, 13, 6674, 11, 314, 1612, 11, 287, 262, 1613, 287, 50763]",0.0,-0.16963391985212053,1.4791666666666667,0.0015478854766115546
149,149,108184,1089.84,1095.9199999999998," Python, we did have a big debate about tips for spaces and for spaces versus fewer or more.","[50763, 11361, 11, 356, 750, 423, 257, 1263, 4384, 546, 9040, 329, 9029, 290, 329, 9029, 9051, 7380, 393, 517, 13, 51067]",0.0,-0.16963391985212053,1.4791666666666667,0.0015478854766115546
150,150,108184,1097.12,1104.8, And we sort of came up with a recommended standard and sort of options for people who want to be,"[51127, 843, 356, 3297, 286, 1625, 510, 351, 257, 7151, 3210, 290, 3297, 286, 3689, 329, 661, 508, 765, 284, 307, 51511]",0.0,-0.16963391985212053,1.4791666666666667,0.0015478854766115546
151,151,110480,1104.8,1113.04," different. But yes, I guess the thought experiment I'd like you to consider is if you could travel back","[50363, 1180, 13, 887, 3763, 11, 314, 4724, 262, 1807, 6306, 314, 1549, 588, 345, 284, 2074, 318, 611, 345, 714, 3067, 736, 50775]",0.0,-0.11157573291233608,1.4328358208955223,0.023334886878728867
152,152,110480,1113.04,1120.0, through time when the compatibility is not an issue. And you started Python all over again.,"[50775, 832, 640, 618, 262, 17764, 318, 407, 281, 2071, 13, 843, 345, 2067, 11361, 477, 625, 757, 13, 51123]",0.0,-0.11157573291233608,1.4328358208955223,0.023334886878728867
153,153,110480,1120.8,1129.9199999999998," Can you make the case for indentation still? Well, it frees up a pair of matched brackets of","[51163, 1680, 345, 787, 262, 1339, 329, 33793, 341, 991, 30, 3894, 11, 340, 2030, 274, 510, 257, 5166, 286, 14451, 28103, 286, 51619]",0.0,-0.11157573291233608,1.4328358208955223,0.023334886878728867
154,154,112992,1129.92,1137.52, which there are never enough in the world for other purposes. It really makes the language slightly,"[50363, 543, 612, 389, 1239, 1576, 287, 262, 995, 329, 584, 4959, 13, 632, 1107, 1838, 262, 3303, 4622, 50743]",0.0,-0.1263292948404948,1.5227272727272727,0.0020321907941251993
155,155,112992,1139.04,1147.28, sort of easier to grasp for people who don't already know another programming language.,"[50819, 3297, 286, 4577, 284, 13180, 329, 661, 508, 836, 470, 1541, 760, 1194, 8300, 3303, 13, 51231]",0.0,-0.1263292948404948,1.5227272727272727,0.0020321907941251993
156,156,112992,1149.1200000000001,1154.72," Because the sort of one of the things, and I mostly got this from my mentors who","[51323, 4362, 262, 3297, 286, 530, 286, 262, 1243, 11, 290, 314, 4632, 1392, 428, 422, 616, 44691, 508, 51603]",0.0,-0.1263292948404948,1.5227272727272727,0.0020321907941251993
157,157,115472,1155.52,1162.16," taught me programming language design in the earlier 80s. When you're teaching programming,","[50403, 7817, 502, 8300, 3303, 1486, 287, 262, 2961, 4019, 82, 13, 1649, 345, 821, 7743, 8300, 11, 50735]",0.0,-0.22769646644592284,1.5582822085889572,0.0002867650182452053
158,158,115472,1164.08,1171.6000000000001," for the total newbie who has not coded before in not in any other language,","[50831, 329, 262, 2472, 649, 12590, 508, 468, 407, 30817, 878, 287, 407, 287, 597, 584, 3303, 11, 51207]",0.0,-0.22769646644592284,1.5582822085889572,0.0002867650182452053
159,159,115472,1173.76,1183.52, a whole bunch of concepts in programming are very alien or sort of new and may be very,"[51315, 257, 2187, 7684, 286, 10838, 287, 8300, 389, 845, 8756, 393, 3297, 286, 649, 290, 743, 307, 845, 51803]",0.0,-0.22769646644592284,1.5582822085889572,0.0002867650182452053
160,160,118352,1183.6,1188.56, interesting but also distracting and confusing. And there are many different things you have to,"[50367, 3499, 475, 635, 36441, 290, 15337, 13, 843, 612, 389, 867, 1180, 1243, 345, 423, 284, 50615]",0.0,-0.11704735322432085,1.7962085308056872,0.0005895943031646311
161,161,118352,1188.56,1198.0," learn. You have to sort of in a typical 13 week programming course, you have to, if it's like","[50615, 2193, 13, 921, 423, 284, 3297, 286, 287, 257, 7226, 1511, 1285, 8300, 1781, 11, 345, 423, 284, 11, 611, 340, 338, 588, 51087]",0.0,-0.11704735322432085,1.7962085308056872,0.0005895943031646311
162,162,118352,1198.0,1204.56," really learning to program from scratch, you have to cover algorithms, you have to cover data","[51087, 1107, 4673, 284, 1430, 422, 12692, 11, 345, 423, 284, 3002, 16113, 11, 345, 423, 284, 3002, 1366, 51415]",0.0,-0.11704735322432085,1.7962085308056872,0.0005895943031646311
163,163,118352,1204.56,1212.0," structures, you have to cover syntax, you have to cover variables, loops, functions, recursion,","[51415, 8573, 11, 345, 423, 284, 3002, 15582, 11, 345, 423, 284, 3002, 9633, 11, 23607, 11, 5499, 11, 664, 24197, 11, 51787]",0.0,-0.11704735322432085,1.7962085308056872,0.0005895943031646311
164,164,121200,1212.0,1219.68," classes, expressions, operators. There are so many concepts if you sort of,","[50363, 6097, 11, 14700, 11, 12879, 13, 1318, 389, 523, 867, 10838, 611, 345, 3297, 286, 11, 50747]",0.0,-0.1638199161080753,1.536723163841808,0.0025266590528190136
165,165,121200,1220.88,1229.84," if you can spend a little less time having to worry about the syntax, the classic example was often,","[50807, 611, 345, 460, 4341, 257, 1310, 1342, 640, 1719, 284, 5490, 546, 262, 15582, 11, 262, 6833, 1672, 373, 1690, 11, 51255]",0.0,-0.1638199161080753,1.536723163841808,0.0025266590528190136
166,166,121200,1231.84,1239.52," oh, the compiler complains every time I put a semicolon in the wrong place or I forget to put a","[51355, 11752, 11, 262, 17050, 41165, 790, 640, 314, 1234, 257, 5026, 27045, 261, 287, 262, 2642, 1295, 393, 314, 6044, 284, 1234, 257, 51739]",0.0,-0.1638199161080753,1.536723163841808,0.0025266590528190136
167,167,123952,1239.52,1247.52," semicolon. Python doesn't have semicolons in that sense, so you can't forget them. And you are","[50363, 5026, 27045, 261, 13, 11361, 1595, 470, 423, 5026, 27045, 684, 287, 326, 2565, 11, 523, 345, 460, 470, 6044, 606, 13, 843, 345, 389, 50763]",0.0,-0.10168707501757276,1.68,0.002422105288133025
168,168,123952,1247.52,1254.8799999999999, also not sort of misled into putting them where they don't belong because you don't learn about,"[50763, 635, 407, 3297, 286, 38796, 656, 5137, 606, 810, 484, 836, 470, 5594, 780, 345, 836, 470, 2193, 546, 51131]",0.0,-0.10168707501757276,1.68,0.002422105288133025
169,169,123952,1254.8799999999999,1261.52, them in the first place. The flip side of that is forcing the strictness onto the beginning,"[51131, 606, 287, 262, 717, 1295, 13, 383, 14283, 1735, 286, 326, 318, 10833, 262, 7646, 1108, 4291, 262, 3726, 51463]",0.0,-0.10168707501757276,1.68,0.002422105288133025
170,170,123952,1261.52,1269.04, programmer to teach them that programming is values attention to details. You don't get to just,"[51463, 24292, 284, 4545, 606, 326, 8300, 318, 3815, 3241, 284, 3307, 13, 921, 836, 470, 651, 284, 655, 51839]",0.0,-0.10168707501757276,1.68,0.002422105288133025
171,171,126904,1269.12,1273.92," write the way you write an English name. Many of other details that they have to pay attention to,","[50367, 3551, 262, 835, 345, 3551, 281, 3594, 1438, 13, 4650, 286, 584, 3307, 326, 484, 423, 284, 1414, 3241, 284, 11, 50607]",0.0,-0.16733086764157473,1.6160337552742616,0.0008041918626986444
172,172,126904,1273.92,1280.56, I think they'll still get the message about paying attention to details. The interesting design,"[50607, 314, 892, 484, 1183, 991, 651, 262, 3275, 546, 5989, 3241, 284, 3307, 13, 383, 3499, 1486, 50939]",0.0,-0.16733086764157473,1.6160337552742616,0.0008041918626986444
173,173,126904,1280.56,1286.0," choice, I still program quite a bit in PHP, and I'm sure there's other languages like this,","[50939, 3572, 11, 314, 991, 1430, 2407, 257, 1643, 287, 19599, 11, 290, 314, 1101, 1654, 612, 338, 584, 8950, 588, 428, 11, 51211]",0.0,-0.16733086764157473,1.6160337552742616,0.0008041918626986444
174,174,126904,1286.0,1294.56," but the dollar sign before a variable, that was always an annoying thing for me. It didn't quite","[51211, 475, 262, 8872, 1051, 878, 257, 7885, 11, 326, 373, 1464, 281, 15774, 1517, 329, 502, 13, 632, 1422, 470, 2407, 51639]",0.0,-0.16733086764157473,1.6160337552742616,0.0008041918626986444
175,175,129456,1294.56,1299.36, fit into my understanding of why this is good for a programming language. I'm not sure if you,"[50363, 4197, 656, 616, 4547, 286, 1521, 428, 318, 922, 329, 257, 8300, 3303, 13, 314, 1101, 407, 1654, 611, 345, 50603]",0.0,-0.12146502903529575,1.5454545454545454,0.023717796429991722
176,176,129456,1299.36,1306.8799999999999, ever thought about that one. That is a historical thing. There is a whole lineage of programming,"[50603, 1683, 1807, 546, 326, 530, 13, 1320, 318, 257, 6754, 1517, 13, 1318, 318, 257, 2187, 31144, 286, 8300, 50979]",0.0,-0.12146502903529575,1.5454545454545454,0.023717796429991722
177,177,129456,1306.8799999999999,1317.76," languages. PHP is one, Perl was one. On the unique shell is one of the oldest or all the different","[50979, 8950, 13, 19599, 318, 530, 11, 24316, 373, 530, 13, 1550, 262, 3748, 7582, 318, 530, 286, 262, 13325, 393, 477, 262, 1180, 51523]",0.0,-0.12146502903529575,1.5454545454545454,0.023717796429991722
178,178,131776,1317.76,1326.96, shells. The dollar was invented for that purpose because the very earliest shells had a notion of,"[50363, 19679, 13, 383, 8872, 373, 15646, 329, 326, 4007, 780, 262, 845, 14555, 19679, 550, 257, 9495, 286, 50823]",0.0,-0.06223276167204886,1.5944444444444446,0.006473477929830551
179,179,131776,1326.96,1334.48," scripting, but they did not have a notion of parameterizing the scripting. A script is just","[50823, 36883, 11, 475, 484, 750, 407, 423, 257, 9495, 286, 11507, 2890, 262, 36883, 13, 317, 4226, 318, 655, 51199]",0.0,-0.06223276167204886,1.5944444444444446,0.006473477929830551
180,180,131776,1334.48,1342.8, a few lines of text where each line of text is a command that is read by a very primitive command,"[51199, 257, 1178, 3951, 286, 2420, 810, 1123, 1627, 286, 2420, 318, 257, 3141, 326, 318, 1100, 416, 257, 845, 20049, 3141, 51615]",0.0,-0.06223276167204886,1.5944444444444446,0.006473477929830551
181,181,134280,1342.8,1349.9199999999998, processor that then takes the first word on the line as the name of a program and passes all the,"[50363, 12649, 326, 788, 2753, 262, 717, 1573, 319, 262, 1627, 355, 262, 1438, 286, 257, 1430, 290, 8318, 477, 262, 50719]",0.0,-0.09632131457328796,1.6347305389221556,0.050038088113069534
182,182,134280,1349.9199999999998,1357.12, rest of the line as text into the program for the program to figure out what to do with,"[50719, 1334, 286, 262, 1627, 355, 2420, 656, 262, 1430, 329, 262, 1430, 284, 3785, 503, 644, 284, 466, 351, 51079]",0.0,-0.09632131457328796,1.6347305389221556,0.050038088113069534
183,183,134280,1357.68,1365.6," as arguments. By the time scripting was slightly more mature than the very first script,","[51107, 355, 7159, 13, 2750, 262, 640, 36883, 373, 4622, 517, 15345, 621, 262, 845, 717, 4226, 11, 51503]",0.0,-0.09632131457328796,1.6347305389221556,0.050038088113069534
184,184,136560,1366.48,1375.04," there was a convention that just like the first word of the line is the name of the program,","[50407, 612, 373, 257, 9831, 326, 655, 588, 262, 717, 1573, 286, 262, 1627, 318, 262, 1438, 286, 262, 1430, 11, 50835]",0.0,-0.10909356389726911,1.6,0.0006481649470515549
185,185,136560,1375.04,1385.04," the following words could be names of files. Input.text, output.html, things like that.","[50835, 262, 1708, 2456, 714, 307, 3891, 286, 3696, 13, 23412, 13, 5239, 11, 5072, 13, 6494, 11, 1243, 588, 326, 13, 51335]",0.0,-0.10909356389726911,1.6,0.0006481649470515549
186,186,136560,1386.08,1393.12," The next thing that happens is, oh, it would actually be really nice if we could have variables and","[51387, 383, 1306, 1517, 326, 4325, 318, 11, 11752, 11, 340, 561, 1682, 307, 1107, 3621, 611, 356, 714, 423, 9633, 290, 51739]",0.0,-0.10909356389726911,1.6,0.0006481649470515549
187,187,139312,1393.1999999999998,1398.2399999999998," especially parameters for scripts, parameters are usually what starts this process.","[50367, 2592, 10007, 329, 14750, 11, 10007, 389, 3221, 644, 4940, 428, 1429, 13, 50619]",0.0,-0.14298546314239502,1.6712962962962963,0.0003003487945534289
188,188,139312,1399.9199999999998,1406.3999999999999," But now you have a problem because you can't just say the parameters are x, y, and z.","[50703, 887, 783, 345, 423, 257, 1917, 780, 345, 460, 470, 655, 910, 262, 10007, 389, 2124, 11, 331, 11, 290, 1976, 13, 51027]",0.0,-0.14298546314239502,1.6712962962962963,0.0003003487945534289
189,189,139312,1407.4399999999998,1414.1599999999999," And so now we call, say, let's say x is the input file and y is the output file. And let's forget","[51079, 843, 523, 783, 356, 869, 11, 910, 11, 1309, 338, 910, 2124, 318, 262, 5128, 2393, 290, 331, 318, 262, 5072, 2393, 13, 843, 1309, 338, 6044, 51415]",0.0,-0.14298546314239502,1.6712962962962963,0.0003003487945534289
190,190,139312,1414.1599999999999,1421.04," about z for now. I have my program and I write program x, y. Well, that already has a meaning","[51415, 546, 1976, 329, 783, 13, 314, 423, 616, 1430, 290, 314, 3551, 1430, 2124, 11, 331, 13, 3894, 11, 326, 1541, 468, 257, 3616, 51759]",0.0,-0.14298546314239502,1.6712962962962963,0.0003003487945534289
191,191,142104,1421.04,1429.84, because that presumably means x itself is the file. It's a file name. It's not a variable name.,"[50363, 780, 326, 14572, 1724, 2124, 2346, 318, 262, 2393, 13, 632, 338, 257, 2393, 1438, 13, 632, 338, 407, 257, 7885, 1438, 13, 50803]",0.0,-0.12589886005108172,1.5459770114942528,0.0004731662629637867
192,192,142104,1432.3999999999999,1439.6, And so the inventors of things like the unique shell and I'm sure job command language,"[50931, 843, 523, 262, 8067, 669, 286, 1243, 588, 262, 3748, 7582, 290, 314, 1101, 1654, 1693, 3141, 3303, 51291]",0.0,-0.12589886005108172,1.5459770114942528,0.0004731662629637867
193,193,142104,1439.6,1449.36, in at IBM before that had to use something that made it clear to this script processor,"[51291, 287, 379, 19764, 878, 326, 550, 284, 779, 1223, 326, 925, 340, 1598, 284, 428, 4226, 12649, 51779]",0.0,-0.12589886005108172,1.5459770114942528,0.0004731662629637867
194,194,145104,1451.04,1456.56, here is an x that is not actually the name of a file which you just passed through to the,"[50363, 994, 318, 281, 2124, 326, 318, 407, 1682, 262, 1438, 286, 257, 2393, 543, 345, 655, 3804, 832, 284, 262, 50639]",0.0,-0.12913383035098805,1.625615763546798,0.0004785792843904346
195,195,145104,1458.0,1462.1599999999999, program you're running. Here is an x that is the name of a variable.,"[50711, 1430, 345, 821, 2491, 13, 3423, 318, 281, 2124, 326, 318, 262, 1438, 286, 257, 7885, 13, 50919]",0.0,-0.12913383035098805,1.625615763546798,0.0004785792843904346
196,196,145104,1463.04,1469.84," And when you're writing a script processor, you try to keep it as simple as possible.","[50963, 843, 618, 345, 821, 3597, 257, 4226, 12649, 11, 345, 1949, 284, 1394, 340, 355, 2829, 355, 1744, 13, 51303]",0.0,-0.12913383035098805,1.625615763546798,0.0004785792843904346
197,197,145104,1470.8,1479.2," Because certainly in the 50s and 60s, the thing that interprets the script was itself","[51351, 4362, 3729, 287, 262, 2026, 82, 290, 3126, 82, 11, 262, 1517, 326, 16795, 912, 262, 4226, 373, 2346, 51771]",0.0,-0.12913383035098805,1.625615763546798,0.0004785792843904346
198,198,147920,1479.2,1483.76, had to be a very small program because it had to fit in a very small part of memory.,"[50363, 550, 284, 307, 257, 845, 1402, 1430, 780, 340, 550, 284, 4197, 287, 257, 845, 1402, 636, 286, 4088, 13, 50591]",0.0,-0.11428413183792778,1.6698564593301435,0.0013707061298191547
199,199,147920,1484.4,1490.16," And so saying, oh, just look at each character. And if you see a dollar sign,","[50623, 843, 523, 2282, 11, 11752, 11, 655, 804, 379, 1123, 2095, 13, 843, 611, 345, 766, 257, 8872, 1051, 11, 50911]",0.0,-0.11428413183792778,1.6698564593301435,0.0013707061298191547
200,200,147920,1490.88,1495.92," you jump to another section of the code and then you gobble up characters, say, until the next","[50947, 345, 4391, 284, 1194, 2665, 286, 262, 2438, 290, 788, 345, 48484, 903, 510, 3435, 11, 910, 11, 1566, 262, 1306, 51199]",0.0,-0.11428413183792778,1.6698564593301435,0.0013707061298191547
201,201,147920,1495.92,1504.8, space or something. And you say that's the variable name. And so it was sort of invented as,"[51199, 2272, 393, 1223, 13, 843, 345, 910, 326, 338, 262, 7885, 1438, 13, 843, 523, 340, 373, 3297, 286, 15646, 355, 51643]",0.0,-0.11428413183792778,1.6698564593301435,0.0013707061298191547
202,202,150480,1505.68,1513.04, a clever way to make parsing of things that contain both variable and fixed parts.,"[50407, 257, 14169, 835, 284, 787, 32096, 286, 1243, 326, 3994, 1111, 7885, 290, 5969, 3354, 13, 50775]",0.0,-0.20215950906276703,1.5375722543352601,0.00014367814583238214
203,203,150480,1514.0,1521.36, Very easy in a very simple script processor. It also helps even then it also helps the human,"[50823, 9576, 2562, 287, 257, 845, 2829, 4226, 12649, 13, 632, 635, 5419, 772, 788, 340, 635, 5419, 262, 1692, 51191]",0.0,-0.20215950906276703,1.5375722543352601,0.00014367814583238214
204,204,150480,1522.32,1531.84," author and the human reader of the script to quickly see, oh, 20 lines down in the script.","[51239, 1772, 290, 262, 1692, 9173, 286, 262, 4226, 284, 2952, 766, 11, 11752, 11, 1160, 3951, 866, 287, 262, 4226, 13, 51715]",0.0,-0.20215950906276703,1.5375722543352601,0.00014367814583238214
205,205,153184,1531.9199999999998,1535.52," I see a reference to xyz. Oh, it has a dollar in front of it.","[50367, 314, 766, 257, 4941, 284, 2124, 45579, 13, 3966, 11, 340, 468, 257, 8872, 287, 2166, 286, 340, 13, 50547]",0.0,-0.13536053169064405,1.6775362318840579,0.014833285473287106
206,206,153184,1535.52,1539.4399999999998, So now we know that xyz must be one of the parameters of the script.,"[50547, 1406, 783, 356, 760, 326, 2124, 45579, 1276, 307, 530, 286, 262, 10007, 286, 262, 4226, 13, 50743]",0.0,-0.13536053169064405,1.6775362318840579,0.014833285473287106
207,207,153184,1539.4399999999998,1546.0," Well, this is fascinating. Several things to say, which is the leftovers from the simple script","[50743, 3894, 11, 428, 318, 13899, 13, 12168, 1243, 284, 910, 11, 543, 318, 262, 1364, 13801, 422, 262, 2829, 4226, 51071]",0.0,-0.13536053169064405,1.6775362318840579,0.014833285473287106
208,208,153184,1546.0,1552.48, processor languages are now in code bases like behind Facebook or behind most of the back end.,"[51071, 12649, 8950, 389, 783, 287, 2438, 12536, 588, 2157, 3203, 393, 2157, 749, 286, 262, 736, 886, 13, 51395]",0.0,-0.13536053169064405,1.6775362318840579,0.014833285473287106
209,209,153184,1552.48,1556.08, I think PHP is probably still runs most of the back end of the internet.,"[51395, 314, 892, 19599, 318, 2192, 991, 4539, 749, 286, 262, 736, 886, 286, 262, 5230, 13, 51575]",0.0,-0.13536053169064405,1.6775362318840579,0.014833285473287106
210,210,153184,1556.08,1559.52," Oh, yeah. I think there's a lot of it in Wikipedia too, for example.","[51575, 3966, 11, 10194, 13, 314, 892, 612, 338, 257, 1256, 286, 340, 287, 15312, 1165, 11, 329, 1672, 13, 51747]",0.0,-0.13536053169064405,1.6775362318840579,0.014833285473287106
211,211,155952,1560.32,1565.36, It's funny that those decisions are not funny. It's fascinating that those decisions permeate,"[50403, 632, 338, 8258, 326, 883, 5370, 389, 407, 8258, 13, 632, 338, 13899, 326, 883, 5370, 29298, 378, 50655]",0.0,-0.09533448652787642,1.5550660792951543,0.002711927518248558
212,212,155952,1565.36,1573.6," through time. Just like biological systems, right? I mean, the inner workings of DNA","[50655, 832, 640, 13, 2329, 588, 10685, 3341, 11, 826, 30, 314, 1612, 11, 262, 8434, 35084, 286, 7446, 51067]",0.0,-0.09533448652787642,1.5550660792951543,0.002711927518248558
213,213,155952,1574.8,1580.0," have been stable for, well, I don't know how long it was, like 300 million years,","[51127, 423, 587, 8245, 329, 11, 880, 11, 314, 836, 470, 760, 703, 890, 340, 373, 11, 588, 5867, 1510, 812, 11, 51387]",0.0,-0.09533448652787642,1.5550660792951543,0.002711927518248558
214,214,155952,1580.0,1587.04, half a billion years. And there are all sorts of weird quirks there that don't make a lot of,"[51387, 2063, 257, 2997, 812, 13, 843, 612, 389, 477, 10524, 286, 7650, 48072, 612, 326, 836, 470, 787, 257, 1256, 286, 51739]",0.0,-0.09533448652787642,1.5550660792951543,0.002711927518248558
215,215,158704,1587.04,1592.56, sense if you were to design a system like self replicating molecules from scratch.,"[50363, 2565, 611, 345, 547, 284, 1486, 257, 1080, 588, 2116, 2186, 12364, 17745, 422, 12692, 13, 50639]",0.0,-0.13887226104736328,1.6333333333333333,0.0014675043057650328
216,216,158704,1593.12,1600.0," Well, that system has a lot of interesting resilience. It has redundancy that results,","[50667, 3894, 11, 326, 1080, 468, 257, 1256, 286, 3499, 31307, 13, 632, 468, 49052, 326, 2482, 11, 51011]",0.0,-0.13887226104736328,1.6333333333333333,0.0014675043057650328
217,217,158704,1600.72,1606.0, like it messes up in interesting ways that still is resilient when you look at the system level of,"[51047, 588, 340, 2085, 274, 510, 287, 3499, 2842, 326, 991, 318, 30738, 618, 345, 804, 379, 262, 1080, 1241, 286, 51311]",0.0,-0.13887226104736328,1.6333333333333333,0.0014675043057650328
218,218,158704,1606.0,1611.84, the organism code doesn't necessarily have that computer programming code.,"[51311, 262, 26433, 2438, 1595, 470, 6646, 423, 326, 3644, 8300, 2438, 13, 51603]",0.0,-0.13887226104736328,1.6333333333333333,0.0014675043057650328
219,219,161184,1612.6399999999999,1621.52," You'd be surprised how much resilience modern code has. I mean, if you look at the number of bugs","[50403, 921, 1549, 307, 6655, 703, 881, 31307, 3660, 2438, 468, 13, 314, 1612, 11, 611, 345, 804, 379, 262, 1271, 286, 11316, 50847]",0.0,-0.10206882158915202,1.4861878453038675,0.0017017648788169026
220,220,161184,1621.52,1630.48," per line of code, even in very well tested code that in practice works just fine,","[50847, 583, 1627, 286, 2438, 11, 772, 287, 845, 880, 6789, 2438, 326, 287, 3357, 2499, 655, 3734, 11, 51295]",0.0,-0.10206882158915202,1.4861878453038675,0.0017017648788169026
221,221,161184,1631.52,1638.8799999999999, there are actually lots of things that don't work fine. And there are error correcting or,"[51347, 612, 389, 1682, 6041, 286, 1243, 326, 836, 470, 670, 3734, 13, 843, 612, 389, 4049, 39038, 393, 51715]",0.0,-0.10206882158915202,1.4861878453038675,0.0017017648788169026
222,222,163888,1638.88,1644.4," self correcting mechanisms at many levels, including probably the user of the code.","[50363, 2116, 39038, 11701, 379, 867, 2974, 11, 1390, 2192, 262, 2836, 286, 262, 2438, 13, 50639]",0.0,-0.08616829466545718,1.577092511013216,0.0030182069167494774
223,223,163888,1644.96,1652.48," Well, in the end, the user who sort of is told, well, you got to reboot your PC is part of that","[50667, 3894, 11, 287, 262, 886, 11, 262, 2836, 508, 3297, 286, 318, 1297, 11, 880, 11, 345, 1392, 284, 20149, 534, 4217, 318, 636, 286, 326, 51043]",0.0,-0.08616829466545718,1.577092511013216,0.0030182069167494774
224,224,163888,1652.48,1661.5200000000002," system. And a slightly less drastic thing is reload page, which we all know how to do","[51043, 1080, 13, 843, 257, 4622, 1342, 27069, 1517, 318, 18126, 2443, 11, 543, 356, 477, 760, 703, 284, 466, 51495]",0.0,-0.08616829466545718,1.577092511013216,0.0030182069167494774
225,225,163888,1662.16,1667.68, without thinking about it when something weird happens. You try to reload a few times before,"[51527, 1231, 3612, 546, 340, 618, 1223, 7650, 4325, 13, 921, 1949, 284, 18126, 257, 1178, 1661, 878, 51803]",0.0,-0.08616829466545718,1.577092511013216,0.0030182069167494774
226,226,166768,1667.68,1672.16," you say, Oh, there's something really weird. Okay, or try to click the button again, if the","[50363, 345, 910, 11, 3966, 11, 612, 338, 1223, 1107, 7650, 13, 16805, 11, 393, 1949, 284, 3904, 262, 4936, 757, 11, 611, 262, 50587]",0.0,-0.12528982162475585,1.5690376569037656,0.0004371760005597025
227,227,166768,1672.16,1678.48," first time didn't work. Well, yeah, that we should all have learned not to do that because that's","[50587, 717, 640, 1422, 470, 670, 13, 3894, 11, 10194, 11, 326, 356, 815, 477, 423, 4499, 407, 284, 466, 326, 780, 326, 338, 50903]",0.0,-0.12528982162475585,1.5690376569037656,0.0004371760005597025
228,228,166768,1678.48,1684.16," probably just going to turn the light back off. Yeah, true. So do it three times. That's the","[50903, 2192, 655, 1016, 284, 1210, 262, 1657, 736, 572, 13, 9425, 11, 2081, 13, 1406, 466, 340, 1115, 1661, 13, 1320, 338, 262, 51187]",0.0,-0.12528982162475585,1.5690376569037656,0.0004371760005597025
229,229,166768,1684.16,1692.4," right lesson. So, and I wonder how many people actually like the dollar sign, like you said,","[51187, 826, 11483, 13, 1406, 11, 290, 314, 4240, 703, 867, 661, 1682, 588, 262, 8872, 1051, 11, 588, 345, 531, 11, 51599]",0.0,-0.12528982162475585,1.5690376569037656,0.0004371760005597025
230,230,169240,1692.48,1699.8400000000001," it is documentation. So to me, it's whatever the opposite of syntactic sugar is syntactic poison.","[50367, 340, 318, 10314, 13, 1406, 284, 502, 11, 340, 338, 4232, 262, 6697, 286, 7419, 12009, 7543, 318, 7419, 12009, 8764, 13, 50735]",0.0,-0.16658316718207467,1.7035398230088497,0.002168190898373723
231,231,169240,1700.72,1706.24," To me, it is such a pain in the ass that I have to type in a dollar show, also super error prone.","[50779, 1675, 502, 11, 340, 318, 884, 257, 2356, 287, 262, 840, 326, 314, 423, 284, 2099, 287, 257, 8872, 905, 11, 635, 2208, 4049, 17592, 13, 51055]",0.0,-0.16658316718207467,1.7035398230088497,0.002168190898373723
232,232,169240,1707.0400000000002,1713.2800000000002," So it's not self documenting. It's, it's a bug generating thing. It is a kind of documentation","[51095, 1406, 340, 338, 407, 2116, 33045, 13, 632, 338, 11, 340, 338, 257, 5434, 15453, 1517, 13, 632, 318, 257, 1611, 286, 10314, 51407]",0.0,-0.16658316718207467,1.7035398230088497,0.002168190898373723
233,233,169240,1713.2800000000002,1718.3200000000002," that's the pro and the con is it's a source of a lot of bugs. But actually, I have to ask you,","[51407, 326, 338, 262, 386, 290, 262, 369, 318, 340, 338, 257, 2723, 286, 257, 1256, 286, 11316, 13, 887, 1682, 11, 314, 423, 284, 1265, 345, 11, 51659]",0.0,-0.16658316718207467,1.7035398230088497,0.002168190898373723
234,234,171832,1718.48,1725.36," um, this is really interesting idea of bugs per line of code. If you look at all the computer","[50371, 23781, 11, 428, 318, 1107, 3499, 2126, 286, 11316, 583, 1627, 286, 2438, 13, 1002, 345, 804, 379, 477, 262, 3644, 50715]",0.0,-0.16393782583515296,1.6340425531914893,0.004491847008466721
235,235,171832,1725.36,1731.84, systems out there from the code that runs nuclear weapons to the code that runs all the amazing,"[50715, 3341, 503, 612, 422, 262, 2438, 326, 4539, 4523, 3777, 284, 262, 2438, 326, 4539, 477, 262, 4998, 51039]",0.0,-0.16393782583515296,1.6340425531914893,0.004491847008466721
236,236,171832,1731.84,1738.08, companies that you've been involved with and not code that runs Twitter and Facebook and Dropbox,"[51039, 2706, 326, 345, 1053, 587, 2950, 351, 290, 407, 2438, 326, 4539, 3009, 290, 3203, 290, 38930, 51351]",0.0,-0.16393782583515296,1.6340425531914893,0.004491847008466721
237,237,171832,1738.08,1747.04," and Google and Microsoft windows and so on. And we like laid out, when that be a cool like table,","[51351, 290, 3012, 290, 5413, 9168, 290, 523, 319, 13, 843, 356, 588, 8104, 503, 11, 618, 326, 307, 257, 3608, 588, 3084, 11, 51799]",0.0,-0.16393782583515296,1.6340425531914893,0.004491847008466721
238,238,174704,1747.68,1753.92, bugs per line of code. And what was that? Let's put like actual companies aside. Do you think we'd,"[50395, 11316, 583, 1627, 286, 2438, 13, 843, 644, 373, 326, 30, 3914, 338, 1234, 588, 4036, 2706, 7263, 13, 2141, 345, 892, 356, 1549, 50707]",0.0,-0.18634304557878947,1.6352459016393444,0.00015650157001800835
239,239,174704,1753.92,1760.32, be surprised by the number we see there for all these companies that depends on whether you've ever,"[50707, 307, 6655, 416, 262, 1271, 356, 766, 612, 329, 477, 777, 2706, 326, 8338, 319, 1771, 345, 1053, 1683, 51027]",0.0,-0.18634304557878947,1.6352459016393444,0.00015650157001800835
240,240,174704,1761.12,1770.56, read about research that's being done in this area before. And I didn't know that the the last time I,"[51067, 1100, 546, 2267, 326, 338, 852, 1760, 287, 428, 1989, 878, 13, 843, 314, 1422, 470, 760, 326, 262, 262, 938, 640, 314, 51539]",0.0,-0.18634304557878947,1.6352459016393444,0.00015650157001800835
241,241,174704,1771.68,1776.56," I saw some research like that, there was probably in the 90s and the research might have been done","[51595, 314, 2497, 617, 2267, 588, 326, 11, 612, 373, 2192, 287, 262, 4101, 82, 290, 262, 2267, 1244, 423, 587, 1760, 51839]",0.0,-0.18634304557878947,1.6352459016393444,0.00015650157001800835
242,242,177656,1776.56,1787.2," in the 80s. But the the conclusion was across a wide range of different software, different languages,","[50363, 287, 262, 4019, 82, 13, 887, 262, 262, 7664, 373, 1973, 257, 3094, 2837, 286, 1180, 3788, 11, 1180, 8950, 11, 50895]",0.0,-0.1429921785990397,1.596774193548387,0.0008280217298306525
243,243,177656,1788.1599999999999,1797.76," different companies, different development styles. The number of bugs is always, I think it's in the","[50943, 1180, 2706, 11, 1180, 2478, 12186, 13, 383, 1271, 286, 11316, 318, 1464, 11, 314, 892, 340, 338, 287, 262, 51423]",0.0,-0.1429921785990397,1.596774193548387,0.0008280217298306525
244,244,177656,1797.76,1805.2, order of about one bug per thousand lines in sort of mature software that that is considered.,"[51423, 1502, 286, 546, 530, 5434, 583, 7319, 3951, 287, 3297, 286, 15345, 3788, 326, 326, 318, 3177, 13, 51795]",0.0,-0.1429921785990397,1.596774193548387,0.0008280217298306525
245,245,180656,1806.72,1812.32, Interesting. As good as it gets. Can't give you some facts here. There's a lot of papers. So you said,"[50371, 43580, 13, 1081, 922, 355, 340, 3011, 13, 1680, 470, 1577, 345, 617, 6419, 994, 13, 1318, 338, 257, 1256, 286, 9473, 13, 1406, 345, 531, 50651]",0.0,-0.17240545921718953,1.5975609756097562,0.002110676374286413
246,246,180656,1812.32,1822.48," mature software, right? So here's a report from a programming analytics company. Now this is from","[50651, 15345, 3788, 11, 826, 30, 1406, 994, 338, 257, 989, 422, 257, 8300, 23696, 1664, 13, 2735, 428, 318, 422, 51159]",0.0,-0.17240545921718953,1.5975609756097562,0.002110676374286413
247,247,180656,1822.48,1828.6399999999999," a developer perspective. Let me just say what it says, because this is very weird and surprising.","[51159, 257, 8517, 6650, 13, 3914, 502, 655, 910, 644, 340, 1139, 11, 780, 428, 318, 845, 7650, 290, 6452, 13, 51467]",0.0,-0.17240545921718953,1.5975609756097562,0.002110676374286413
248,248,180656,1828.6399999999999,1836.48," On average, a developer creates 70 bugs per 1000 lines of code, 15 bugs per 1000 lines of code,","[51467, 1550, 2811, 11, 257, 8517, 8075, 4317, 11316, 583, 8576, 3951, 286, 2438, 11, 1315, 11316, 583, 8576, 3951, 286, 2438, 11, 51859]",0.0,-0.17240545921718953,1.5975609756097562,0.002110676374286413
249,249,183656,1836.6399999999999,1843.36," find their way to the customers. This is in software they've been. Oh, I was I was wrong by an order","[50367, 1064, 511, 835, 284, 262, 4297, 13, 770, 318, 287, 3788, 484, 1053, 587, 13, 3966, 11, 314, 373, 314, 373, 2642, 416, 281, 1502, 50703]",0.0,-0.3130028977686045,1.496,0.0007109615253284574
250,250,183656,1843.36,1850.0, working there. Fixing a bug takes 30 times longer than writing a line of code that I can believe.,"[50703, 1762, 612, 13, 13268, 278, 257, 5434, 2753, 1542, 1661, 2392, 621, 3597, 257, 1627, 286, 2438, 326, 314, 460, 1975, 13, 51035]",0.0,-0.3130028977686045,1.496,0.0007109615253284574
251,251,183656,1850.0,1857.44," Yeah, 75% of a developer's time is spent on debugging. That's for an average developer. They","[51035, 9425, 11, 5441, 4, 286, 257, 8517, 338, 640, 318, 3377, 319, 28769, 13, 1320, 338, 329, 281, 2811, 8517, 13, 1119, 51407]",0.0,-0.3130028977686045,1.496,0.0007109615253284574
252,252,183656,1857.44,1866.48," analyze this 15, 1500 hours a year. And you us alone, 113 billion dollars to spend","[51407, 16602, 428, 1315, 11, 20007, 2250, 257, 614, 13, 843, 345, 514, 3436, 11, 17318, 2997, 5054, 284, 4341, 51859]",0.0,-0.3130028977686045,1.496,0.0007109615253284574
253,253,186648,1866.56,1873.6, annually on identifying and fixing bugs. And I imagine this is marketing literature for someone,"[50367, 13844, 319, 13720, 290, 18682, 11316, 13, 843, 314, 5967, 428, 318, 7124, 9285, 329, 2130, 50719]",0.0,-0.15823673672146268,1.6339285714285714,0.0008640381274744868
254,254,186648,1873.6,1880.56, who claims to have a golden bullet or a silver bullet that makes all that investment in fixing,"[50719, 508, 3667, 284, 423, 257, 10861, 10492, 393, 257, 8465, 10492, 326, 1838, 477, 326, 4896, 287, 18682, 51067]",0.0,-0.15823673672146268,1.6339285714285714,0.0008640381274744868
255,255,186648,1880.56,1886.88," bugs go away. But that's that's usually not going to. Yeah, that's not going to happen.","[51067, 11316, 467, 1497, 13, 887, 326, 338, 326, 338, 3221, 407, 1016, 284, 13, 9425, 11, 326, 338, 407, 1016, 284, 1645, 13, 51383]",0.0,-0.15823673672146268,1.6339285714285714,0.0008640381274744868
256,256,186648,1886.88,1890.88," Well, there are I mean, they're referencing a lot of stuff, of course, but it is a page","[51383, 3894, 11, 612, 389, 314, 1612, 11, 484, 821, 32578, 257, 1256, 286, 3404, 11, 286, 1781, 11, 475, 340, 318, 257, 2443, 51583]",0.0,-0.15823673672146268,1.6339285714285714,0.0008640381274744868
257,257,189088,1891.5200000000002,1897.3600000000001," that is you know, there's a contact us button at the bottom. Presumably, if you just","[50395, 326, 318, 345, 760, 11, 612, 338, 257, 2800, 514, 4936, 379, 262, 4220, 13, 48800, 11, 611, 345, 655, 50687]",0.0,-0.15351181030273436,1.6178571428571429,0.004061118699610233
258,258,189088,1898.0800000000002,1902.24," spend a little bit less than 100 billion dollars, we're willing to solve the problem for you.","[50723, 4341, 257, 1310, 1643, 1342, 621, 1802, 2997, 5054, 11, 356, 821, 4684, 284, 8494, 262, 1917, 329, 345, 13, 50931]",0.0,-0.15351181030273436,1.6178571428571429,0.004061118699610233
259,259,189088,1903.68,1908.48," Right. And there's also a report on stack exchange, it's that overflow and the exact same topic. But","[51003, 6498, 13, 843, 612, 338, 635, 257, 989, 319, 8931, 5163, 11, 340, 338, 326, 30343, 290, 262, 2748, 976, 7243, 13, 887, 51243]",0.0,-0.15351181030273436,1.6178571428571429,0.004061118699610233
260,260,189088,1908.48,1914.0," when I open it up at the moment, the page says stack overflow is currently offline for maintenance.","[51243, 618, 314, 1280, 340, 510, 379, 262, 2589, 11, 262, 2443, 1139, 8931, 30343, 318, 3058, 18043, 329, 9262, 13, 51519]",0.0,-0.15351181030273436,1.6178571428571429,0.004061118699610233
261,261,189088,1914.0,1918.5600000000002," Oh, that is ironic. Yes. By the way, their error page is awesome. Anyway,","[51519, 3966, 11, 326, 318, 25304, 13, 3363, 13, 2750, 262, 835, 11, 511, 4049, 2443, 318, 7427, 13, 21836, 11, 51747]",0.0,-0.15351181030273436,1.6178571428571429,0.004061118699610233
262,262,191856,1919.44,1925.84," I mean, can you believe that number of bugs? Oh, absolutely. Isn't that scary that 70 bucks","[50407, 314, 1612, 11, 460, 345, 1975, 326, 1271, 286, 11316, 30, 3966, 11, 5543, 13, 25110, 470, 326, 14343, 326, 4317, 24780, 50727]",0.0,-0.15340197320077933,1.6050420168067228,0.0005329728592187166
263,263,191856,1925.84,1932.0," per 1000 lines of code? So even 10 bucks per 1000 lines. Well, that's about one bug after every","[50727, 583, 8576, 3951, 286, 2438, 30, 1406, 772, 838, 24780, 583, 8576, 3951, 13, 3894, 11, 326, 338, 546, 530, 5434, 706, 790, 51035]",0.0,-0.15340197320077933,1.6050420168067228,0.0005329728592187166
264,264,191856,1932.0,1938.48," 15 lines. And that's when you're first typing it in. Yeah, from a developer, but like, how many","[51035, 1315, 3951, 13, 843, 326, 338, 618, 345, 821, 717, 19720, 340, 287, 13, 9425, 11, 422, 257, 8517, 11, 475, 588, 11, 703, 867, 51359]",0.0,-0.15340197320077933,1.6050420168067228,0.0005329728592187166
265,265,191856,1938.48,1945.2," bugs are going to be found? If you're if you're typing, well, the development process is extremely","[51359, 11316, 389, 1016, 284, 307, 1043, 30, 1002, 345, 821, 611, 345, 821, 19720, 11, 880, 11, 262, 2478, 1429, 318, 4457, 51695]",0.0,-0.15340197320077933,1.6050420168067228,0.0005329728592187166
266,266,194520,1945.28,1951.68," iterative. Yeah. Typically, you don't make a plan for what software you're going to release a year","[50367, 11629, 876, 13, 9425, 13, 27095, 11, 345, 836, 470, 787, 257, 1410, 329, 644, 3788, 345, 821, 1016, 284, 2650, 257, 614, 50687]",0.0,-0.12095886552837533,1.5513513513513513,0.0016932629514485598
267,267,194520,1951.68,1958.88," from now. Yeah. And work out all the details, because actually all the details themselves","[50687, 422, 783, 13, 9425, 13, 843, 670, 503, 477, 262, 3307, 11, 780, 1682, 477, 262, 3307, 2405, 51047]",0.0,-0.12095886552837533,1.5513513513513513,0.0016932629514485598
268,268,194520,1958.88,1967.92," consist. They sort of compose a program. And that's that being a program, all your plans will have","[51047, 3473, 13, 1119, 3297, 286, 36664, 257, 1430, 13, 843, 326, 338, 326, 852, 257, 1430, 11, 477, 534, 3352, 481, 423, 51499]",0.0,-0.12095886552837533,1.5513513513513513,0.0016932629514485598
269,269,196792,1968.0,1974.4," bugs in them too, and inaccuracies. But what what you actually do is","[50367, 11316, 287, 606, 1165, 11, 290, 47283, 13433, 13, 887, 644, 644, 345, 1682, 466, 318, 50687]",0.0,-0.17078955630038647,1.5837320574162679,0.0015607813838869333
270,270,196792,1976.64,1981.68, you do a bunch of typing and I'm actually really I'm a really bad typist.,"[50799, 345, 466, 257, 7684, 286, 19720, 290, 314, 1101, 1682, 1107, 314, 1101, 257, 1107, 2089, 2170, 396, 13, 51051]",0.0,-0.17078955630038647,1.5837320574162679,0.0015607813838869333
271,271,196792,1982.88,1990.16," That's just I've never learned to type with 10 fingers. How many do you use? Well, I use all 10","[51111, 1320, 338, 655, 314, 1053, 1239, 4499, 284, 2099, 351, 838, 9353, 13, 1374, 867, 466, 345, 779, 30, 3894, 11, 314, 779, 477, 838, 51475]",0.0,-0.17078955630038647,1.5837320574162679,0.0015607813838869333
272,272,196792,1990.16,1996.16," of them, but not very well. But I never I never too could type in class. And I never sort of","[51475, 286, 606, 11, 475, 407, 845, 880, 13, 887, 314, 1239, 314, 1239, 1165, 714, 2099, 287, 1398, 13, 843, 314, 1239, 3297, 286, 51775]",0.0,-0.17078955630038647,1.5837320574162679,0.0015607813838869333
273,273,199616,1996.16,2002.88," corrected that. So the first time I seriously learned, I had to learn the layout of a of a","[50363, 19267, 326, 13, 1406, 262, 717, 640, 314, 6411, 4499, 11, 314, 550, 284, 2193, 262, 12461, 286, 257, 286, 257, 50699]",0.0,-0.13850502286638533,1.46524064171123,0.0006667469860985875
274,274,199616,2002.88,2009.8400000000001," query to keyboard was actually in college in my first programming classes, where we used punch","[50699, 12405, 284, 10586, 373, 1682, 287, 4152, 287, 616, 717, 8300, 6097, 11, 810, 356, 973, 10862, 51047]",0.0,-0.13850502286638533,1.46524064171123,0.0006667469860985875
275,275,199616,2009.8400000000001,2021.52," cards. And so with my two fingers, I sort of pecked out my code. Watch anyone give you a","[51047, 4116, 13, 843, 523, 351, 616, 734, 9353, 11, 314, 3297, 286, 613, 694, 276, 503, 616, 2438, 13, 6305, 2687, 1577, 345, 257, 51631]",0.0,-0.13850502286638533,1.46524064171123,0.0006667469860985875
276,276,202152,2021.52,2029.68, little coding demonstration. They'll have to produce like four lines of code. And now see how,"[50363, 1310, 19617, 13646, 13, 1119, 1183, 423, 284, 4439, 588, 1440, 3951, 286, 2438, 13, 843, 783, 766, 703, 50771]",0.0,-0.13941757920859515,1.484375,0.01583521068096161
277,277,202152,2029.68,2036.8799999999999," many times they use the backspace key. Yeah, because they made a mistake. And and and some people,","[50771, 867, 1661, 484, 779, 262, 736, 13200, 1994, 13, 9425, 11, 780, 484, 925, 257, 7457, 13, 843, 290, 290, 617, 661, 11, 51131]",0.0,-0.13941757920859515,1.484375,0.01583521068096161
278,278,202152,2036.8799999999999,2045.84," especially when when someone else is looking, will will backspace over 20, 30, 40 characters","[51131, 2592, 618, 618, 2130, 2073, 318, 2045, 11, 481, 481, 736, 13200, 625, 1160, 11, 1542, 11, 2319, 3435, 51579]",0.0,-0.13941757920859515,1.484375,0.01583521068096161
279,279,204584,2046.56,2052.72," to fix a typo earlier in a line. If you're if you're slightly more experienced, of course,","[50399, 284, 4259, 257, 46517, 2961, 287, 257, 1627, 13, 1002, 345, 821, 611, 345, 821, 4622, 517, 5924, 11, 286, 1781, 11, 50707]",0.0,-0.13952154914538065,1.6608695652173913,0.00020888028666377068
280,280,204584,2052.72,2058.64, you use your arrow buttons to go or your mouse to where the mouse is usually slower than than the,"[50707, 345, 779, 534, 15452, 12163, 284, 467, 393, 534, 10211, 284, 810, 262, 10211, 318, 3221, 13611, 621, 621, 262, 51003]",0.0,-0.13952154914538065,1.6608695652173913,0.00020888028666377068
281,281,204584,2058.64,2067.36," arrows. But a lot of people, when they type a 20 character word, which is not unusual. And they","[51003, 20507, 13, 887, 257, 1256, 286, 661, 11, 618, 484, 2099, 257, 1160, 2095, 1573, 11, 543, 318, 407, 8468, 13, 843, 484, 51439]",0.0,-0.13952154914538065,1.6608695652173913,0.00020888028666377068
282,282,204584,2067.36,2072.3199999999997, realized they made is made a mistake at the start of the word the backspace over the whole thing.,"[51439, 6939, 484, 925, 318, 925, 257, 7457, 379, 262, 923, 286, 262, 1573, 262, 736, 13200, 625, 262, 2187, 1517, 13, 51687]",0.0,-0.13952154914538065,1.6608695652173913,0.00020888028666377068
283,283,207232,2073.04,2077.2000000000003," And then retype it. And sometimes it takes three, four times to get it right. So","[50399, 843, 788, 302, 4906, 340, 13, 843, 3360, 340, 2753, 1115, 11, 1440, 1661, 284, 651, 340, 826, 13, 1406, 50607]",0.0,-0.12552329063415527,1.6343612334801763,0.0011693757260218263
284,284,207232,2078.88,2085.28," I don't know what your definition of bug is, arguably mistyping a word and then correcting it","[50691, 314, 836, 470, 760, 644, 534, 6770, 286, 5434, 318, 11, 15242, 4020, 4464, 278, 257, 1573, 290, 788, 39038, 340, 51011]",0.0,-0.12552329063415527,1.6343612334801763,0.0011693757260218263
285,285,207232,2085.28,2093.6800000000003," immediately is not a bug. On the other hand, you you already do sort of lose time. And every once","[51011, 3393, 318, 407, 257, 5434, 13, 1550, 262, 584, 1021, 11, 345, 345, 1541, 466, 3297, 286, 4425, 640, 13, 843, 790, 1752, 51431]",0.0,-0.12552329063415527,1.6343612334801763,0.0011693757260218263
286,286,207232,2093.6800000000003,2101.36," in a while, there's sort of a typo that you don't get in that process. And now you've you've typed","[51431, 287, 257, 981, 11, 612, 338, 3297, 286, 257, 46517, 326, 345, 836, 470, 651, 287, 326, 1429, 13, 843, 783, 345, 1053, 345, 1053, 25683, 51815]",0.0,-0.12552329063415527,1.6343612334801763,0.0011693757260218263
287,287,210136,2101.36,2107.92," like 10 lines of code. And somewhere in the middle of it, you don't know where yet is a typo or","[50363, 588, 838, 3951, 286, 2438, 13, 843, 7382, 287, 262, 3504, 286, 340, 11, 345, 836, 470, 760, 810, 1865, 318, 257, 46517, 393, 50691]",0.0,-0.1302877058062637,1.7444444444444445,0.000718418974429369
288,288,210136,2108.8,2114.48, maybe a think-o where you you forgot that you had to initialize a variable or something.,"[50735, 3863, 257, 892, 12, 78, 810, 345, 345, 16453, 326, 345, 550, 284, 41216, 257, 7885, 393, 1223, 13, 51019]",0.0,-0.1302877058062637,1.7444444444444445,0.000718418974429369
289,289,210136,2114.48,2118.48," But those are two different things. And I would say, yes, you have to actually run the code to","[51019, 887, 883, 389, 734, 1180, 1243, 13, 843, 314, 561, 910, 11, 3763, 11, 345, 423, 284, 1682, 1057, 262, 2438, 284, 51219]",0.0,-0.1302877058062637,1.7444444444444445,0.000718418974429369
290,290,210136,2118.48,2124.4," discover that typo. But forgetting to initialize a variable is a fundamentally different thing,","[51219, 7073, 326, 46517, 13, 887, 32012, 284, 41216, 257, 7885, 318, 257, 17640, 1180, 1517, 11, 51515]",0.0,-0.1302877058062637,1.7444444444444445,0.000718418974429369
291,291,210136,2125.04,2130.4," because that thing can go and discover it. That depends on the language in Python, it will not.","[51547, 780, 326, 1517, 460, 467, 290, 7073, 340, 13, 1320, 8338, 319, 262, 3303, 287, 11361, 11, 340, 481, 407, 13, 51815]",0.0,-0.1302877058062637,1.7444444444444445,0.000718418974429369
292,292,213040,2130.4,2136.64, Right. And sort of modern compilers are usually pretty good at catching that even for C.,"[50363, 6498, 13, 843, 3297, 286, 3660, 552, 34393, 389, 3221, 2495, 922, 379, 16508, 326, 772, 329, 327, 13, 50675]",0.0,-0.16670957023714794,1.5981308411214954,0.0012710903538390994
293,293,213040,2136.64,2142.96," So for that specific thing, but actually deeper, it might there might be another variable","[50675, 1406, 329, 326, 2176, 1517, 11, 475, 1682, 9211, 11, 340, 1244, 612, 1244, 307, 1194, 7885, 50991]",0.0,-0.16670957023714794,1.5981308411214954,0.0012710903538390994
294,294,213040,2143.76,2148.7200000000003," that is initialized, but logically speaking, the one you meant related.","[51031, 326, 318, 23224, 11, 475, 34193, 5486, 11, 262, 530, 345, 4001, 3519, 13, 51279]",0.0,-0.16670957023714794,1.5981308411214954,0.0012710903538390994
295,295,213040,2150.96,2155.6800000000003," It's like name the same, but it's a different thing. And you forgot to initialize whatever,","[51391, 632, 338, 588, 1438, 262, 976, 11, 475, 340, 338, 257, 1180, 1517, 13, 843, 345, 16453, 284, 41216, 4232, 11, 51627]",0.0,-0.16670957023714794,1.5981308411214954,0.0012710903538390994
296,296,215568,2155.7599999999998,2161.2, some counter or some some basic variable they're using. I can tell that you've coded. Yes.,"[50367, 617, 3753, 393, 617, 617, 4096, 7885, 484, 821, 1262, 13, 314, 460, 1560, 326, 345, 1053, 30817, 13, 3363, 13, 50639]",0.0,-0.16840902629651522,1.6387665198237886,0.0013133520260453224
297,297,215568,2161.7599999999998,2166.72," By the way, I should mention that I use the Kinesis keyboard, which has the backspace under","[50667, 2750, 262, 835, 11, 314, 815, 3068, 326, 314, 779, 262, 509, 1127, 271, 10586, 11, 543, 468, 262, 736, 13200, 739, 50915]",0.0,-0.16840902629651522,1.6387665198237886,0.0013133520260453224
298,298,215568,2166.72,2174.24, the thumb. And one of the biggest reasons I use that keyboard is because you realize in order to,"[50915, 262, 15683, 13, 843, 530, 286, 262, 4094, 3840, 314, 779, 326, 10586, 318, 780, 345, 6537, 287, 1502, 284, 51291]",0.0,-0.16840902629651522,1.6387665198237886,0.0013133520260453224
299,299,215568,2174.24,2183.12," use the backspace, usual keyboard, you have to stretch your pinky out. And like the for most","[51291, 779, 262, 736, 13200, 11, 6678, 10586, 11, 345, 423, 284, 7539, 534, 11398, 88, 503, 13, 843, 588, 262, 329, 749, 51735]",0.0,-0.16840902629651522,1.6387665198237886,0.0013133520260453224
300,300,218312,2183.2,2188.7999999999997," normal keyboards, the backspace is under the pinky. And so I don't know if people realize","[50367, 3487, 34512, 11, 262, 736, 13200, 318, 739, 262, 11398, 88, 13, 843, 523, 314, 836, 470, 760, 611, 661, 6537, 50647]",0.0,-0.1438019760255891,1.7657992565055762,0.001223024446517229
301,301,218312,2189.3599999999997,2195.2," the pain they go through in their life, because of the backspace key being so far away. So with","[50675, 262, 2356, 484, 467, 832, 287, 511, 1204, 11, 780, 286, 262, 736, 13200, 1994, 852, 523, 1290, 1497, 13, 1406, 351, 50967]",0.0,-0.1438019760255891,1.7657992565055762,0.001223024446517229
302,302,218312,2195.2,2199.68," the Kinesis, it's right under the thumb so you don't have to actually move your hands, the backspace","[50967, 262, 509, 1127, 271, 11, 340, 338, 826, 739, 262, 15683, 523, 345, 836, 470, 423, 284, 1682, 1445, 534, 2832, 11, 262, 736, 13200, 51191]",0.0,-0.1438019760255891,1.7657992565055762,0.001223024446517229
303,303,218312,2199.68,2205.92," in the delete, right? What do you do if you're ever not with your own keyboard and you have to","[51191, 287, 262, 12233, 11, 826, 30, 1867, 466, 345, 466, 611, 345, 821, 1683, 407, 351, 534, 898, 10586, 290, 345, 423, 284, 51503]",0.0,-0.1438019760255891,1.7657992565055762,0.001223024446517229
304,304,218312,2205.92,2211.8399999999997," use someone else a species keyboard that has a standard layout? So first of all, it turns out","[51503, 779, 2130, 2073, 257, 4693, 10586, 326, 468, 257, 3210, 12461, 30, 1406, 717, 286, 477, 11, 340, 4962, 503, 51799]",0.0,-0.1438019760255891,1.7657992565055762,0.001223024446517229
305,305,221184,2212.32,2216.8," that you can actually go your whole life, always having the keyboard with you.","[50387, 326, 345, 460, 1682, 467, 534, 2187, 1204, 11, 1464, 1719, 262, 10586, 351, 345, 13, 50611]",0.0,-0.18567998292016202,1.7153284671532847,0.0006137330201454461
306,306,221184,2216.8,2222.08," So this, well, except for that, that little tablet that you're using, so we're not taking right now,","[50611, 1406, 428, 11, 880, 11, 2845, 329, 326, 11, 326, 1310, 14147, 326, 345, 821, 1262, 11, 523, 356, 821, 407, 2263, 826, 783, 11, 50875]",0.0,-0.18567998292016202,1.7153284671532847,0.0006137330201454461
307,307,221184,2222.08,2227.92," right? Yeah. So it's very inefficient, not taking, but I'm not, I'm just looking stuff up. But in most","[50875, 826, 30, 9425, 13, 1406, 340, 338, 845, 30904, 11, 407, 2263, 11, 475, 314, 1101, 407, 11, 314, 1101, 655, 2045, 3404, 510, 13, 887, 287, 749, 51167]",0.0,-0.18567998292016202,1.7153284671532847,0.0006137330201454461
308,308,221184,2227.92,2234.2400000000002," cases, I would be actually using the keyboard here right now. I just don't anticipate you have to","[51167, 2663, 11, 314, 561, 307, 1682, 1262, 262, 10586, 994, 826, 783, 13, 314, 655, 836, 470, 23794, 345, 423, 284, 51483]",0.0,-0.18567998292016202,1.7153284671532847,0.0006137330201454461
309,309,221184,2234.2400000000002,2239.2000000000003," calculate how much typing do you anticipate, if I anticipate quite a bit, then I'll just,","[51483, 15284, 703, 881, 19720, 466, 345, 23794, 11, 611, 314, 23794, 2407, 257, 1643, 11, 788, 314, 1183, 655, 11, 51731]",0.0,-0.18567998292016202,1.7153284671532847,0.0006137330201454461
310,310,223920,2239.2799999999997,2244.72," I have a keyboard keyboard with me. And same with it. I mean, the embarrassing,","[50367, 314, 423, 257, 10586, 10586, 351, 502, 13, 843, 976, 351, 340, 13, 314, 1612, 11, 262, 18997, 11, 50639]",0.0,-0.16917060185404656,1.654708520179372,0.0007987921126186848
311,311,223920,2245.68,2252.48," I've accepted being the weirdo that I am. But, you know, when I go on an airplane and I anticipate","[50687, 314, 1053, 6292, 852, 262, 7650, 78, 326, 314, 716, 13, 887, 11, 345, 760, 11, 618, 314, 467, 319, 281, 19401, 290, 314, 23794, 51027]",0.0,-0.16917060185404656,1.654708520179372,0.0007987921126186848
312,312,223920,2252.48,2259.7599999999998," to do programming or a lot of typing, I will have a laptop that will pull out a Kinesis keyboard,","[51027, 284, 466, 8300, 393, 257, 1256, 286, 19720, 11, 314, 481, 423, 257, 13224, 326, 481, 2834, 503, 257, 509, 1127, 271, 10586, 11, 51391]",0.0,-0.16917060185404656,1.654708520179372,0.0007987921126186848
313,313,223920,2259.7599999999998,2266.56," in addition to the laptop. And it's just who I am, you have to accept who you are. But also,","[51391, 287, 3090, 284, 262, 13224, 13, 843, 340, 338, 655, 508, 314, 716, 11, 345, 423, 284, 2453, 508, 345, 389, 13, 887, 635, 11, 51731]",0.0,-0.16917060185404656,1.654708520179372,0.0007987921126186848
314,314,226656,2266.56,2272.7999999999997," it's a, you know, for a lot of people, for me, certainly there's a comfort space where there's a","[50363, 340, 338, 257, 11, 345, 760, 11, 329, 257, 1256, 286, 661, 11, 329, 502, 11, 3729, 612, 338, 257, 4467, 2272, 810, 612, 338, 257, 50675]",0.0,-0.14835655689239502,1.6443514644351465,0.0019287519389763474
315,315,226656,2272.7999999999997,2281.12, certain kind of setups that are maximized productivity. And it's like some people have a warm blanket,"[50675, 1728, 1611, 286, 44266, 326, 389, 12991, 1143, 13714, 13, 843, 340, 338, 588, 617, 661, 423, 257, 5814, 18447, 51091]",0.0,-0.14835655689239502,1.6443514644351465,0.0019287519389763474
316,316,226656,2281.12,2287.92," that they like when they watch a movie. I like the Kinesis keyboard, it takes me to a place of focus.","[51091, 326, 484, 588, 618, 484, 2342, 257, 3807, 13, 314, 588, 262, 509, 1127, 271, 10586, 11, 340, 2753, 502, 284, 257, 1295, 286, 2962, 13, 51431]",0.0,-0.14835655689239502,1.6443514644351465,0.0019287519389763474
317,317,226656,2287.92,2294.72," And I still mostly, I'm trying to make sure I use the state of the art ideas for everything,","[51431, 843, 314, 991, 4632, 11, 314, 1101, 2111, 284, 787, 1654, 314, 779, 262, 1181, 286, 262, 1242, 4213, 329, 2279, 11, 51771]",0.0,-0.14835655689239502,1.6443514644351465,0.0019287519389763474
318,318,229472,2294.72,2299.12," but my comfort place, just like the Kinesis keyboard, is still e-max.","[50363, 475, 616, 4467, 1295, 11, 655, 588, 262, 509, 1127, 271, 10586, 11, 318, 991, 304, 12, 9806, 13, 50583]",0.0,-0.1418814977010091,1.5733333333333333,0.0007255895179696381
319,319,229472,2301.2,2309.9199999999996," So, I still use, I still, I mean, that's one of the debates I have with myself about everything","[50687, 1406, 11, 314, 991, 779, 11, 314, 991, 11, 314, 1612, 11, 326, 338, 530, 286, 262, 15389, 314, 423, 351, 3589, 546, 2279, 51123]",0.0,-0.1418814977010091,1.5733333333333333,0.0007255895179696381
320,320,229472,2309.9199999999996,2315.3599999999997," from a technology perspective, is how much to hold on to the tools you're comfortable with,","[51123, 422, 257, 3037, 6650, 11, 318, 703, 881, 284, 1745, 319, 284, 262, 4899, 345, 821, 6792, 351, 11, 51395]",0.0,-0.1418814977010091,1.5733333333333333,0.0007255895179696381
321,321,229472,2316.0,2322.48, versus how much to invest in using modern tools. And the signal that the communities provide you,"[51427, 9051, 703, 881, 284, 1325, 287, 1262, 3660, 4899, 13, 843, 262, 6737, 326, 262, 5348, 2148, 345, 51751]",0.0,-0.1418814977010091,1.5733333333333333,0.0007255895179696381
322,322,232248,2322.48,2328.16," with is the noisy one, because a lot of people year to year get excited about new tools,","[50363, 351, 318, 262, 31210, 530, 11, 780, 257, 1256, 286, 661, 614, 284, 614, 651, 6568, 546, 649, 4899, 11, 50647]",0.0,-0.12541914521978142,1.5924369747899159,0.0023992694914340973
323,323,232248,2328.16,2333.52, and you have to make a prediction. Are these tools defining a new generation or something,"[50647, 290, 345, 423, 284, 787, 257, 17724, 13, 4231, 777, 4899, 16215, 257, 649, 5270, 393, 1223, 50915]",0.0,-0.12541914521978142,1.5924369747899159,0.0023992694914340973
324,324,232248,2333.52,2340.0," that will transform programming, or is this just a fad that will pass? Certainly with JavaScript","[50915, 326, 481, 6121, 8300, 11, 393, 318, 428, 655, 257, 277, 324, 326, 481, 1208, 30, 23631, 351, 11933, 51239]",0.0,-0.12541914521978142,1.5924369747899159,0.0023992694914340973
325,325,232248,2340.0,2346.48," frameworks and front and the back end of the web, there's a lot of different styles that came and went.","[51239, 29251, 290, 2166, 290, 262, 736, 886, 286, 262, 3992, 11, 612, 338, 257, 1256, 286, 1180, 12186, 326, 1625, 290, 1816, 13, 51563]",0.0,-0.12541914521978142,1.5924369747899159,0.0023992694914340973
326,326,234648,2347.28,2352.56," I remember learning, what was it called? ActionScript. I remember for Flash,","[50403, 314, 3505, 4673, 11, 644, 373, 340, 1444, 30, 7561, 7391, 13, 314, 3505, 329, 9973, 11, 50667]",0.0,-0.2150348065847374,1.6699507389162562,0.056319188326597214
327,327,234648,2354.56,2360.2400000000002," learning how to program in Flash, learning how to design, do graphic animation, all that kind of","[50767, 4673, 703, 284, 1430, 287, 9973, 11, 4673, 703, 284, 1486, 11, 466, 13028, 11034, 11, 477, 326, 1611, 286, 51051]",0.0,-0.2150348065847374,1.6699507389162562,0.056319188326597214
328,328,234648,2360.2400000000002,2365.2," stuff with Flash, same with Java applets. I remember creating quite a lot of Java applets,","[51051, 3404, 351, 9973, 11, 976, 351, 7349, 598, 5289, 13, 314, 3505, 4441, 2407, 257, 1256, 286, 7349, 598, 5289, 11, 51299]",0.0,-0.2150348065847374,1.6699507389162562,0.056319188326597214
329,329,234648,2365.2,2369.28," thinking that this potentially defines the future of the web, and did not.","[51299, 3612, 326, 428, 6196, 15738, 262, 2003, 286, 262, 3992, 11, 290, 750, 407, 13, 51503]",0.0,-0.2150348065847374,1.6699507389162562,0.056319188326597214
330,330,236928,2369.36,2376.88," Well, you know, in most cases like that, the particular technology eventually gets replaced.","[50367, 3894, 11, 345, 760, 11, 287, 749, 2663, 588, 326, 11, 262, 1948, 3037, 4191, 3011, 6928, 13, 50743]",0.0,-0.14622927493736393,1.4619565217391304,0.0028652106411755085
331,331,236928,2378.0800000000004,2386.7200000000003, But many of the concepts that the technology introduced or made accessible first,"[50803, 887, 867, 286, 262, 10838, 326, 262, 3037, 5495, 393, 925, 9857, 717, 51235]",0.0,-0.14622927493736393,1.4619565217391304,0.0028652106411755085
332,332,236928,2388.2400000000002,2395.36," are preserved, of course, because yeah, we're not using Java applets anymore, but the notion of","[51311, 389, 17232, 11, 286, 1781, 11, 780, 10194, 11, 356, 821, 407, 1262, 7349, 598, 5289, 7471, 11, 475, 262, 9495, 286, 51667]",0.0,-0.14622927493736393,1.4619565217391304,0.0028652106411755085
333,333,239536,2395.36,2403.44, reactive web pages that sort of contain little bits of code that respond directly to,"[50363, 32242, 3992, 5468, 326, 3297, 286, 3994, 1310, 10340, 286, 2438, 326, 3031, 3264, 284, 50767]",0.0,-0.18173764433179582,1.5058823529411764,0.001965609611943364
334,334,239536,2404.88,2408.6400000000003," something you do, like pressing a button or a link or hovering even,","[50839, 1223, 345, 466, 11, 588, 12273, 257, 4936, 393, 257, 2792, 393, 33627, 772, 11, 51027]",0.0,-0.18173764433179582,1.5058823529411764,0.001965609611943364
335,335,239536,2410.1600000000003,2419.84," is certainly not gone away. And that those animations that were made painfully complicated with Flash,","[51103, 318, 3729, 407, 3750, 1497, 13, 843, 326, 883, 22407, 326, 547, 925, 32258, 8253, 351, 9973, 11, 51587]",0.0,-0.18173764433179582,1.5058823529411764,0.001965609611943364
336,336,241984,2420.8,2428.0," I mean, Flash was an innovation when it first came up, and when it was replaced by","[50411, 314, 1612, 11, 9973, 373, 281, 11044, 618, 340, 717, 1625, 510, 11, 290, 618, 340, 373, 6928, 416, 50771]",0.0,-0.13051337354323445,1.5363128491620113,0.000341176928486675
337,337,241984,2428.0,2436.32," JavaScript equivalent stuff, it was a somewhat better way to do animations, but those animations","[50771, 11933, 7548, 3404, 11, 340, 373, 257, 6454, 1365, 835, 284, 466, 22407, 11, 475, 883, 22407, 51187]",0.0,-0.13051337354323445,1.5363128491620113,0.000341176928486675
338,338,241984,2436.32,2445.36," are still there, not all of them. But sort of, again, there is an evolution and often, so often","[51187, 389, 991, 612, 11, 407, 477, 286, 606, 13, 887, 3297, 286, 11, 757, 11, 612, 318, 281, 6954, 290, 1690, 11, 523, 1690, 51639]",0.0,-0.13051337354323445,1.5363128491620113,0.000341176928486675
339,339,244536,2445.44,2452.0," with technology, that the sort of the technology that was eventually thrown away or replaced","[50367, 351, 3037, 11, 326, 262, 3297, 286, 262, 3037, 326, 373, 4191, 8754, 1497, 393, 6928, 50695]",0.0,-0.14246684917505237,1.565934065934066,0.0014716804726049304
340,340,244536,2452.88,2460.88," was still essential to sort of get started. There wouldn't be jet planes without propeller planes,","[50739, 373, 991, 6393, 284, 3297, 286, 651, 2067, 13, 1318, 3636, 470, 307, 12644, 13016, 1231, 44408, 6051, 13016, 11, 51139]",0.0,-0.14246684917505237,1.565934065934066,0.0014716804726049304
341,341,244536,2461.76,2469.44," I bet you. But from a user perspective, yes, from the feature set, yes, but I, from a program","[51183, 314, 731, 345, 13, 887, 422, 257, 2836, 6650, 11, 3763, 11, 422, 262, 3895, 900, 11, 3763, 11, 475, 314, 11, 422, 257, 1430, 51567]",0.0,-0.14246684917505237,1.565934065934066,0.0014716804726049304
342,342,246944,2469.52,2479.04," or perspective, it feels like all the time I've spent with ActionScript, all the time I spent with","[50367, 393, 6650, 11, 340, 5300, 588, 477, 262, 640, 314, 1053, 3377, 351, 7561, 7391, 11, 477, 262, 640, 314, 3377, 351, 50843]",0.0,-0.1919625159537438,1.6440677966101696,0.001684705843217671
343,343,246944,2479.04,2484.16," Java on the applet side for the GUI development, I, well, no, Java, I have to push back. That was","[50843, 7349, 319, 262, 598, 1616, 1735, 329, 262, 25757, 2478, 11, 314, 11, 880, 11, 645, 11, 7349, 11, 314, 423, 284, 4574, 736, 13, 1320, 373, 51099]",0.0,-0.1919625159537438,1.6440677966101696,0.001684705843217671
344,344,246944,2484.16,2490.08," useful, because it transfers, but the Flash doesn't transfer. So some things you learn and invest","[51099, 4465, 11, 780, 340, 16395, 11, 475, 262, 9973, 1595, 470, 4351, 13, 1406, 617, 1243, 345, 2193, 290, 1325, 51395]",0.0,-0.1919625159537438,1.6440677966101696,0.001684705843217671
345,345,246944,2490.08,2499.36," time in. Yeah, what you learned, this skill you picked up, learning ActionScript, was sort of","[51395, 640, 287, 13, 9425, 11, 644, 345, 4499, 11, 428, 5032, 345, 6497, 510, 11, 4673, 7561, 7391, 11, 373, 3297, 286, 51859]",0.0,-0.1919625159537438,1.6440677966101696,0.001684705843217671
346,346,249936,2499.36,2509.1200000000003, it was perhaps a super valuable skill at the time you picked it up. If you learned ActionScript,"[50363, 340, 373, 3737, 257, 2208, 8119, 5032, 379, 262, 640, 345, 6497, 340, 510, 13, 1002, 345, 4499, 7561, 7391, 50851]",0.0,-0.16349090355030005,1.4793814432989691,0.0006710729794576764
347,347,249936,2509.6800000000003,2519.2000000000003," early enough, but that skill is no longer in demand. Well, that's the calculation you have to make","[50879, 1903, 1576, 11, 475, 326, 5032, 318, 645, 2392, 287, 3512, 13, 3894, 11, 326, 338, 262, 17952, 345, 423, 284, 787, 51355]",0.0,-0.16349090355030005,1.4793814432989691,0.0006710729794576764
348,348,249936,2519.2000000000003,2523.2000000000003," when you're learning new things. Like today, people started learning programming. Today, I'm","[51355, 618, 345, 821, 4673, 649, 1243, 13, 4525, 1909, 11, 661, 2067, 4673, 8300, 13, 6288, 11, 314, 1101, 51555]",0.0,-0.16349090355030005,1.4793814432989691,0.0006710729794576764
349,349,252320,2523.7599999999998,2529.3599999999997," trying to see what are the new languages to try, what are the new systems to try,","[50391, 2111, 284, 766, 644, 389, 262, 649, 8950, 284, 1949, 11, 644, 389, 262, 649, 3341, 284, 1949, 11, 50671]",0.0,-0.14185393225286425,1.7417840375586855,0.00015806015289854258
350,350,252320,2530.16,2536.3999999999996," what are the new IDs to try to keep them moving. That's why we start when we're young, right?","[50711, 644, 389, 262, 649, 32373, 284, 1949, 284, 1394, 606, 3867, 13, 1320, 338, 1521, 356, 923, 618, 356, 821, 1862, 11, 826, 30, 51023]",0.0,-0.14185393225286425,1.7417840375586855,0.00015806015289854258
351,351,252320,2538.72,2544.0," But that seems very true to me that when you're young, you have your whole life ahead of you,","[51139, 887, 326, 2331, 845, 2081, 284, 502, 326, 618, 345, 821, 1862, 11, 345, 423, 534, 2187, 1204, 4058, 286, 345, 11, 51403]",0.0,-0.14185393225286425,1.7417840375586855,0.00015806015289854258
352,352,252320,2544.0,2552.72," and you're allowed to make mistakes. In fact, you should feel encouraged to do a bit of stupid stuff.","[51403, 290, 345, 821, 3142, 284, 787, 10135, 13, 554, 1109, 11, 345, 815, 1254, 10085, 284, 466, 257, 1643, 286, 8531, 3404, 13, 51839]",0.0,-0.14185393225286425,1.7417840375586855,0.00015806015289854258
353,353,255320,2553.3599999999997,2562.16," Try not to get yourself killed or seriously maimed, but try stuff that deviates from what everybody","[50371, 9993, 407, 284, 651, 3511, 2923, 393, 6411, 285, 1385, 276, 11, 475, 1949, 3404, 326, 1614, 32820, 422, 644, 7288, 50811]",0.0,-0.1796018017662896,1.7515527950310559,0.00033145377528853714
354,354,255320,2562.16,2570.08," else is doing. And like nine out of 10 times, you'll just learn why everybody else is not doing that,","[50811, 2073, 318, 1804, 13, 843, 588, 5193, 503, 286, 838, 1661, 11, 345, 1183, 655, 2193, 1521, 7288, 2073, 318, 407, 1804, 326, 11, 51207]",0.0,-0.1796018017662896,1.7515527950310559,0.00033145377528853714
355,355,255320,2570.64,2576.0," why everybody else is doing it so moderate. And one out of 10 times, you sort of","[51235, 1521, 7288, 2073, 318, 1804, 340, 523, 10768, 13, 843, 530, 503, 286, 838, 1661, 11, 345, 3297, 286, 51503]",0.0,-0.1796018017662896,1.7515527950310559,0.00033145377528853714
356,356,257600,2576.96,2583.12," discover something that's better or that that somehow works. I mean, there are all sorts of crazy","[50411, 7073, 1223, 326, 338, 1365, 393, 326, 326, 7599, 2499, 13, 314, 1612, 11, 612, 389, 477, 10524, 286, 7165, 50719]",0.0,-0.18220315081007937,1.589430894308943,0.0005371058359742165
357,357,257600,2583.12,2592.56," things that were invented by accident, by people trying stuff together. That's great advice to try,","[50719, 1243, 326, 547, 15646, 416, 5778, 11, 416, 661, 2111, 3404, 1978, 13, 1320, 338, 1049, 5608, 284, 1949, 11, 51191]",0.0,-0.18220315081007937,1.589430894308943,0.0005371058359742165
358,358,257600,2592.56,2597.44," read them stuff, make a lot of mistakes. Once you're married with kids, you're probably going to","[51191, 1100, 606, 3404, 11, 787, 257, 1256, 286, 10135, 13, 4874, 345, 821, 6405, 351, 3988, 11, 345, 821, 2192, 1016, 284, 51435]",0.0,-0.18220315081007937,1.589430894308943,0.0005371058359742165
359,359,257600,2598.0,2603.12, be a little more risk-averse because now there's more at stake. And you've already hopefully had,"[51463, 307, 257, 1310, 517, 2526, 12, 64, 4399, 780, 783, 612, 338, 517, 379, 10171, 13, 843, 345, 1053, 1541, 11481, 550, 51719]",0.0,-0.18220315081007937,1.589430894308943,0.0005371058359742165
360,360,260312,2603.7599999999998,2610.0, some time where you were experimenting with crazy shit. I like how marriage and kids solidifies,"[50395, 617, 640, 810, 345, 547, 27826, 351, 7165, 7510, 13, 314, 588, 703, 4845, 290, 3988, 4735, 6945, 50707]",0.0,-0.12825751560990528,1.5686274509803921,0.00036079317214898765
361,361,260312,2610.0,2615.44," their choice of programming language. How does that the Robert Frost poem with the road less taken,","[50707, 511, 3572, 286, 8300, 3303, 13, 1374, 857, 326, 262, 5199, 15122, 21247, 351, 262, 2975, 1342, 2077, 11, 50979]",0.0,-0.12825751560990528,1.5686274509803921,0.00036079317214898765
362,362,260312,2616.16,2621.8399999999997," which I think is misinterpreted by most people. But anyway, I feel like the choices you make early on,","[51015, 543, 314, 892, 318, 40882, 276, 416, 749, 661, 13, 887, 6949, 11, 314, 1254, 588, 262, 7747, 345, 787, 1903, 319, 11, 51299]",0.0,-0.12825751560990528,1.5686274509803921,0.00036079317214898765
363,363,260312,2622.7999999999997,2628.08," especially if you go all in, they're going to define the rest of your life's trajectory in a way that","[51347, 2592, 611, 345, 467, 477, 287, 11, 484, 821, 1016, 284, 8160, 262, 1334, 286, 534, 1204, 338, 22942, 287, 257, 835, 326, 51611]",0.0,-0.12825751560990528,1.5686274509803921,0.00036079317214898765
364,364,262808,2629.04,2636.88," like you basically are picking a camp. So, if you invest a lot in PHP, if you invest a lot in","[50411, 588, 345, 6209, 389, 10868, 257, 1413, 13, 1406, 11, 611, 345, 1325, 257, 1256, 287, 19599, 11, 611, 345, 1325, 257, 1256, 287, 50803]",0.0,-0.2211949920654297,1.6176470588235294,0.0003906887723132968
365,365,262808,2636.88,2646.4," .NET, if you invest a lot in JavaScript, you're going to stick there. That's your life journey.","[50803, 764, 12884, 11, 611, 345, 1325, 257, 1256, 287, 11933, 11, 345, 821, 1016, 284, 4859, 612, 13, 1320, 338, 534, 1204, 7002, 13, 51279]",0.0,-0.2211949920654297,1.6176470588235294,0.0003906887723132968
366,366,262808,2646.96,2653.36," It's very part of the journey. Well, only as far as that technology remains relevant.","[51307, 632, 338, 845, 636, 286, 262, 7002, 13, 3894, 11, 691, 355, 1290, 355, 326, 3037, 3793, 5981, 13, 51627]",0.0,-0.2211949920654297,1.6176470588235294,0.0003906887723132968
367,367,265336,2654.32,2664.96," Yes. I mean, if at age 16, you learn coding in C and by the time you're 26, C is like a dead","[50411, 3363, 13, 314, 1612, 11, 611, 379, 2479, 1467, 11, 345, 2193, 19617, 287, 327, 290, 416, 262, 640, 345, 821, 2608, 11, 327, 318, 588, 257, 2636, 50943]",0.0,-0.1230843904856089,1.435,0.00561884930357337
368,368,265336,2664.96,2674.96," language, then there's still time to switch. There's probably some kind of survivor bias or whatever","[50943, 3303, 11, 788, 612, 338, 991, 640, 284, 5078, 13, 1318, 338, 2192, 617, 1611, 286, 23446, 10690, 393, 4232, 51443]",0.0,-0.1230843904856089,1.435,0.00561884930357337
369,369,265336,2674.96,2682.7200000000003, it's called in sort of your observation that you pick a camp because there are many different,"[51443, 340, 338, 1444, 287, 3297, 286, 534, 13432, 326, 345, 2298, 257, 1413, 780, 612, 389, 867, 1180, 51831]",0.0,-0.1230843904856089,1.435,0.00561884930357337
370,370,268272,2682.72,2690.56," camps to pick. And if you pick .NET, then you can coast for the rest of your life because that","[50363, 11665, 284, 2298, 13, 843, 611, 345, 2298, 764, 12884, 11, 788, 345, 460, 7051, 329, 262, 1334, 286, 534, 1204, 780, 326, 50755]",0.0,-0.10715536469394721,1.5714285714285714,0.000663625483866781
371,371,268272,2690.56,2697.6," technology is now so ubiquitous, of course, that even if it's bound to die, it's going to take a","[50755, 3037, 318, 783, 523, 27888, 11, 286, 1781, 11, 326, 772, 611, 340, 338, 5421, 284, 4656, 11, 340, 338, 1016, 284, 1011, 257, 51107]",0.0,-0.10715536469394721,1.5714285714285714,0.000663625483866781
372,372,268272,2697.6,2706.16," very long time. Well, for me personally, I had a very difficult and in my own head, brave leap","[51107, 845, 890, 640, 13, 3894, 11, 329, 502, 7620, 11, 314, 550, 257, 845, 2408, 290, 287, 616, 898, 1182, 11, 14802, 16470, 51535]",0.0,-0.10715536469394721,1.5714285714285714,0.000663625483866781
373,373,268272,2706.16,2712.0," that I had to take relevant to our discussion, which is most of my life I programmed in C and C++.","[51535, 326, 314, 550, 284, 1011, 5981, 284, 674, 5114, 11, 543, 318, 749, 286, 616, 1204, 314, 27402, 287, 327, 290, 327, 4880, 13, 51827]",0.0,-0.10715536469394721,1.5714285714285714,0.000663625483866781
374,374,271272,2712.8799999999997,2720.56," And so having that hammer, everything looked like a nail. So I would literally even do scripting in","[50371, 843, 523, 1719, 326, 15554, 11, 2279, 3114, 588, 257, 17864, 13, 1406, 314, 561, 7360, 772, 466, 36883, 287, 50755]",0.0,-0.15454740325609842,1.598360655737705,0.0017773512518033385
375,375,271272,2720.56,2728.3999999999996, C++. Like I would create programs that do script-like things. And when I first came to Google and,"[50755, 327, 4880, 13, 4525, 314, 561, 2251, 4056, 326, 466, 4226, 12, 2339, 1243, 13, 843, 618, 314, 717, 1625, 284, 3012, 290, 51147]",0.0,-0.15454740325609842,1.598360655737705,0.0017773512518033385
376,376,271272,2728.3999999999996,2734.8799999999997," before then it became already, before TensorFlow, before all of that, there was a growing realization","[51147, 878, 788, 340, 2627, 1541, 11, 878, 309, 22854, 37535, 11, 878, 477, 286, 326, 11, 612, 373, 257, 3957, 23258, 51471]",0.0,-0.15454740325609842,1.598360655737705,0.0017773512518033385
377,377,271272,2734.8799999999997,2740.16, that C++ is not the right tool for machine learning. We could talk about why that is. It's,"[51471, 326, 327, 4880, 318, 407, 262, 826, 2891, 329, 4572, 4673, 13, 775, 714, 1561, 546, 1521, 326, 318, 13, 632, 338, 51735]",0.0,-0.15454740325609842,1.598360655737705,0.0017773512518033385
378,378,274016,2740.16,2746.16, unclear why that is. A lot of things has to do with community and culture and how it emerges,"[50363, 10061, 1521, 326, 318, 13, 317, 1256, 286, 1243, 468, 284, 466, 351, 2055, 290, 3968, 290, 703, 340, 25457, 50663]",0.0,-0.15186110208200854,1.5535714285714286,0.013703514821827412
379,379,274016,2746.16,2751.52," and stuff like that. But for me, they decided to take the leap to Python, like all out,","[50663, 290, 3404, 588, 326, 13, 887, 329, 502, 11, 484, 3066, 284, 1011, 262, 16470, 284, 11361, 11, 588, 477, 503, 11, 50931]",0.0,-0.15186110208200854,1.5535714285714286,0.013703514821827412
380,380,274016,2751.52,2758.56, basically switch completely from C++ except for highly performant robotics applications.,"[50931, 6209, 5078, 3190, 422, 327, 4880, 2845, 329, 4047, 1620, 415, 36359, 5479, 13, 51283]",0.0,-0.15186110208200854,1.5535714285714286,0.013703514821827412
381,381,274016,2758.56,2765.44, There's still a culture of C++ in this space of robotics. That was a big leap.,"[51283, 1318, 338, 991, 257, 3968, 286, 327, 4880, 287, 428, 2272, 286, 36359, 13, 1320, 373, 257, 1263, 16470, 13, 51627]",0.0,-0.15186110208200854,1.5535714285714286,0.013703514821827412
382,382,276544,2766.2400000000002,2773.28," Like I had to, you know, like people have like existential crises or midlife crises or whatever.","[50403, 4525, 314, 550, 284, 11, 345, 760, 11, 588, 661, 423, 588, 28954, 25712, 393, 3095, 6042, 25712, 393, 4232, 13, 50755]",0.0,-0.15469565273316438,1.755639097744361,0.012710677459836006
383,383,276544,2773.28,2780.7200000000003, You had to realize almost like walking away from a person you love. Because I was sure that C++,"[50755, 921, 550, 284, 6537, 2048, 588, 6155, 1497, 422, 257, 1048, 345, 1842, 13, 4362, 314, 373, 1654, 326, 327, 4880, 51127]",0.0,-0.15469565273316438,1.755639097744361,0.012710677459836006
384,384,276544,2780.7200000000003,2785.12," would have to be a lifelong companion. For a lot of problems, I would want to solve C++","[51127, 561, 423, 284, 307, 257, 25837, 15185, 13, 1114, 257, 1256, 286, 2761, 11, 314, 561, 765, 284, 8494, 327, 4880, 51347]",0.0,-0.15469565273316438,1.755639097744361,0.012710677459836006
385,385,276544,2785.12,2790.08," would be there. And it was a question to say, well, that might not be the case. Because C++","[51347, 561, 307, 612, 13, 843, 340, 373, 257, 1808, 284, 910, 11, 880, 11, 326, 1244, 407, 307, 262, 1339, 13, 4362, 327, 4880, 51595]",0.0,-0.15469565273316438,1.755639097744361,0.012710677459836006
386,386,276544,2790.08,2794.2400000000002," is still one of the most popular languages in the world, one of the most used, one of the most","[51595, 318, 991, 530, 286, 262, 749, 2968, 8950, 287, 262, 995, 11, 530, 286, 262, 749, 973, 11, 530, 286, 262, 749, 51803]",0.0,-0.15469565273316438,1.755639097744361,0.012710677459836006
387,387,279424,2794.3199999999997,2803.2," dependent on. It's also still evolving quite a bit. I mean, that is not a sort of","[50367, 10795, 319, 13, 632, 338, 635, 991, 21568, 2407, 257, 1643, 13, 314, 1612, 11, 326, 318, 407, 257, 3297, 286, 50811]",0.0,-0.14885191763600997,1.5545454545454545,0.0005666522774845362
388,388,279424,2803.9199999999996,2809.6," a fossilizing community. They are doing great innovative work, actually.","[50847, 257, 12584, 2890, 2055, 13, 1119, 389, 1804, 1049, 13097, 670, 11, 1682, 13, 51131]",0.0,-0.14885191763600997,1.5545454545454545,0.0005666522774845362
389,389,279424,2809.6,2815.04, A lot. But yet the sort of their innovations are hard to follow if you're not already a hardcore,"[51131, 317, 1256, 13, 887, 1865, 262, 3297, 286, 511, 25438, 389, 1327, 284, 1061, 611, 345, 821, 407, 1541, 257, 22823, 51403]",0.0,-0.14885191763600997,1.5545454545454545,0.0005666522774845362
390,390,279424,2815.04,2820.72," C++ user. Well, this was the thing. It pulls you in. It's a rabbit hole. I was a hardcore.","[51403, 327, 4880, 2836, 13, 3894, 11, 428, 373, 262, 1517, 13, 632, 16194, 345, 287, 13, 632, 338, 257, 22746, 7604, 13, 314, 373, 257, 22823, 13, 51687]",0.0,-0.14885191763600997,1.5545454545454545,0.0005666522774845362
391,391,282072,2820.7999999999997,2827.12," The all meta programming, template programming. I would start using the modern C++ as it developed.","[50367, 383, 477, 13634, 8300, 11, 11055, 8300, 13, 314, 561, 923, 1262, 262, 3660, 327, 4880, 355, 340, 4166, 13, 50683]",0.0,-0.19549332494321076,1.6218487394957983,0.031756870448589325
392,392,282072,2827.68,2833.2799999999997, Right? Not just the not just the shared pointer and the garbage collection. That makes it easier,"[50711, 6498, 30, 1892, 655, 262, 407, 655, 262, 4888, 17562, 290, 262, 15413, 4947, 13, 1320, 1838, 340, 4577, 50991]",0.0,-0.19549332494321076,1.6218487394957983,0.031756870448589325
393,393,282072,2833.2799999999997,2838.7999999999997," for you to work with some of the flaws. But the detail, like the meta programming, the crazy stuff","[50991, 329, 345, 284, 670, 351, 617, 286, 262, 17978, 13, 887, 262, 3703, 11, 588, 262, 13634, 8300, 11, 262, 7165, 3404, 51267]",0.0,-0.19549332494321076,1.6218487394957983,0.031756870448589325
394,394,282072,2838.7999999999997,2845.3599999999997," that's coming out there. But then you have to just empirically look and step back and say,","[51267, 326, 338, 2406, 503, 612, 13, 887, 788, 345, 423, 284, 655, 18097, 1146, 804, 290, 2239, 736, 290, 910, 11, 51595]",0.0,-0.19549332494321076,1.6218487394957983,0.031756870448589325
395,395,284536,2845.36,2853.76," what language am I more productive in? Sorry to say, what language do I enjoy my life with more?","[50363, 644, 3303, 716, 314, 517, 12973, 287, 30, 19061, 284, 910, 11, 644, 3303, 466, 314, 2883, 616, 1204, 351, 517, 30, 50783]",0.0,-0.12860477213956872,1.5263157894736843,0.029573917388916016
396,396,284536,2854.88,2859.92, And readability and able to think through and all that kind of stuff. Those questions are,"[50839, 843, 1100, 1799, 290, 1498, 284, 892, 832, 290, 477, 326, 1611, 286, 3404, 13, 5845, 2683, 389, 51091]",0.0,-0.12860477213956872,1.5263157894736843,0.029573917388916016
397,397,284536,2859.92,2867.76," harder to ask when you already have a loved one, which in my case was C++. And then there's Python","[51091, 7069, 284, 1265, 618, 345, 1541, 423, 257, 6151, 530, 11, 543, 287, 616, 1339, 373, 327, 4880, 13, 843, 788, 612, 338, 11361, 51483]",0.0,-0.12860477213956872,1.5263157894736843,0.029573917388916016
398,398,284536,2868.88,2874.8," like that meme, the grass is greener on the other side. Am I just infatuated with a new FAD","[51539, 588, 326, 25336, 11, 262, 8701, 318, 10536, 877, 319, 262, 584, 1735, 13, 1703, 314, 655, 1167, 265, 6605, 351, 257, 649, 376, 2885, 51835]",0.0,-0.12860477213956872,1.5263157894736843,0.029573917388916016
399,399,287536,2875.36,2880.1600000000003, new cool thing? Or is this actually going to make my life better? And I think a lot of people,"[50363, 649, 3608, 1517, 30, 1471, 318, 428, 1682, 1016, 284, 787, 616, 1204, 1365, 30, 843, 314, 892, 257, 1256, 286, 661, 50603]",0.0,-0.11480169373799146,1.631578947368421,0.0037168858107179403
400,400,287536,2880.1600000000003,2886.88," face that kind of decision. It was a difficult decision for me. When I made it, at this time,","[50603, 1986, 326, 1611, 286, 2551, 13, 632, 373, 257, 2408, 2551, 329, 502, 13, 1649, 314, 925, 340, 11, 379, 428, 640, 11, 50939]",0.0,-0.11480169373799146,1.631578947368421,0.0037168858107179403
401,401,287536,2886.88,2891.84," it's an obvious switch if you're into machine learning. But at that time, it wasn't quite yet.","[50939, 340, 338, 281, 3489, 5078, 611, 345, 821, 656, 4572, 4673, 13, 887, 379, 326, 640, 11, 340, 2492, 470, 2407, 1865, 13, 51187]",0.0,-0.11480169373799146,1.631578947368421,0.0037168858107179403
402,402,287536,2891.84,2896.6400000000003," So obvious. So it was a risk. And you know, you have the same kind of stuff with them.","[51187, 1406, 3489, 13, 1406, 340, 373, 257, 2526, 13, 843, 345, 760, 11, 345, 423, 262, 976, 1611, 286, 3404, 351, 606, 13, 51427]",0.0,-0.11480169373799146,1.631578947368421,0.0037168858107179403
403,403,287536,2897.52,2903.92," I still, because of my connection to WordPress, I still do a lot of backend programming in PHP.","[51471, 314, 991, 11, 780, 286, 616, 4637, 284, 22477, 11, 314, 991, 466, 257, 1256, 286, 30203, 8300, 287, 19599, 13, 51791]",0.0,-0.11480169373799146,1.631578947368421,0.0037168858107179403
404,404,290536,2906.1600000000003,2912.2400000000002," And the question is, you know, Node.js, Python, do you switch back into any of those","[50403, 843, 262, 1808, 318, 11, 345, 760, 11, 19081, 13, 8457, 11, 11361, 11, 466, 345, 5078, 736, 656, 597, 286, 883, 50707]",0.0,-0.19033298086612782,1.6820276497695852,0.00035931068123318255
405,405,290536,2913.36,2919.04," programming? There's the case for Node.js for me. Well, more and more and more of the front end,","[50763, 8300, 30, 1318, 338, 262, 1339, 329, 19081, 13, 8457, 329, 502, 13, 3894, 11, 517, 290, 517, 290, 517, 286, 262, 2166, 886, 11, 51047]",0.0,-0.19033298086612782,1.6820276497695852,0.00035931068123318255
406,406,290536,2919.04,2926.08, it runs in JavaScript. And fascinating cool stuff is done in JavaScript. Maybe use the same,"[51047, 340, 4539, 287, 11933, 13, 843, 13899, 3608, 3404, 318, 1760, 287, 11933, 13, 6674, 779, 262, 976, 51399]",0.0,-0.19033298086612782,1.6820276497695852,0.00035931068123318255
407,407,290536,2926.08,2931.6," programming language for the backend as well. The case for Python for the backend is, well,","[51399, 8300, 3303, 329, 262, 30203, 355, 880, 13, 383, 1339, 329, 11361, 329, 262, 30203, 318, 11, 880, 11, 51675]",0.0,-0.19033298086612782,1.6820276497695852,0.00035931068123318255
408,408,293160,2931.68,2938.16, you're doing so much programming outside of the web in Python. So maybe use Python for the backend.,"[50367, 345, 821, 1804, 523, 881, 8300, 2354, 286, 262, 3992, 287, 11361, 13, 1406, 3863, 779, 11361, 329, 262, 30203, 13, 50691]",0.0,-0.11780253609458169,1.625,0.0016237270319834352
409,409,293160,2938.72,2945.12," And then the case for PHP, well, most of the web still runs in PHP. You have a lot of experience","[50719, 843, 788, 262, 1339, 329, 19599, 11, 880, 11, 749, 286, 262, 3992, 991, 4539, 287, 19599, 13, 921, 423, 257, 1256, 286, 1998, 51039]",0.0,-0.11780253609458169,1.625,0.0016237270319834352
410,410,293160,2945.12,2952.3199999999997, with PHP. Why fix something that's not broken? Those are my own personal struggles. But I think,"[51039, 351, 19599, 13, 4162, 4259, 1223, 326, 338, 407, 5445, 30, 5845, 389, 616, 898, 2614, 12766, 13, 887, 314, 892, 51399]",0.0,-0.11780253609458169,1.625,0.0016237270319834352
411,411,293160,2952.3199999999997,2956.88, they reflect the struggles of a lot of people with different programming languages with different,"[51399, 484, 4079, 262, 12766, 286, 257, 1256, 286, 661, 351, 1180, 8300, 8950, 351, 1180, 51627]",0.0,-0.11780253609458169,1.625,0.0016237270319834352
412,412,295688,2956.88,2959.52, problems they're trying to solve. It's a weird one.,"[50363, 2761, 484, 821, 2111, 284, 8494, 13, 632, 338, 257, 7650, 530, 13, 50495]",0.0,-0.13162180415371008,1.6125461254612545,0.0021878762636333704
413,413,295688,2959.52,2965.92," And there's not a single answer, right? Because depending on how much time you have to learn new","[50495, 843, 612, 338, 407, 257, 2060, 3280, 11, 826, 30, 4362, 6906, 319, 703, 881, 640, 345, 423, 284, 2193, 649, 50815]",0.0,-0.13162180415371008,1.6125461254612545,0.0021878762636333704
414,414,295688,2965.92,2972.7200000000003," stuff, where you are in your life, what would you're currently working on, who you want to work with,","[50815, 3404, 11, 810, 345, 389, 287, 534, 1204, 11, 644, 561, 345, 821, 3058, 1762, 319, 11, 508, 345, 765, 284, 670, 351, 11, 51155]",0.0,-0.13162180415371008,1.6125461254612545,0.0021878762636333704
415,415,295688,2972.7200000000003,2979.28," what communities you like. There's not one right choice. Maybe if you if you sort of,","[51155, 644, 5348, 345, 588, 13, 1318, 338, 407, 530, 826, 3572, 13, 6674, 611, 345, 611, 345, 3297, 286, 11, 51483]",0.0,-0.13162180415371008,1.6125461254612545,0.0021878762636333704
416,416,295688,2980.56,2986.32," if you can look back 20 years, you can say, well, that whole detour through ActionScript was a waste","[51547, 611, 345, 460, 804, 736, 1160, 812, 11, 345, 460, 910, 11, 880, 11, 326, 2187, 1062, 454, 832, 7561, 7391, 373, 257, 7030, 51835]",0.0,-0.13162180415371008,1.6125461254612545,0.0021878762636333704
417,417,298632,2986.32,2994.56, of time. But nobody could know that. So you can't you can't beat yourself up over that.,"[50363, 286, 640, 13, 887, 8168, 714, 760, 326, 13, 1406, 345, 460, 470, 345, 460, 470, 4405, 3511, 510, 625, 326, 13, 50775]",0.0,-0.1286482810974121,1.5722222222222222,0.0007312159286811948
418,418,298632,2996.6400000000003,3003.28, You just need to accept that not every choice you make is going to be perfect. Maybe sort of,"[50879, 921, 655, 761, 284, 2453, 326, 407, 790, 3572, 345, 787, 318, 1016, 284, 307, 2818, 13, 6674, 3297, 286, 51211]",0.0,-0.1286482810974121,1.5722222222222222,0.0007312159286811948
419,419,298632,3004.1600000000003,3013.6800000000003, keep a plan B in the back of your mind. But don't don't overthink it. Don't don't try to sort of don't,"[51255, 1394, 257, 1410, 347, 287, 262, 736, 286, 534, 2000, 13, 887, 836, 470, 836, 470, 625, 14925, 340, 13, 2094, 470, 836, 470, 1949, 284, 3297, 286, 836, 470, 51731]",0.0,-0.1286482810974121,1.5722222222222222,0.0007312159286811948
420,420,301368,3014.3199999999997,3022.3199999999997," don't create a spreadsheet with like, we're trying to estimate, well, if I learn this language,","[50395, 836, 470, 2251, 257, 30117, 351, 588, 11, 356, 821, 2111, 284, 8636, 11, 880, 11, 611, 314, 2193, 428, 3303, 11, 50795]",0.0,-0.20575978004769102,1.774390243902439,0.00011100246047135442
421,421,301368,3022.3199999999997,3029.04," I expect to make X million dollars in a lifetime. And if I learn that language, I expect to make","[50795, 314, 1607, 284, 787, 1395, 1510, 5054, 287, 257, 10869, 13, 843, 611, 314, 2193, 326, 3303, 11, 314, 1607, 284, 787, 51131]",0.0,-0.20575978004769102,1.774390243902439,0.00011100246047135442
422,422,301368,3029.04,3036.08," Y million dollars in a lifetime, and which which is higher and what which has more risk. And where","[51131, 575, 1510, 5054, 287, 257, 10869, 11, 290, 543, 543, 318, 2440, 290, 644, 543, 468, 517, 2526, 13, 843, 810, 51483]",0.0,-0.20575978004769102,1.774390243902439,0.00011100246047135442
423,423,303608,3036.16,3039.2799999999997, is the chance that it's like picking picking a stock.,"[50367, 318, 262, 2863, 326, 340, 338, 588, 10868, 10868, 257, 4283, 13, 50523]",0.0,-0.14419601440429688,1.5671641791044777,0.0069794622249901295
424,424,303608,3042.24,3050.7999999999997," Kind of kind of, but I think with stocks, you can do diversifying your investment is good","[50671, 14927, 286, 1611, 286, 11, 475, 314, 892, 351, 14420, 11, 345, 460, 466, 15070, 4035, 534, 4896, 318, 922, 51099]",0.0,-0.14419601440429688,1.5671641791044777,0.0069794622249901295
425,425,303608,3051.6,3057.52," with productivity in life. Boy, that spreadsheet is possible to construct.","[51139, 351, 13714, 287, 1204, 13, 6387, 11, 326, 30117, 318, 1744, 284, 5678, 13, 51435]",0.0,-0.14419601440429688,1.5671641791044777,0.0069794622249901295
426,426,303608,3058.96,3063.92," Like, if you actually carefully analyze what your interests in life are, where you think you can","[51507, 4525, 11, 611, 345, 1682, 7773, 16602, 644, 534, 5353, 287, 1204, 389, 11, 810, 345, 892, 345, 460, 51755]",0.0,-0.14419601440429688,1.5671641791044777,0.0069794622249901295
427,427,306392,3064.0,3070.4," maximally impact the world, there really is better and worse choices for programming language.","[50367, 12991, 453, 2928, 262, 995, 11, 612, 1107, 318, 1365, 290, 4785, 7747, 329, 8300, 3303, 13, 50687]",0.0,-0.11009298960367839,1.7462686567164178,0.0004429726395756006
428,428,306392,3070.4,3075.12," They're not just about the syntax, but about the community, about where you predict the","[50687, 1119, 821, 407, 655, 546, 262, 15582, 11, 475, 546, 262, 2055, 11, 546, 810, 345, 4331, 262, 50923]",0.0,-0.11009298960367839,1.7462686567164178,0.0004429726395756006
429,429,306392,3075.12,3081.6800000000003," community's headed, what large systems are programmed in that. But can you create that spreadsheet?","[50923, 2055, 338, 9153, 11, 644, 1588, 3341, 389, 27402, 287, 326, 13, 887, 460, 345, 2251, 326, 30117, 30, 51251]",0.0,-0.11009298960367839,1.7462686567164178,0.0004429726395756006
430,430,306392,3081.6800000000003,3087.12," Because that's sort of, you're mentioning a whole bunch of inputs that go into that spreadsheet,","[51251, 4362, 326, 338, 3297, 286, 11, 345, 821, 20862, 257, 2187, 7684, 286, 17311, 326, 467, 656, 326, 30117, 11, 51523]",0.0,-0.11009298960367839,1.7462686567164178,0.0004429726395756006
431,431,306392,3087.12,3092.8," where you have to estimate things that are very hard to measure and even harder. I mean,","[51523, 810, 345, 423, 284, 8636, 1243, 326, 389, 845, 1327, 284, 3953, 290, 772, 7069, 13, 314, 1612, 11, 51807]",0.0,-0.11009298960367839,1.7462686567164178,0.0004429726395756006
432,432,309280,3093.2000000000003,3098.0800000000004," they're hard to measure retroactively, and they're even harder to predict. Like,","[50383, 484, 821, 1327, 284, 3953, 12175, 33329, 11, 290, 484, 821, 772, 7069, 284, 4331, 13, 4525, 11, 50627]",0.0,-0.14811748616835652,1.6790123456790123,0.00018110533710569143
433,433,309280,3098.8,3106.0800000000004," what is the better community? Well, better is one of those incredibly difficult words.","[50663, 644, 318, 262, 1365, 2055, 30, 3894, 11, 1365, 318, 530, 286, 883, 8131, 2408, 2456, 13, 51027]",0.0,-0.14811748616835652,1.6790123456790123,0.00018110533710569143
434,434,309280,3106.0800000000004,3108.96, So what's better for you is not better for someone else.,"[51027, 1406, 644, 338, 1365, 329, 345, 318, 407, 1365, 329, 2130, 2073, 13, 51171]",0.0,-0.14811748616835652,1.6790123456790123,0.00018110533710569143
435,435,309280,3108.96,3113.92," No, but we're not doing a public speech about what's better. We're doing a personal spiritual","[51171, 1400, 11, 475, 356, 821, 407, 1804, 257, 1171, 4046, 546, 644, 338, 1365, 13, 775, 821, 1804, 257, 2614, 8557, 51419]",0.0,-0.14811748616835652,1.6790123456790123,0.00018110533710569143
436,436,309280,3113.92,3120.4," journey. I can determine a circle of friends, circle one and circle two, and I can have a","[51419, 7002, 13, 314, 460, 5004, 257, 9197, 286, 2460, 11, 9197, 530, 290, 9197, 734, 11, 290, 314, 460, 423, 257, 51743]",0.0,-0.14811748616835652,1.6790123456790123,0.00018110533710569143
437,437,312040,3120.4,3126.32," bunch of parties with one and a bunch of parties with two, and then write down or take a mental","[50363, 7684, 286, 4671, 351, 530, 290, 257, 7684, 286, 4671, 351, 734, 11, 290, 788, 3551, 866, 393, 1011, 257, 5110, 50659]",0.0,-0.12031700197330192,1.7715355805243447,0.000895593489985913
438,438,312040,3126.32,3132.4," note of what made me happier. And that, you know, you have, if you're a machine learning person,","[50659, 3465, 286, 644, 925, 502, 23030, 13, 843, 326, 11, 345, 760, 11, 345, 423, 11, 611, 345, 821, 257, 4572, 4673, 1048, 11, 50963]",0.0,-0.12031700197330192,1.7715355805243447,0.000895593489985913
439,439,312040,3132.4,3138.2400000000002," you want to say, okay, I want to build a large company that does, that is grounded in machine","[50963, 345, 765, 284, 910, 11, 8788, 11, 314, 765, 284, 1382, 257, 1588, 1664, 326, 857, 11, 326, 318, 22804, 287, 4572, 51255]",0.0,-0.12031700197330192,1.7715355805243447,0.000895593489985913
440,440,312040,3138.2400000000002,3144.2400000000002," learning, but also has a sex interface that has a large impact in the world. What languages do I","[51255, 4673, 11, 475, 635, 468, 257, 1714, 7071, 326, 468, 257, 1588, 2928, 287, 262, 995, 13, 1867, 8950, 466, 314, 51555]",0.0,-0.12031700197330192,1.7715355805243447,0.000895593489985913
441,441,312040,3144.2400000000002,3149.12," use? You look at what Facebook is using, you look what Twitter is using, then you look at","[51555, 779, 30, 921, 804, 379, 644, 3203, 318, 1262, 11, 345, 804, 644, 3009, 318, 1262, 11, 788, 345, 804, 379, 51799]",0.0,-0.12031700197330192,1.7715355805243447,0.000895593489985913
442,442,314912,3149.12,3155.7599999999998," performance more newer languages like Rust, or you look at languages that have taken","[50363, 2854, 517, 15064, 8950, 588, 17103, 11, 393, 345, 804, 379, 8950, 326, 423, 2077, 50695]",0.0,-0.16695671081542968,1.7624521072796935,0.00025923436623997986
443,443,314912,3155.7599999999998,3160.48," that most the community uses in machine learning space, that's Python. And you can like think","[50695, 326, 749, 262, 2055, 3544, 287, 4572, 4673, 2272, 11, 326, 338, 11361, 13, 843, 345, 460, 588, 892, 50931]",0.0,-0.16695671081542968,1.7624521072796935,0.00025923436623997986
444,444,314912,3160.48,3166.64," through, you can hang out and think through it. And it's always a invest in the level of activity","[50931, 832, 11, 345, 460, 8181, 503, 290, 892, 832, 340, 13, 843, 340, 338, 1464, 257, 1325, 287, 262, 1241, 286, 3842, 51239]",0.0,-0.16695671081542968,1.7624521072796935,0.00025923436623997986
445,445,314912,3166.64,3170.88," of the community is also really interesting. Like you said, C plus Boston Python as super active","[51239, 286, 262, 2055, 318, 635, 1107, 3499, 13, 4525, 345, 531, 11, 327, 5556, 6182, 11361, 355, 2208, 4075, 51451]",0.0,-0.16695671081542968,1.7624521072796935,0.00025923436623997986
446,446,314912,3171.6,3176.56, in terms of the development of the language itself. But do you think that you can make,"[51487, 287, 2846, 286, 262, 2478, 286, 262, 3303, 2346, 13, 887, 466, 345, 892, 326, 345, 460, 787, 51735]",0.0,-0.16695671081542968,1.7624521072796935,0.00025923436623997986
447,447,317656,3177.52,3183.6," objective choices there? No, no, no. But there's a gut you build up, like, don't you,","[50411, 9432, 7747, 612, 30, 1400, 11, 645, 11, 645, 13, 887, 612, 338, 257, 12500, 345, 1382, 510, 11, 588, 11, 836, 470, 345, 11, 50715]",0.0,-0.11525752593059929,1.6391304347826088,0.0002615430857986212
448,448,317656,3183.6,3188.64," don't you believe in that gut feeling of everything is very subjective. And yes, you most certainly","[50715, 836, 470, 345, 1975, 287, 326, 12500, 4203, 286, 2279, 318, 845, 19088, 13, 843, 3763, 11, 345, 749, 3729, 50967]",0.0,-0.11525752593059929,1.6391304347826088,0.0002615430857986212
449,449,317656,3188.64,3194.0, can have a gut feeling and your gut can also be wrong. That's why there are billions of people,"[50967, 460, 423, 257, 12500, 4203, 290, 534, 12500, 460, 635, 307, 2642, 13, 1320, 338, 1521, 612, 389, 13188, 286, 661, 51235]",0.0,-0.11525752593059929,1.6391304347826088,0.0002615430857986212
450,450,317656,3194.0,3200.32," because they're not all right. I mean, clearly, there are more people living in the Bay area who","[51235, 780, 484, 821, 407, 477, 826, 13, 314, 1612, 11, 4084, 11, 612, 389, 517, 661, 2877, 287, 262, 4696, 1989, 508, 51551]",0.0,-0.11525752593059929,1.6391304347826088,0.0002615430857986212
451,451,320032,3200.4,3206.8," have plans to sort of create a Google sized company, then there's room in the world for Google","[50367, 423, 3352, 284, 3297, 286, 2251, 257, 3012, 19943, 1664, 11, 788, 612, 338, 2119, 287, 262, 995, 329, 3012, 50687]",0.0,-0.14177975287804237,1.6975806451612903,0.0007976096239872277
452,452,320032,3206.8,3212.56, sized companies. And they're going to have to duke it out in the market space.,"[50687, 19943, 2706, 13, 843, 484, 821, 1016, 284, 423, 284, 288, 4649, 340, 503, 287, 262, 1910, 2272, 13, 50975]",0.0,-0.14177975287804237,1.6975806451612903,0.0007976096239872277
453,453,320032,3213.1200000000003,3218.0800000000004," And there's many more choices than just the programming language. Speaking of which,","[51003, 843, 612, 338, 867, 517, 7747, 621, 655, 262, 8300, 3303, 13, 21393, 286, 543, 11, 51251]",0.0,-0.14177975287804237,1.6975806451612903,0.0007976096239872277
454,454,320032,3218.0800000000004,3222.48," let's go back to the boat with the fisherman who's tuned out long ago,","[51251, 1309, 338, 467, 736, 284, 262, 8848, 351, 262, 48750, 508, 338, 16524, 503, 890, 2084, 11, 51471]",0.0,-0.14177975287804237,1.6975806451612903,0.0007976096239872277
455,455,320032,3223.2000000000003,3228.56," talk to the programmer, let's jump around and go back to see Python that we tried to define","[51507, 1561, 284, 262, 24292, 11, 1309, 338, 4391, 1088, 290, 467, 736, 284, 766, 11361, 326, 356, 3088, 284, 8160, 51775]",0.0,-0.14177975287804237,1.6975806451612903,0.0007976096239872277
456,456,322856,3228.56,3233.2, as the reference implementation. And one of the big things that's coming out in three,"[50363, 355, 262, 4941, 7822, 13, 843, 530, 286, 262, 1263, 1243, 326, 338, 2406, 503, 287, 1115, 50595]",0.0,-0.276029109954834,1.6801470588235294,0.0021047648042440414
457,457,322856,3233.2,3238.72," out 11 was right. We tend to say three dot 11, because it really was like, we went three","[50595, 503, 1367, 373, 826, 13, 775, 4327, 284, 910, 1115, 16605, 1367, 11, 780, 340, 1107, 373, 588, 11, 356, 1816, 1115, 50871]",0.0,-0.276029109954834,1.6801470588235294,0.0021047648042440414
458,458,322856,3238.72,3243.7599999999998, to eight three to nine three to ten three to eleven and we're planning to go up to three dot,"[50871, 284, 3624, 1115, 284, 5193, 1115, 284, 3478, 1115, 284, 22216, 290, 356, 821, 5410, 284, 467, 510, 284, 1115, 16605, 51123]",0.0,-0.276029109954834,1.6801470588235294,0.0021047648042440414
459,459,322856,3243.7599999999998,3250.0, ninety nine. 99. What happens after 99? Probably just three to one hundred. One of them in,"[51123, 37989, 5193, 13, 7388, 13, 1867, 4325, 706, 7388, 30, 18578, 655, 1115, 284, 530, 3470, 13, 1881, 286, 606, 287, 51435]",0.0,-0.276029109954834,1.6801470588235294,0.0021047648042440414
460,460,322856,3250.0,3256.24," it there. Okay. And go all the way to 420. I got it forever Python V three. We'll talk about four,","[51435, 340, 612, 13, 16805, 13, 843, 467, 477, 262, 835, 284, 28262, 13, 314, 1392, 340, 8097, 11361, 569, 1115, 13, 775, 1183, 1561, 546, 1440, 11, 51747]",0.0,-0.276029109954834,1.6801470588235294,0.0021047648042440414
461,461,325624,3256.72,3264.64, but more for fun. So three dot eleven is coming out. One of the big sexy things in it is it'll be,"[50387, 475, 517, 329, 1257, 13, 1406, 1115, 16605, 22216, 318, 2406, 503, 13, 1881, 286, 262, 1263, 17144, 1243, 287, 340, 318, 340, 1183, 307, 50783]",0.0,-0.12182369232177734,1.5654450261780104,0.0005526345339603722
462,462,325624,3264.64,3272.3199999999997, much faster. So how did you beyond hiring a great team or working with a great team make it faster?,"[50783, 881, 5443, 13, 1406, 703, 750, 345, 3675, 12965, 257, 1049, 1074, 393, 1762, 351, 257, 1049, 1074, 787, 340, 5443, 30, 51167]",0.0,-0.12182369232177734,1.5654450261780104,0.0005526345339603722
463,463,325624,3272.3199999999997,3282.0, What are some ideas that make it faster? It has to do with simplicity of software versus performance.,"[51167, 1867, 389, 617, 4213, 326, 787, 340, 5443, 30, 632, 468, 284, 466, 351, 21654, 286, 3788, 9051, 2854, 13, 51651]",0.0,-0.12182369232177734,1.5654450261780104,0.0005526345339603722
464,464,328200,3282.96,3290.72," And so even though C is known to be a low level language, which is great for writing sort of","[50411, 843, 523, 772, 996, 327, 318, 1900, 284, 307, 257, 1877, 1241, 3303, 11, 543, 318, 1049, 329, 3597, 3297, 286, 50799]",0.0,-0.12196898056288898,1.4114285714285715,0.0004308934148866683
465,465,328200,3291.6,3299.28," a high performance language interpreter, when I originally started Python or C Python,","[50843, 257, 1029, 2854, 3303, 28846, 11, 618, 314, 6198, 2067, 11361, 393, 327, 11361, 11, 51227]",0.0,-0.12196898056288898,1.4114285714285715,0.0004308934148866683
466,466,328200,3300.16,3307.76, I didn't expect there would be great success and fame in my future.,"[51271, 314, 1422, 470, 1607, 612, 561, 307, 1049, 1943, 290, 16117, 287, 616, 2003, 13, 51651]",0.0,-0.12196898056288898,1.4114285714285715,0.0004308934148866683
467,467,330776,3308.7200000000003,3323.76, So I try to get something working and useful in about three months. And so I sort of I cut corners.,"[50411, 1406, 314, 1949, 284, 651, 1223, 1762, 290, 4465, 287, 546, 1115, 1933, 13, 843, 523, 314, 3297, 286, 314, 2005, 14371, 13, 51163]",0.0,-0.22044567439867102,1.3840579710144927,0.0007698367116972804
468,468,330776,3325.6000000000004,3331.84, I borrowed ideas left and right when it comes to language design as well as implementation.,"[51255, 314, 22546, 4213, 1364, 290, 826, 618, 340, 2058, 284, 3303, 1486, 355, 880, 355, 7822, 13, 51567]",0.0,-0.22044567439867102,1.3840579710144927,0.0007698367116972804
469,469,333184,3332.8,3338.8, I also wrote much of the code as simple as it could be. And,"[50411, 314, 635, 2630, 881, 286, 262, 2438, 355, 2829, 355, 340, 714, 307, 13, 843, 50711]",0.0,-0.13241963159470332,1.5272727272727273,0.0012268093414604664
470,470,333184,3342.56,3350.8, there are many things that you can code more efficiently by adding more code. It's a bit of a,"[50899, 612, 389, 867, 1243, 326, 345, 460, 2438, 517, 18306, 416, 4375, 517, 2438, 13, 632, 338, 257, 1643, 286, 257, 51311]",0.0,-0.13241963159470332,1.5272727272727273,0.0012268093414604664
471,471,333184,3350.8,3360.8, sort of a time space trade off where you can compute a certain thing from a small number of inputs,"[51311, 3297, 286, 257, 640, 2272, 3292, 572, 810, 345, 460, 24061, 257, 1728, 1517, 422, 257, 1402, 1271, 286, 17311, 51811]",0.0,-0.13241963159470332,1.5272727272727273,0.0012268093414604664
472,472,336184,3362.8,3369.04," and every time you get presented with a new input, you do the whole computation from the top.","[50411, 290, 790, 640, 345, 651, 5545, 351, 257, 649, 5128, 11, 345, 466, 262, 2187, 29964, 422, 262, 1353, 13, 50723]",0.0,-0.12213552699369543,1.5561797752808988,0.00011195195111213252
473,473,336184,3370.32,3376.6400000000003, That can be simple looking code. It's easy to understand. It's easy to reason about that you can,"[50787, 1320, 460, 307, 2829, 2045, 2438, 13, 632, 338, 2562, 284, 1833, 13, 632, 338, 2562, 284, 1738, 546, 326, 345, 460, 51103]",0.0,-0.12213552699369543,1.5561797752808988,0.00011195195111213252
474,474,336184,3376.6400000000003,3382.08," tell quickly that it's correct, at least in the sort of mathematical sense of correct.","[51103, 1560, 2952, 326, 340, 338, 3376, 11, 379, 1551, 287, 262, 3297, 286, 18069, 2565, 286, 3376, 13, 51375]",0.0,-0.12213552699369543,1.5561797752808988,0.00011195195111213252
475,475,338208,3382.88,3392.7999999999997," Because it's implemented in C, maybe it performs relatively well. But over time as sort of","[50403, 4362, 340, 338, 9177, 287, 327, 11, 3863, 340, 17706, 5365, 880, 13, 887, 625, 640, 355, 3297, 286, 50899]",0.0,-0.2988822301228841,1.3695652173913044,0.0007139163208194077
476,476,338208,3394.0,3402.7999999999997," as the requirements for that code and the need for performance go up, you might be able to rewrite","[50959, 355, 262, 5359, 329, 326, 2438, 290, 262, 761, 329, 2854, 467, 510, 11, 345, 1244, 307, 1498, 284, 28183, 51399]",0.0,-0.2988822301228841,1.3695652173913044,0.0007139163208194077
477,477,340280,3403.76,3412.8," that same algorithm using more memory, maybe remember previous results so you don't have to","[50411, 326, 976, 11862, 1262, 517, 4088, 11, 3863, 3505, 2180, 2482, 523, 345, 836, 470, 423, 284, 50863]",0.0,-0.1767402273235899,1.5307262569832403,0.0016360320150852203
478,478,340280,3412.8,3418.5600000000004, recompute everything from scratch. Like the classic example is computing prime numbers.,"[50863, 48765, 1133, 2279, 422, 12692, 13, 4525, 262, 6833, 1672, 318, 14492, 6994, 3146, 13, 51151]",0.0,-0.1767402273235899,1.5307262569832403,0.0016360320150852203
479,479,340280,3419.36,3427.52," Like is 10 a prime number? Well, you sort of is it divisible by two? Is it divisible by three?","[51191, 4525, 318, 838, 257, 6994, 1271, 30, 3894, 11, 345, 3297, 286, 318, 340, 2659, 12843, 416, 734, 30, 1148, 340, 2659, 12843, 416, 1115, 30, 51599]",0.0,-0.1767402273235899,1.5307262569832403,0.0016360320150852203
480,480,342752,3427.6,3434.8," Is it divisible by four? And we go all the way to is a divisible by nine? And it is not, well,","[50367, 1148, 340, 2659, 12843, 416, 1440, 30, 843, 356, 467, 477, 262, 835, 284, 318, 257, 2659, 12843, 416, 5193, 30, 843, 340, 318, 407, 11, 880, 11, 50727]",0.0,-0.1536790459556917,1.7066666666666668,0.004555188585072756
481,481,342752,3434.8,3441.44," actually, 10 is divisible by two, so there we stop, but say 11 is divisible by 10. The answer is","[50727, 1682, 11, 838, 318, 2659, 12843, 416, 734, 11, 523, 612, 356, 2245, 11, 475, 910, 1367, 318, 2659, 12843, 416, 838, 13, 383, 3280, 318, 51059]",0.0,-0.1536790459556917,1.7066666666666668,0.004555188585072756
482,482,342752,3441.44,3448.4," nine is no 10 times in a row. So now we know 11 is a prime number. On the other hand, if we already","[51059, 5193, 318, 645, 838, 1661, 287, 257, 5752, 13, 1406, 783, 356, 760, 1367, 318, 257, 6994, 1271, 13, 1550, 262, 584, 1021, 11, 611, 356, 1541, 51407]",0.0,-0.1536790459556917,1.7066666666666668,0.004555188585072756
483,483,342752,3448.4,3453.68," know that two, three, five, and seven are prime numbers. And you know a little bit about the","[51407, 760, 326, 734, 11, 1115, 11, 1936, 11, 290, 3598, 389, 6994, 3146, 13, 843, 345, 760, 257, 1310, 1643, 546, 262, 51671]",0.0,-0.1536790459556917,1.7066666666666668,0.004555188585072756
484,484,345368,3453.68,3460.48, mathematics of how prime numbers work. You know that if you have a rough estimate for the square,"[50363, 19473, 286, 703, 6994, 3146, 670, 13, 921, 760, 326, 611, 345, 423, 257, 5210, 8636, 329, 262, 6616, 50703]",0.0,-0.1148433594476609,1.8009478672985781,0.0016968577401712537
485,485,345368,3460.48,3467.68," root of 11, you don't actually have to check is it divisible by four? Or is it divisible by five?","[50703, 6808, 286, 1367, 11, 345, 836, 470, 1682, 423, 284, 2198, 318, 340, 2659, 12843, 416, 1440, 30, 1471, 318, 340, 2659, 12843, 416, 1936, 30, 51063]",0.0,-0.1148433594476609,1.8009478672985781,0.0016968577401712537
486,486,345368,3467.68,3472.56, You'll all you have to check in the case of 11 is is it divisible by two? Is it divisible by three?,"[51063, 921, 1183, 477, 345, 423, 284, 2198, 287, 262, 1339, 286, 1367, 318, 318, 340, 2659, 12843, 416, 734, 30, 1148, 340, 2659, 12843, 416, 1115, 30, 51307]",0.0,-0.1148433594476609,1.8009478672985781,0.0016968577401712537
487,487,345368,3473.6,3480.72," Because take 12. If it's divisible by four, well, 12 divided by four is three. So you","[51359, 4362, 1011, 1105, 13, 1002, 340, 338, 2659, 12843, 416, 1440, 11, 880, 11, 1105, 9086, 416, 1440, 318, 1115, 13, 1406, 345, 51715]",0.0,-0.1148433594476609,1.8009478672985781,0.0016968577401712537
488,488,348072,3481.04,3486.3199999999997, should have come across the question is the divisible by three first. So if you know,"[50379, 815, 423, 1282, 1973, 262, 1808, 318, 262, 2659, 12843, 416, 1115, 717, 13, 1406, 611, 345, 760, 50643]",0.0,-0.16259215672810873,1.6635514018691588,0.0004774387925863266
489,489,348072,3486.8799999999997,3493.2," basically nothing about prime numbers except the definition, maybe you go for x from two","[50671, 6209, 2147, 546, 6994, 3146, 2845, 262, 6770, 11, 3863, 345, 467, 329, 2124, 422, 734, 50987]",0.0,-0.16259215672810873,1.6635514018691588,0.0004774387925863266
490,490,348072,3494.24,3503.52," through n minus one is and divisible by x. And then at the end, if you got all nodes","[51039, 832, 299, 20208, 530, 318, 290, 2659, 12843, 416, 2124, 13, 843, 788, 379, 262, 886, 11, 611, 345, 1392, 477, 13760, 51503]",0.0,-0.16259215672810873,1.6635514018691588,0.0004774387925863266
491,491,348072,3504.48,3510.16," for every single one of those questions, you know, oh, it must be a prime number. Well, the first","[51551, 329, 790, 2060, 530, 286, 883, 2683, 11, 345, 760, 11, 11752, 11, 340, 1276, 307, 257, 6994, 1271, 13, 3894, 11, 262, 717, 51835]",0.0,-0.16259215672810873,1.6635514018691588,0.0004774387925863266
492,492,351016,3510.16,3516.96, thing is you can stop iterating when you find a yes answer. And the second is you can also stop,"[50363, 1517, 318, 345, 460, 2245, 11629, 803, 618, 345, 1064, 257, 3763, 3280, 13, 843, 262, 1218, 318, 345, 460, 635, 2245, 50703]",0.0,-0.11090301007640604,1.8019323671497585,0.00025484187062829733
493,493,351016,3516.96,3525.3599999999997," iterating when you have reached the square root of n, because you know that if it has a divisor","[50703, 11629, 803, 618, 345, 423, 4251, 262, 6616, 6808, 286, 299, 11, 780, 345, 760, 326, 611, 340, 468, 257, 2659, 271, 273, 51123]",0.0,-0.11090301007640604,1.8019323671497585,0.00025484187062829733
494,494,351016,3525.3599999999997,3530.3999999999996," larger than than the square root, it must also have a divisor smaller than the square root.","[51123, 4025, 621, 621, 262, 6616, 6808, 11, 340, 1276, 635, 423, 257, 2659, 271, 273, 4833, 621, 262, 6616, 6808, 13, 51375]",0.0,-0.11090301007640604,1.8019323671497585,0.00025484187062829733
495,495,351016,3531.52,3536.7999999999997," Then you say, oh, except for two, we don't need to bother with checking for even numbers,","[51431, 3244, 345, 910, 11, 11752, 11, 2845, 329, 734, 11, 356, 836, 470, 761, 284, 11393, 351, 10627, 329, 772, 3146, 11, 51695]",0.0,-0.11090301007640604,1.8019323671497585,0.00025484187062829733
496,496,353680,3536.8,3543.2000000000003," because all even numbers are divisible by two. So if it's divisible by four, we would already","[50363, 780, 477, 772, 3146, 389, 2659, 12843, 416, 734, 13, 1406, 611, 340, 338, 2659, 12843, 416, 1440, 11, 356, 561, 1541, 50683]",0.0,-0.13204821360479926,1.6990740740740742,0.0018060472793877125
497,497,353680,3543.2000000000003,3548.4, have come across the question is a divisible by two. And so now you go special case check,"[50683, 423, 1282, 1973, 262, 1808, 318, 257, 2659, 12843, 416, 734, 13, 843, 523, 783, 345, 467, 2041, 1339, 2198, 50943]",0.0,-0.13204821360479926,1.6990740740740742,0.0018060472793877125
498,498,353680,3548.4,3555.52," is a divisible by two, and then you just check three, five, seven, 11. And so now you've sort","[50943, 318, 257, 2659, 12843, 416, 734, 11, 290, 788, 345, 655, 2198, 1115, 11, 1936, 11, 3598, 11, 1367, 13, 843, 523, 783, 345, 1053, 3297, 51299]",0.0,-0.13204821360479926,1.6990740740740742,0.0018060472793877125
499,499,353680,3555.52,3561.52, of reduced your search base by 50% again by skipping all the even numbers except for two.,"[51299, 286, 5322, 534, 2989, 2779, 416, 2026, 4, 757, 416, 31017, 477, 262, 772, 3146, 2845, 329, 734, 13, 51599]",0.0,-0.13204821360479926,1.6990740740740742,0.0018060472793877125
500,500,356152,3562.48,3568.64," If you think a bit more about it, or you just read in your book about the history of math,","[50411, 1002, 345, 892, 257, 1643, 517, 546, 340, 11, 393, 345, 655, 1100, 287, 534, 1492, 546, 262, 2106, 286, 10688, 11, 50719]",0.0,-0.06067820669899524,1.530054644808743,0.0017521624686196446
501,501,356152,3569.2,3576.24," one of the first algorithms ever written down, all you have to do is check is a divisible by any","[50747, 530, 286, 262, 717, 16113, 1683, 3194, 866, 11, 477, 345, 423, 284, 466, 318, 2198, 318, 257, 2659, 12843, 416, 597, 51099]",0.0,-0.06067820669899524,1.530054644808743,0.0017521624686196446
502,502,356152,3576.24,3583.52, of the previous prime numbers that are smaller than the square root. And before you get to a,"[51099, 286, 262, 2180, 6994, 3146, 326, 389, 4833, 621, 262, 6616, 6808, 13, 843, 878, 345, 651, 284, 257, 51463]",0.0,-0.06067820669899524,1.530054644808743,0.0017521624686196446
503,503,358352,3583.52,3592.88," better algorithm than that, you have to have several PhDs in in this creed math. So that's","[50363, 1365, 11862, 621, 326, 11, 345, 423, 284, 423, 1811, 16394, 82, 287, 287, 428, 43514, 10688, 13, 1406, 326, 338, 50831]",0.0,-0.131533279847563,1.7004608294930876,0.015516264364123344
504,504,358352,3592.88,3598.08," as much as I know. So of course, that same story applies to a lot of other algorithms string","[50831, 355, 881, 355, 314, 760, 13, 1406, 286, 1781, 11, 326, 976, 1621, 8991, 284, 257, 1256, 286, 584, 16113, 4731, 51091]",0.0,-0.131533279847563,1.7004608294930876,0.015516264364123344
505,505,358352,3598.08,3603.6," matching is a good example of how to come up with an efficient algorithm. And sometimes,","[51091, 12336, 318, 257, 922, 1672, 286, 703, 284, 1282, 510, 351, 281, 6942, 11862, 13, 843, 3360, 11, 51367]",0.0,-0.131533279847563,1.7004608294930876,0.015516264364123344
506,506,358352,3604.64,3609.36, the more efficient algorithm is not so much more complex than the inefficient one. But that's an,"[51419, 262, 517, 6942, 11862, 318, 407, 523, 881, 517, 3716, 621, 262, 30904, 530, 13, 887, 326, 338, 281, 51655]",0.0,-0.131533279847563,1.7004608294930876,0.015516264364123344
507,507,360936,3609.36,3616.0," art. And it's not always the case in the general cases, the more perform at the algorithm,","[50363, 1242, 13, 843, 340, 338, 407, 1464, 262, 1339, 287, 262, 2276, 2663, 11, 262, 517, 1620, 379, 262, 11862, 11, 50695]",0.0,-0.12487874406107356,1.7156862745098038,0.009332587011158466
508,508,360936,3616.7200000000003,3620.6400000000003," the more complex is going to be, there's a there's a kind of trade off.","[50731, 262, 517, 3716, 318, 1016, 284, 307, 11, 612, 338, 257, 612, 338, 257, 1611, 286, 3292, 572, 13, 50927]",0.0,-0.12487874406107356,1.7156862745098038,0.009332587011158466
509,509,360936,3620.6400000000003,3627.84," The simpler algorithms are also the ones that people invent first, because when you're looking","[50927, 383, 18599, 16113, 389, 635, 262, 3392, 326, 661, 8067, 717, 11, 780, 618, 345, 821, 2045, 51287]",0.0,-0.12487874406107356,1.7156862745098038,0.009332587011158466
510,510,360936,3627.84,3635.1200000000003," for a solution, you look at the simplest way to get there first. And so if there is a simple","[51287, 329, 257, 4610, 11, 345, 804, 379, 262, 24043, 835, 284, 651, 612, 717, 13, 843, 523, 611, 612, 318, 257, 2829, 51651]",0.0,-0.12487874406107356,1.7156862745098038,0.009332587011158466
511,511,363512,3635.7599999999998,3642.96," solution, even if it's not the best solution, not the fastest or the most memory efficient or whatever,","[50395, 4610, 11, 772, 611, 340, 338, 407, 262, 1266, 4610, 11, 407, 262, 14162, 393, 262, 749, 4088, 6942, 393, 4232, 11, 50755]",0.0,-0.10969693625151221,1.6836158192090396,0.0001770460803527385
512,512,363512,3645.12,3652.96, a simple solution and simple is fairly subjective. But mathematicians have also thought about sort,"[50863, 257, 2829, 4610, 290, 2829, 318, 6547, 19088, 13, 887, 33161, 1547, 423, 635, 1807, 546, 3297, 51255]",0.0,-0.10969693625151221,1.6836158192090396,0.0001770460803527385
513,513,363512,3652.96,3659.7599999999998," of what is a good definition for simple in the case of algorithms. But the simpler, the simpler","[51255, 286, 644, 318, 257, 922, 6770, 329, 2829, 287, 262, 1339, 286, 16113, 13, 887, 262, 18599, 11, 262, 18599, 51595]",0.0,-0.10969693625151221,1.6836158192090396,0.0001770460803527385
514,514,365976,3659.84,3668.32, solutions tend to be easier to follow for other programmers who haven't made a study of a,"[50367, 8136, 4327, 284, 307, 4577, 284, 1061, 329, 584, 24867, 508, 4398, 470, 925, 257, 2050, 286, 257, 50791]",0.0,-0.10217048161065401,1.4947916666666667,0.0005352682201191783
515,515,365976,3668.32,3675.0400000000004," particular field. And when I started with Python, I was a good programmer in general. I knew sort","[50791, 1948, 2214, 13, 843, 618, 314, 2067, 351, 11361, 11, 314, 373, 257, 922, 24292, 287, 2276, 13, 314, 2993, 3297, 51127]",0.0,-0.10217048161065401,1.4947916666666667,0.0005352682201191783
516,516,365976,3675.0400000000004,3682.2400000000002, of basic data structures and new to see language pretty well. But there were many areas where I was,"[51127, 286, 4096, 1366, 8573, 290, 649, 284, 766, 3303, 2495, 880, 13, 887, 612, 547, 867, 3006, 810, 314, 373, 51487]",0.0,-0.10217048161065401,1.4947916666666667,0.0005352682201191783
517,517,368224,3682.56,3694.8799999999997," only somewhat familiar with the state of the art. And so I picked, in many cases, the simplest","[50379, 691, 6454, 5385, 351, 262, 1181, 286, 262, 1242, 13, 843, 523, 314, 6497, 11, 287, 867, 2663, 11, 262, 24043, 50995]",0.0,-0.11171926470363841,1.5737704918032787,2.963064980576746e-05
518,518,368224,3694.8799999999997,3700.4799999999996," way I could solve a particular sub problem, because when you're designing and implementing a language,","[50995, 835, 314, 714, 8494, 257, 1948, 850, 1917, 11, 780, 618, 345, 821, 18492, 290, 15427, 257, 3303, 11, 51275]",0.0,-0.11171926470363841,1.5737704918032787,2.963064980576746e-05
519,519,368224,3700.4799999999996,3707.6," you have to like, you have many hundreds of little problems to solve. And you have to have","[51275, 345, 423, 284, 588, 11, 345, 423, 867, 5179, 286, 1310, 2761, 284, 8494, 13, 843, 345, 423, 284, 423, 51631]",0.0,-0.11171926470363841,1.5737704918032787,2.963064980576746e-05
520,520,370760,3707.68,3714.4," solutions for every one of them before you can sort of say, I've invented a programming language.","[50367, 8136, 329, 790, 530, 286, 606, 878, 345, 460, 3297, 286, 910, 11, 314, 1053, 15646, 257, 8300, 3303, 13, 50703]",0.0,-0.16561291822746618,1.4945054945054945,0.0011087507009506226
521,521,370760,3716.4,3723.92," First of all, see Python, what kind of things does it do? An interpreter, it takes in this","[50803, 3274, 286, 477, 11, 766, 11361, 11, 644, 1611, 286, 1243, 857, 340, 466, 30, 1052, 28846, 11, 340, 2753, 287, 428, 51179]",0.0,-0.16561291822746618,1.4945054945054945,0.0011087507009506226
522,522,370760,3723.92,3728.16, readable language that we talked about that is Python. What is this supposed to do?,"[51179, 31744, 3303, 326, 356, 6619, 546, 326, 318, 11361, 13, 1867, 318, 428, 4385, 284, 466, 30, 51391]",0.0,-0.16561291822746618,1.4945054945054945,0.0011087507009506226
523,523,372816,3728.16,3739.12," The interpreter, basically, it's sort of a recipe for understanding recipes. So instead of a recipe","[50363, 383, 28846, 11, 6209, 11, 340, 338, 3297, 286, 257, 8364, 329, 4547, 14296, 13, 1406, 2427, 286, 257, 8364, 50911]",0.0,-0.10139165605817523,1.608433734939759,0.006019532214850187
524,524,372816,3739.12,3747.2799999999997," that says, bake me a cake, we have a recipe for, well, given the text of a program,","[50911, 326, 1139, 11, 28450, 502, 257, 12187, 11, 356, 423, 257, 8364, 329, 11, 880, 11, 1813, 262, 2420, 286, 257, 1430, 11, 51319]",0.0,-0.10139165605817523,1.608433734939759,0.006019532214850187
525,525,372816,3748.96,3754.48, how do we run that program? And that is sort of the recipe for building a computer.,"[51403, 703, 466, 356, 1057, 326, 1430, 30, 843, 326, 318, 3297, 286, 262, 8364, 329, 2615, 257, 3644, 13, 51679]",0.0,-0.10139165605817523,1.608433734939759,0.006019532214850187
526,526,375448,3754.48,3761.52, The recipe for the baker and the chef. Yep. What are the algorithmically tricky things that,"[50363, 383, 8364, 329, 262, 46412, 290, 262, 21221, 13, 40810, 13, 1867, 389, 262, 11862, 1146, 17198, 1243, 326, 50715]",0.0,-0.16898706981113978,1.4371859296482412,0.0012390861520543694
527,527,375448,3762.48,3767.52," happen to be low hanging fruit that could be improved on? Maybe throughout the history of Python,","[50763, 1645, 284, 307, 1877, 10938, 8234, 326, 714, 307, 6596, 319, 30, 6674, 3690, 262, 2106, 286, 11361, 11, 51015]",0.0,-0.16898706981113978,1.4371859296482412,0.0012390861520543694
528,528,375448,3767.52,3774.08," but also now, how is it possible that three dot 11 in year 2022, it's possible to get such a big","[51015, 475, 635, 783, 11, 703, 318, 340, 1744, 326, 1115, 16605, 1367, 287, 614, 33160, 11, 340, 338, 1744, 284, 651, 884, 257, 1263, 51343]",0.0,-0.16898706981113978,1.4371859296482412,0.0012390861520543694
529,529,377408,3774.08,3786.48, performance improvement. We focused on a few areas where we still felt there was low hanging fruit.,"[50363, 2854, 9025, 13, 775, 5670, 319, 257, 1178, 3006, 810, 356, 991, 2936, 612, 373, 1877, 10938, 8234, 13, 50983]",0.0,-0.1718781699596996,1.457142857142857,0.0130012147128582
530,530,377408,3787.6,3795.44, The biggest one is actually the interpreter itself. And this has to do with details of how Python is,"[51039, 383, 4094, 530, 318, 1682, 262, 28846, 2346, 13, 843, 428, 468, 284, 466, 351, 3307, 286, 703, 11361, 318, 51431]",0.0,-0.1718781699596996,1.457142857142857,0.0130012147128582
531,531,377408,3795.44,3802.48, defined. So I didn't know if the fisherman is going to follow this story. He already jumped off the boat.,"[51431, 5447, 13, 1406, 314, 1422, 470, 760, 611, 262, 48750, 318, 1016, 284, 1061, 428, 1621, 13, 679, 1541, 11687, 572, 262, 8848, 13, 51783]",0.0,-0.1718781699596996,1.457142857142857,0.0130012147128582
532,532,380248,3802.96,3810.72," He's this boy. Yeah, stupid. Python is actually, even though it's always called an interpreted","[50387, 679, 338, 428, 2933, 13, 9425, 11, 8531, 13, 11361, 318, 1682, 11, 772, 996, 340, 338, 1464, 1444, 281, 16173, 50775]",0.0,-0.15968327881187522,1.7309417040358743,0.005051314365118742
533,533,380248,3810.72,3816.16," language, it's there's also a compiler in there. It just doesn't compile to machine code. It","[50775, 3303, 11, 340, 338, 612, 338, 635, 257, 17050, 287, 612, 13, 632, 655, 1595, 470, 17632, 284, 4572, 2438, 13, 632, 51047]",0.0,-0.15968327881187522,1.7309417040358743,0.005051314365118742
534,534,380248,3816.16,3824.64," compiles to bytecode, which is sort of code for an imaginary computer that is called the Python","[51047, 552, 2915, 284, 18022, 8189, 11, 543, 318, 3297, 286, 2438, 329, 281, 26726, 3644, 326, 318, 1444, 262, 11361, 51471]",0.0,-0.15968327881187522,1.7309417040358743,0.005051314365118742
535,535,380248,3824.64,3830.88, interpreter. So it's compiling code that is more easily digestible by the interpreter or is digestible,"[51471, 28846, 13, 1406, 340, 338, 33393, 2438, 326, 318, 517, 3538, 16274, 856, 416, 262, 28846, 393, 318, 16274, 856, 51783]",0.0,-0.15968327881187522,1.7309417040358743,0.005051314365118742
536,536,383088,3831.2000000000003,3837.12, it is the code that is digested by the interpreter. That's the compiler. We tweaked very minor bits of,"[50379, 340, 318, 262, 2438, 326, 318, 3100, 7287, 416, 262, 28846, 13, 1320, 338, 262, 17050, 13, 775, 38304, 845, 4159, 10340, 286, 50675]",0.0,-0.12514878608085014,1.6162162162162161,0.0011717356974259019
537,537,383088,3837.12,3845.04," the compiler. Almost all the work was done in the interpreter. Because when you have a program,","[50675, 262, 17050, 13, 16699, 477, 262, 670, 373, 1760, 287, 262, 28846, 13, 4362, 618, 345, 423, 257, 1430, 11, 51071]",0.0,-0.12514878608085014,1.6162162162162161,0.0011717356974259019
538,538,383088,3845.6,3852.0," you compile at once, and then you run the code a whole bunch of times. Or maybe there's one function","[51099, 345, 17632, 379, 1752, 11, 290, 788, 345, 1057, 262, 2438, 257, 2187, 7684, 286, 1661, 13, 1471, 3863, 612, 338, 530, 2163, 51419]",0.0,-0.12514878608085014,1.6162162162162161,0.0011717356974259019
539,539,385200,3852.48,3861.6, in the code that gets run many times. Now I know that that's sort of people who know this field,"[50387, 287, 262, 2438, 326, 3011, 1057, 867, 1661, 13, 2735, 314, 760, 326, 326, 338, 3297, 286, 661, 508, 760, 428, 2214, 50843]",0.0,-0.1619215556553432,1.5480225988700564,0.004089779686182737
540,540,385200,3861.6,3867.76," are expecting me to at some point say we built a just in time compiler. Actually, we didn't.","[50843, 389, 12451, 502, 284, 379, 617, 966, 910, 356, 3170, 257, 655, 287, 640, 17050, 13, 18689, 11, 356, 1422, 470, 13, 51151]",0.0,-0.1619215556553432,1.5480225988700564,0.004089779686182737
541,541,385200,3867.76,3874.48, We just made the interpreter a little more efficient. What's a just in time compiler?,"[51151, 775, 655, 925, 262, 28846, 257, 1310, 517, 6942, 13, 1867, 338, 257, 655, 287, 640, 17050, 30, 51487]",0.0,-0.1619215556553432,1.5480225988700564,0.004089779686182737
542,542,387448,3874.48,3882.4," That is a thing from the Java world, although it's now applied to almost all programming languages,","[50363, 1320, 318, 257, 1517, 422, 262, 7349, 995, 11, 3584, 340, 338, 783, 5625, 284, 2048, 477, 8300, 8950, 11, 50759]",0.0,-0.1367597908809267,1.6943231441048034,0.010454600676894188
543,543,387448,3882.4,3889.04," especially interpreted ones. So you see the compilers that Python not like a just in time compiler,","[50759, 2592, 16173, 3392, 13, 1406, 345, 766, 262, 552, 34393, 326, 11361, 407, 588, 257, 655, 287, 640, 17050, 11, 51091]",0.0,-0.1367597908809267,1.6943231441048034,0.010454600676894188
544,544,387448,3889.04,3895.36, but it's a compiler that creates bytecode that is then fed to the interpreter. And the compiler,"[51091, 475, 340, 338, 257, 17050, 326, 8075, 18022, 8189, 326, 318, 788, 11672, 284, 262, 28846, 13, 843, 262, 17050, 51407]",0.0,-0.1367597908809267,1.6943231441048034,0.010454600676894188
545,545,387448,3896.56,3899.6, was there something interesting to say about the compiler? It's interesting that you haven't,"[51467, 373, 612, 1223, 3499, 284, 910, 546, 262, 17050, 30, 632, 338, 3499, 326, 345, 4398, 470, 51619]",0.0,-0.1367597908809267,1.6943231441048034,0.010454600676894188
546,546,389960,3899.68,3905.2," changed that tweak that at all or much. We changed some parts of the bytecode,","[50367, 3421, 326, 25393, 326, 379, 477, 393, 881, 13, 775, 3421, 617, 3354, 286, 262, 18022, 8189, 11, 50643]",0.0,-0.13831458016047402,1.593939393939394,0.003969269804656506
547,547,389960,3906.16,3912.0, but not very much. And so we only had to change the parts of the compiler where we,"[50691, 475, 407, 845, 881, 13, 843, 523, 356, 691, 550, 284, 1487, 262, 3354, 286, 262, 17050, 810, 356, 50983]",0.0,-0.13831458016047402,1.593939393939394,0.003969269804656506
548,548,389960,3912.0,3917.92, decided that the breakdown of a Python program in bytecode instructions had to be slightly different.,"[50983, 3066, 326, 262, 14608, 286, 257, 11361, 1430, 287, 18022, 8189, 7729, 550, 284, 307, 4622, 1180, 13, 51279]",0.0,-0.13831458016047402,1.593939393939394,0.003969269804656506
549,549,391792,3918.4,3931.44, But that didn't gain us the performance improvements. The performance improvements were like making,"[50387, 887, 326, 1422, 470, 4461, 514, 262, 2854, 8561, 13, 383, 2854, 8561, 547, 588, 1642, 51039]",0.0,-0.1588157873887282,1.523076923076923,0.0053733051754534245
550,550,391792,3931.44,3940.48, the interpreter faster in part by sort of removing the fat from some internal data structures used,"[51039, 262, 28846, 5443, 287, 636, 416, 3297, 286, 10829, 262, 3735, 422, 617, 5387, 1366, 8573, 973, 51491]",0.0,-0.1588157873887282,1.523076923076923,0.0053733051754534245
551,551,394048,3940.56,3948.8, by the interpreter. But the key idea is an adaptive specializing interpreter.,"[50367, 416, 262, 28846, 13, 887, 262, 1994, 2126, 318, 281, 29605, 40847, 28846, 13, 50779]",0.0,-0.08320301393919353,1.6984924623115578,0.0003591860586311668
552,552,394048,3949.68,3953.6, Let's go. What is adaptive about it? What is specialized about it?,"[50823, 3914, 338, 467, 13, 1867, 318, 29605, 546, 340, 30, 1867, 318, 16976, 546, 340, 30, 51019]",0.0,-0.08320301393919353,1.6984924623115578,0.0003591860586311668
553,553,394048,3953.6,3959.04," Well, let me first talk about the specializing part because the adaptive part is the sort of","[51019, 3894, 11, 1309, 502, 717, 1561, 546, 262, 40847, 636, 780, 262, 29605, 636, 318, 262, 3297, 286, 51291]",0.0,-0.08320301393919353,1.6984924623115578,0.0003591860586311668
554,554,394048,3960.32,3968.2400000000002," the second order effect, but they're both important. So bytecode is a bunch of machine instructions,","[51355, 262, 1218, 1502, 1245, 11, 475, 484, 821, 1111, 1593, 13, 1406, 18022, 8189, 318, 257, 7684, 286, 4572, 7729, 11, 51751]",0.0,-0.08320301393919353,1.6984924623115578,0.0003591860586311668
555,555,396824,3968.24,3974.0," but it's an imaginary machine. But the machine can do things like call of function,","[50363, 475, 340, 338, 281, 26726, 4572, 13, 887, 262, 4572, 460, 466, 1243, 588, 869, 286, 2163, 11, 50651]",0.0,-0.1107521291638984,1.4821428571428572,0.00016611437604296952
556,556,396824,3974.8799999999997,3981.3599999999997," add two numbers, print a value. Those are sort of typical instructions in Python.","[50695, 751, 734, 3146, 11, 3601, 257, 1988, 13, 5845, 389, 3297, 286, 7226, 7729, 287, 11361, 13, 51019]",0.0,-0.1107521291638984,1.4821428571428572,0.00016611437604296952
557,557,396824,3983.68,3991.3599999999997," And if we take the example of adding two numbers, actually in Python, the language,","[51135, 843, 611, 356, 1011, 262, 1672, 286, 4375, 734, 3146, 11, 1682, 287, 11361, 11, 262, 3303, 11, 51519]",0.0,-0.1107521291638984,1.4821428571428572,0.00016611437604296952
558,558,399136,3991.44,3998.6400000000003, there's no such thing as adding two numbers. There's just the compiler doesn't know that,"[50367, 612, 338, 645, 884, 1517, 355, 4375, 734, 3146, 13, 1318, 338, 655, 262, 17050, 1595, 470, 760, 326, 50727]",0.0,-0.1156765502176167,1.665158371040724,0.0064199818298220634
559,559,399136,3998.6400000000003,4006.1600000000003, you're adding two numbers. You might as well be adding two strings or two lists or two instances,"[50727, 345, 821, 4375, 734, 3146, 13, 921, 1244, 355, 880, 307, 4375, 734, 13042, 393, 734, 8341, 393, 734, 10245, 51103]",0.0,-0.1156765502176167,1.665158371040724,0.0064199818298220634
560,560,399136,4006.1600000000003,4013.52, of some user defined class that happened to implement this operator called add. That's a very,"[51103, 286, 617, 2836, 5447, 1398, 326, 3022, 284, 3494, 428, 10088, 1444, 751, 13, 1320, 338, 257, 845, 51471]",0.0,-0.1156765502176167,1.665158371040724,0.0064199818298220634
561,561,399136,4013.52,4019.84, interesting and fairly powerful mathematical concept. It's mostly a user interface trick,"[51471, 3499, 290, 6547, 3665, 18069, 3721, 13, 632, 338, 4632, 257, 2836, 7071, 6908, 51787]",0.0,-0.1156765502176167,1.665158371040724,0.0064199818298220634
562,562,401984,4019.84,4028.6400000000003," because it means that a certain category of functions can be written using a single symbol,","[50363, 780, 340, 1724, 326, 257, 1728, 6536, 286, 5499, 460, 307, 3194, 1262, 257, 2060, 6194, 11, 50803]",0.0,-0.0705004207423476,1.6987179487179487,0.00022579632059205323
563,563,401984,4028.6400000000003,4034.56, the plus sign. And sort of a bunch of other functions can be written using another single,"[50803, 262, 5556, 1051, 13, 843, 3297, 286, 257, 7684, 286, 584, 5499, 460, 307, 3194, 1262, 1194, 2060, 51099]",0.0,-0.0705004207423476,1.6987179487179487,0.00022579632059205323
564,564,401984,4034.56,4043.04," symbol, the multiply sign. So if we take addition, the way traditionally in Python,","[51099, 6194, 11, 262, 29162, 1051, 13, 1406, 611, 356, 1011, 3090, 11, 262, 835, 16083, 287, 11361, 11, 51523]",0.0,-0.0705004207423476,1.6987179487179487,0.00022579632059205323
565,565,404304,4043.04,4050.56," the add bytecode was executed is pointers, pointers, and more pointers.","[50363, 262, 751, 18022, 8189, 373, 10945, 318, 32007, 11, 32007, 11, 290, 517, 32007, 13, 50739]",0.0,-0.1598010846038363,1.5853658536585367,0.017129814252257347
566,566,404304,4051.52,4057.92, So first we have two objects. An object is basically a pointer to a bunch of memory that,"[50787, 1406, 717, 356, 423, 734, 5563, 13, 1052, 2134, 318, 6209, 257, 17562, 284, 257, 7684, 286, 4088, 326, 51107]",0.0,-0.1598010846038363,1.5853658536585367,0.017129814252257347
567,567,404304,4057.92,4063.84," contains more pointers. Pointers all the way down. Well, not quite, but there are a lot of them. So","[51107, 4909, 517, 32007, 13, 7695, 20193, 477, 262, 835, 866, 13, 3894, 11, 407, 2407, 11, 475, 612, 389, 257, 1256, 286, 606, 13, 1406, 51403]",0.0,-0.1598010846038363,1.5853658536585367,0.017129814252257347
568,568,406384,4064.56,4073.44," to simplify a bit, we look up in one of the objects, what is the type of that object? And","[50399, 284, 30276, 257, 1643, 11, 356, 804, 510, 287, 530, 286, 262, 5563, 11, 644, 318, 262, 2099, 286, 326, 2134, 30, 843, 50843]",0.0,-0.12356458391462054,1.7142857142857142,0.0003863843157887459
569,569,406384,4073.44,4082.88, does that object type define an add operation? And so you can imagine that there is a sort of a,"[50843, 857, 326, 2134, 2099, 8160, 281, 751, 4905, 30, 843, 523, 345, 460, 5967, 326, 612, 318, 257, 3297, 286, 257, 51315]",0.0,-0.12356458391462054,1.7142857142857142,0.0003863843157887459
570,570,406384,4082.88,4088.8, type integer that knows how to add itself to another integer. And there is a type floating,"[51315, 2099, 18253, 326, 4206, 703, 284, 751, 2346, 284, 1194, 18253, 13, 843, 612, 318, 257, 2099, 12462, 51611]",0.0,-0.12356458391462054,1.7142857142857142,0.0003863843157887459
571,571,408880,4088.88,4095.6800000000003, point number that knows how to add itself to another floating point number. And the,"[50367, 966, 1271, 326, 4206, 703, 284, 751, 2346, 284, 1194, 12462, 966, 1271, 13, 843, 262, 50707]",0.0,-0.11530218760172527,1.8177083333333333,0.001377543550916016
572,572,408880,4095.6800000000003,4102.08," integers and floating point numbers are sort of important, I think, mostly historically,","[50707, 37014, 290, 12462, 966, 3146, 389, 3297, 286, 1593, 11, 314, 892, 11, 4632, 15074, 11, 51027]",0.0,-0.11530218760172527,1.8177083333333333,0.001377543550916016
573,573,408880,4102.08,4110.24," because in the first computers, use the sort of the same bit pattern when interpreted as a","[51027, 780, 287, 262, 717, 9061, 11, 779, 262, 3297, 286, 262, 976, 1643, 3912, 618, 16173, 355, 257, 51435]",0.0,-0.11530218760172527,1.8177083333333333,0.001377543550916016
574,574,408880,4110.24,4114.72, floating point number had a very different value than when interpreted as an integer.,"[51435, 12462, 966, 1271, 550, 257, 845, 1180, 1988, 621, 618, 16173, 355, 281, 18253, 13, 51659]",0.0,-0.11530218760172527,1.8177083333333333,0.001377543550916016
575,575,411472,4114.8,4119.280000000001," Can I ask a dumb question here, please do, given the basics of intent and float and add,","[50367, 1680, 314, 1265, 257, 13526, 1808, 994, 11, 3387, 466, 11, 1813, 262, 19165, 286, 6824, 290, 12178, 290, 751, 11, 50591]",0.0,-0.17081212997436523,1.7317073170731707,0.006770338397473097
576,576,411472,4120.0,4126.400000000001, who carries the knowledge of how to add two integers? Is it the integer? It's the type,"[50627, 508, 10732, 262, 3725, 286, 703, 284, 751, 734, 37014, 30, 1148, 340, 262, 18253, 30, 632, 338, 262, 2099, 50947]",0.0,-0.17081212997436523,1.7317073170731707,0.006770338397473097
577,577,411472,4126.400000000001,4132.320000000001, integer versus it's the type integer and the type float. What about the operator? Is the operator,"[50947, 18253, 9051, 340, 338, 262, 2099, 18253, 290, 262, 2099, 12178, 13, 1867, 546, 262, 10088, 30, 1148, 262, 10088, 51243]",0.0,-0.17081212997436523,1.7317073170731707,0.006770338397473097
578,578,411472,4133.76,4142.400000000001, just exist as a platonic form possessed by the integer? The operator is more like,"[51315, 655, 2152, 355, 257, 40315, 9229, 1296, 17273, 416, 262, 18253, 30, 383, 10088, 318, 517, 588, 51747]",0.0,-0.17081212997436523,1.7317073170731707,0.006770338397473097
579,579,414240,4142.96,4153.5199999999995, it's an index in a list of functions that the integer type defines. And so the integer type,"[50391, 340, 338, 281, 6376, 287, 257, 1351, 286, 5499, 326, 262, 18253, 2099, 15738, 13, 843, 523, 262, 18253, 2099, 50919]",0.0,-0.1635514302040214,1.8343949044585988,0.0001080404908861965
580,580,414240,4155.5199999999995,4161.839999999999, is really a collection of functions. And there is an add function and there's a multiply function,"[51019, 318, 1107, 257, 4947, 286, 5499, 13, 843, 612, 318, 281, 751, 2163, 290, 612, 338, 257, 29162, 2163, 51335]",0.0,-0.1635514302040214,1.8343949044585988,0.0001080404908861965
581,581,414240,4161.839999999999,4166.879999999999," and there are like 30 other functions for other operations. There's a power function, for example.","[51335, 290, 612, 389, 588, 1542, 584, 5499, 329, 584, 4560, 13, 1318, 338, 257, 1176, 2163, 11, 329, 1672, 13, 51587]",0.0,-0.1635514302040214,1.8343949044585988,0.0001080404908861965
582,582,416688,4167.52,4177.52," And you can imagine that in memory, there is a distinct slot for the add operations. Let's say the","[50395, 843, 345, 460, 5967, 326, 287, 4088, 11, 612, 318, 257, 7310, 10852, 329, 262, 751, 4560, 13, 3914, 338, 910, 262, 50895]",0.0,-0.13650956361190134,1.7030303030303031,0.0002295115264132619
583,583,416688,4177.52,4183.36, add operation is the first operation of a type and the multiply is the second operation of a type.,"[50895, 751, 4905, 318, 262, 717, 4905, 286, 257, 2099, 290, 262, 29162, 318, 262, 1218, 4905, 286, 257, 2099, 13, 51187]",0.0,-0.13650956361190134,1.7030303030303031,0.0002295115264132619
584,584,416688,4184.0,4190.88," So now we take the integer type and we take the floating point type. In both cases,","[51219, 1406, 783, 356, 1011, 262, 18253, 2099, 290, 356, 1011, 262, 12462, 966, 2099, 13, 554, 1111, 2663, 11, 51563]",0.0,-0.13650956361190134,1.7030303030303031,0.0002295115264132619
585,585,419088,4191.6,4199.52, the add operation is the first slot and multiply is the second slot. But each slot contains a,"[50399, 262, 751, 4905, 318, 262, 717, 10852, 290, 29162, 318, 262, 1218, 10852, 13, 887, 1123, 10852, 4909, 257, 50795]",0.0,-0.12021947729176488,1.8493150684931507,0.00023709885135758668
586,586,419088,4199.52,4206.24, function and the functions are different because the add to integers function,"[50795, 2163, 290, 262, 5499, 389, 1180, 780, 262, 751, 284, 37014, 2163, 51131]",0.0,-0.12021947729176488,1.8493150684931507,0.00023709885135758668
587,587,419088,4206.96,4215.4400000000005, interprets the bit patterns as integers. The add to float function interprets the same bit pattern,"[51167, 16795, 912, 262, 1643, 7572, 355, 37014, 13, 383, 751, 284, 12178, 2163, 16795, 912, 262, 976, 1643, 3912, 51591]",0.0,-0.12021947729176488,1.8493150684931507,0.00023709885135758668
588,588,421544,4216.32,4224.08," as a floating point number. And then there is the string data type, which again interprets","[50407, 355, 257, 12462, 966, 1271, 13, 843, 788, 612, 318, 262, 4731, 1366, 2099, 11, 543, 757, 16795, 912, 50795]",0.0,-0.1629124493666098,1.5567567567567568,0.00022618373623117805
589,589,421544,4225.04,4233.44," the bit pattern as the address of a sequence of characters. There are lots of lies in that story,","[50843, 262, 1643, 3912, 355, 262, 2209, 286, 257, 8379, 286, 3435, 13, 1318, 389, 6041, 286, 7363, 287, 326, 1621, 11, 51263]",0.0,-0.1629124493666098,1.5567567567567568,0.00022618373623117805
590,590,421544,4233.44,4240.4, but that's that's sort of a basic idea. I could tell I could tell the fake news and the fabrication,"[51263, 475, 326, 338, 326, 338, 3297, 286, 257, 4096, 2126, 13, 314, 714, 1560, 314, 714, 1560, 262, 8390, 1705, 290, 262, 38876, 51611]",0.0,-0.1629124493666098,1.5567567567567568,0.00022618373623117805
591,591,424040,4240.48,4245.44, going on here at the table. But where's the optimization? Is it on the operators? Is it,"[50367, 1016, 319, 994, 379, 262, 3084, 13, 887, 810, 338, 262, 23989, 30, 1148, 340, 319, 262, 12879, 30, 1148, 340, 50615]",0.0,-0.1824125051498413,1.6130952380952381,0.003230320755392313
592,592,424040,4245.44,4255.839999999999, the different? So the optimization is the observation that in a particular line of code.,"[50615, 262, 1180, 30, 1406, 262, 23989, 318, 262, 13432, 326, 287, 257, 1948, 1627, 286, 2438, 13, 51135]",0.0,-0.1824125051498413,1.6130952380952381,0.003230320755392313
593,593,424040,4257.2,4264.16, So now you write your little Python program and you write a function and that function sort of,"[51203, 1406, 783, 345, 3551, 534, 1310, 11361, 1430, 290, 345, 3551, 257, 2163, 290, 326, 2163, 3297, 286, 51551]",0.0,-0.1824125051498413,1.6130952380952381,0.003230320755392313
594,594,426416,4264.16,4268.96," takes a bunch of inputs. And at some point, it adds two of the inputs together.","[50363, 2753, 257, 7684, 286, 17311, 13, 843, 379, 617, 966, 11, 340, 6673, 734, 286, 262, 17311, 1978, 13, 50603]",0.0,-0.13033567667007445,1.6067961165048543,0.0009196343598887324
595,595,426416,4270.4,4278.16," Now I bet you even if you call your function a thousand times, that all those calls are likely","[50675, 2735, 314, 731, 345, 772, 611, 345, 869, 534, 2163, 257, 7319, 1661, 11, 326, 477, 883, 3848, 389, 1884, 51063]",0.0,-0.13033567667007445,1.6067961165048543,0.0009196343598887324
596,596,426416,4278.16,4284.88," all going to be about integers, because maybe your program is all about integers. Or maybe","[51063, 477, 1016, 284, 307, 546, 37014, 11, 780, 3863, 534, 1430, 318, 477, 546, 37014, 13, 1471, 3863, 51399]",0.0,-0.13033567667007445,1.6067961165048543,0.0009196343598887324
597,597,426416,4286.5599999999995,4290.32," on that particular line of code where there's that plus operator,","[51483, 319, 326, 1948, 1627, 286, 2438, 810, 612, 338, 326, 5556, 10088, 11, 51671]",0.0,-0.13033567667007445,1.6067961165048543,0.0009196343598887324
598,598,429032,4290.48,4298.48," every time the program hits that line, the variables a and b that are being added together","[50371, 790, 640, 262, 1430, 7127, 326, 1627, 11, 262, 9633, 257, 290, 275, 326, 389, 852, 2087, 1978, 50771]",0.0,-0.13013031718495127,1.738532110091743,0.000134369358420372
599,599,429032,4298.48,4306.639999999999," happen to be strings. And so what we do is instead of having this single byte code that says,","[50771, 1645, 284, 307, 13042, 13, 843, 523, 644, 356, 466, 318, 2427, 286, 1719, 428, 2060, 18022, 2438, 326, 1139, 11, 51179]",0.0,-0.13013031718495127,1.738532110091743,0.000134369358420372
600,600,429032,4306.639999999999,4312.4, here's an add operation and the implementation of add is fully generic. It looks at the object,"[51179, 994, 338, 281, 751, 4905, 290, 262, 7822, 286, 751, 318, 3938, 14276, 13, 632, 3073, 379, 262, 2134, 51467]",0.0,-0.13013031718495127,1.738532110091743,0.000134369358420372
601,601,429032,4312.4,4317.92," from the object. It looks at the type, then it takes the type and it looks at looks of the function","[51467, 422, 262, 2134, 13, 632, 3073, 379, 262, 2099, 11, 788, 340, 2753, 262, 2099, 290, 340, 3073, 379, 3073, 286, 262, 2163, 51743]",0.0,-0.13013031718495127,1.738532110091743,0.000134369358420372
602,602,431792,4318.0,4323.52," pointer, then it calls the function. Now the function has to be has to look at the other","[50367, 17562, 11, 788, 340, 3848, 262, 2163, 13, 2735, 262, 2163, 468, 284, 307, 468, 284, 804, 379, 262, 584, 50643]",0.0,-0.08596135757781648,1.7104072398190044,0.0011691995896399021
603,603,431792,4323.52,4328.8, argument and has to double check that the other argument has the right type. And then there's a,"[50643, 4578, 290, 468, 284, 4274, 2198, 326, 262, 584, 4578, 468, 262, 826, 2099, 13, 843, 788, 612, 338, 257, 50907]",0.0,-0.08596135757781648,1.7104072398190044,0.0011691995896399021
604,604,431792,4328.8,4335.36, bunch of error checking before it can actually just go ahead and add the two bit patterns in the,"[50907, 7684, 286, 4049, 10627, 878, 340, 460, 1682, 655, 467, 4058, 290, 751, 262, 734, 1643, 7572, 287, 262, 51235]",0.0,-0.08596135757781648,1.7104072398190044,0.0011691995896399021
605,605,431792,4335.36,4347.2," right way. What we do is every time we execute an add instruction like that, we we keep a little","[51235, 826, 835, 13, 1867, 356, 466, 318, 790, 640, 356, 12260, 281, 751, 12064, 588, 326, 11, 356, 356, 1394, 257, 1310, 51827]",0.0,-0.08596135757781648,1.7104072398190044,0.0011691995896399021
606,606,434720,4347.2,4357.04," note of in the end, after after we hit the code that that did the addition for a particular type,","[50363, 3465, 286, 287, 262, 886, 11, 706, 706, 356, 2277, 262, 2438, 326, 326, 750, 262, 3090, 329, 257, 1948, 2099, 11, 50855]",0.0,-0.15585048110396774,1.5634920634920635,0.0010585919953882694
607,607,434720,4357.5199999999995,4366.88," what type was it? And then after a few times through that code, if it's this, if it's the same type","[50879, 644, 2099, 373, 340, 30, 843, 788, 706, 257, 1178, 1661, 832, 326, 2438, 11, 611, 340, 338, 428, 11, 611, 340, 338, 262, 976, 2099, 51347]",0.0,-0.15585048110396774,1.5634920634920635,0.0010585919953882694
608,608,436688,4366.88,4377.36," all the time, we say, Oh, so this add operation, even though it's the generic add operation,","[50363, 477, 262, 640, 11, 356, 910, 11, 3966, 11, 523, 428, 751, 4905, 11, 772, 996, 340, 338, 262, 14276, 751, 4905, 11, 50887]",0.0,-0.09616866792951312,1.7361963190184049,0.05213209241628647
609,609,436688,4377.36,4385.2, it might as well be the add integer operation. And add integer operation is much more efficient,"[50887, 340, 1244, 355, 880, 307, 262, 751, 18253, 4905, 13, 843, 751, 18253, 4905, 318, 881, 517, 6942, 51279]",0.0,-0.09616866792951312,1.7361963190184049,0.05213209241628647
610,610,436688,4385.2,4392.24," because it just says, assume that a and b are integers, do the addition operation, do it right","[51279, 780, 340, 655, 1139, 11, 7048, 326, 257, 290, 275, 389, 37014, 11, 466, 262, 3090, 4905, 11, 466, 340, 826, 51631]",0.0,-0.09616866792951312,1.7361963190184049,0.05213209241628647
611,611,439224,4392.32,4403.28," there in line and produce the result. And the big lie here is that in Python, even if you have","[50367, 612, 287, 1627, 290, 4439, 262, 1255, 13, 843, 262, 1263, 6486, 994, 318, 326, 287, 11361, 11, 772, 611, 345, 423, 50915]",0.0,-0.10051026940345764,1.654867256637168,0.003909124992787838
612,612,439224,4403.28,4409.12," great evidence that in the past, it was always two integers that you were adding. At some point","[50915, 1049, 2370, 326, 287, 262, 1613, 11, 340, 373, 1464, 734, 37014, 326, 345, 547, 4375, 13, 1629, 617, 966, 51207]",0.0,-0.10051026940345764,1.654867256637168,0.003909124992787838
613,613,439224,4409.12,4413.76," in the future, that same line of code could still be hit with two floating points or two strings,","[51207, 287, 262, 2003, 11, 326, 976, 1627, 286, 2438, 714, 991, 307, 2277, 351, 734, 12462, 2173, 393, 734, 13042, 11, 51439]",0.0,-0.10051026940345764,1.654867256637168,0.003909124992787838
614,614,439224,4413.76,4418.48, or maybe a string and an integer. It's not a great lie. That's just the fact of life.,"[51439, 393, 3863, 257, 4731, 290, 281, 18253, 13, 632, 338, 407, 257, 1049, 6486, 13, 1320, 338, 655, 262, 1109, 286, 1204, 13, 51675]",0.0,-0.10051026940345764,1.654867256637168,0.003909124992787838
615,615,441848,4419.2,4425.919999999999, I didn't account for what what should happen in that case in in the way I told the story.,"[50399, 314, 1422, 470, 1848, 329, 644, 644, 815, 1645, 287, 326, 1339, 287, 287, 262, 835, 314, 1297, 262, 1621, 13, 50735]",0.0,-0.14793885272482168,1.5664739884393064,0.0002670286048669368
616,616,441848,4425.919999999999,4431.599999999999," There is some accounting for that. And and so what we actually have to do is,","[50735, 1318, 318, 617, 14317, 329, 326, 13, 843, 290, 523, 644, 356, 1682, 423, 284, 466, 318, 11, 51019]",0.0,-0.14793885272482168,1.5664739884393064,0.0002670286048669368
617,617,441848,4432.32,4440.959999999999," when we have the add integer operation, we still have to check, are the two arguments in fact integers?","[51055, 618, 356, 423, 262, 751, 18253, 4905, 11, 356, 991, 423, 284, 2198, 11, 389, 262, 734, 7159, 287, 1109, 37014, 30, 51487]",0.0,-0.14793885272482168,1.5664739884393064,0.0002670286048669368
618,618,444096,4441.84,4449.04, We applied some tricks to make those checks efficient. And we know statistically that the,"[50407, 775, 5625, 617, 15910, 284, 787, 883, 8794, 6942, 13, 843, 356, 760, 19941, 326, 262, 50767]",0.0,-0.11926382331437962,1.6425531914893616,0.0011052099289372563
619,619,444096,4449.04,4457.44," outcome is almost always, yes, they were they are both integers. And so we quickly make that check,","[50767, 8055, 318, 2048, 1464, 11, 3763, 11, 484, 547, 484, 389, 1111, 37014, 13, 843, 523, 356, 2952, 787, 326, 2198, 11, 51187]",0.0,-0.11926382331437962,1.6425531914893616,0.0011052099289372563
620,620,444096,4457.44,4463.44, and then we proceed with the sort of add integer operation. And then there is a fallback mechanism,"[51187, 290, 788, 356, 5120, 351, 262, 3297, 286, 751, 18253, 4905, 13, 843, 788, 612, 318, 257, 2121, 1891, 9030, 51487]",0.0,-0.11926382331437962,1.6425531914893616,0.0011052099289372563
621,621,444096,4463.44,4469.68," where we say, oops, one of them wasn't an integer. Now we're going to pretend that there was just","[51487, 810, 356, 910, 11, 267, 2840, 11, 530, 286, 606, 2492, 470, 281, 18253, 13, 2735, 356, 821, 1016, 284, 16614, 326, 612, 373, 655, 51799]",0.0,-0.11926382331437962,1.6425531914893616,0.0011052099289372563
622,622,446968,4469.68,4477.92," the fully generic add operation. We wasted a few cycles, believing it was, was going to be two","[50363, 262, 3938, 14276, 751, 4905, 13, 775, 18359, 257, 1178, 16006, 11, 14773, 340, 373, 11, 373, 1016, 284, 307, 734, 50775]",0.0,-0.14914503231854506,1.5681818181818181,0.0003218163037672639
623,623,446968,4477.92,4483.84," integers, and then we had to back up. But we didn't waste that much time and statistically,","[50775, 37014, 11, 290, 788, 356, 550, 284, 736, 510, 13, 887, 356, 1422, 470, 7030, 326, 881, 640, 290, 19941, 11, 51071]",0.0,-0.14914503231854506,1.5681818181818181,0.0003218163037672639
624,624,446968,4484.96,4492.240000000001," most of the time. Basically, we were sort of hoping that most of the time we guess right,","[51127, 749, 286, 262, 640, 13, 20759, 11, 356, 547, 3297, 286, 7725, 326, 749, 286, 262, 640, 356, 4724, 826, 11, 51491]",0.0,-0.14914503231854506,1.5681818181818181,0.0003218163037672639
625,625,449224,4492.24,4499.679999999999," because if we if it turns out that we guessed wrong too often, or we didn't have a good guess at","[50363, 780, 611, 356, 611, 340, 4962, 503, 326, 356, 25183, 2642, 1165, 1690, 11, 393, 356, 1422, 470, 423, 257, 922, 4724, 379, 50735]",0.0,-0.10682105014198705,1.5657370517928286,0.009059688076376915
626,626,449224,4499.679999999999,4507.92," all, things might actually end up running a little slower. So someone with armed with this knowledge","[50735, 477, 11, 1243, 1244, 1682, 886, 510, 2491, 257, 1310, 13611, 13, 1406, 2130, 351, 6936, 351, 428, 3725, 51147]",0.0,-0.10682105014198705,1.5657370517928286,0.009059688076376915
627,627,449224,4508.8,4514.88," and a copy of the implementation, someone could easily construct a counter example where they say,","[51191, 290, 257, 4866, 286, 262, 7822, 11, 2130, 714, 3538, 5678, 257, 3753, 1672, 810, 484, 910, 11, 51495]",0.0,-0.10682105014198705,1.5657370517928286,0.009059688076376915
628,628,449224,4514.88,4520.24," Oh, I have a program. And then now it runs five times as slow in Python three 11, then it didn't","[51495, 3966, 11, 314, 423, 257, 1430, 13, 843, 788, 783, 340, 4539, 1936, 1661, 355, 3105, 287, 11361, 1115, 1367, 11, 788, 340, 1422, 470, 51763]",0.0,-0.10682105014198705,1.5657370517928286,0.009059688076376915
629,629,452024,4520.24,4527.92, Python three 10. But that's a very unrealistic program. That's that's just like an extreme fluke.,"[50363, 11361, 1115, 838, 13, 887, 326, 338, 257, 845, 31363, 1430, 13, 1320, 338, 326, 338, 655, 588, 281, 3257, 781, 4649, 13, 50747]",0.0,-0.14483820308338513,1.4228571428571428,0.0029602425638586283
630,630,452024,4529.12,4532.719999999999," It's a fun reverse engineering task, though. Oh, yeah. So there's","[50807, 632, 338, 257, 1257, 9575, 8705, 4876, 11, 996, 13, 3966, 11, 10194, 13, 1406, 612, 338, 50987]",0.0,-0.14483820308338513,1.4228571428571428,0.0029602425638586283
631,631,452024,4535.28,4543.679999999999, people like fun. Yes. So there's some presumably heuristic of what defines a momentum,"[51115, 661, 588, 1257, 13, 3363, 13, 1406, 612, 338, 617, 14572, 339, 27915, 286, 644, 15738, 257, 12858, 51535]",0.0,-0.14483820308338513,1.4228571428571428,0.0029602425638586283
632,632,454368,4544.56,4550.0," of saying, you know, you seem to be working adding two integers, not two generic types.","[50407, 286, 2282, 11, 345, 760, 11, 345, 1283, 284, 307, 1762, 4375, 734, 37014, 11, 407, 734, 14276, 3858, 13, 50679]",0.0,-0.13316511071246603,1.6713615023474178,0.000495176063850522
633,633,454368,4550.88,4556.400000000001," So how do you figure out that heuristic? I think that the heuristic is actually,","[50723, 1406, 703, 466, 345, 3785, 503, 326, 339, 27915, 30, 314, 892, 326, 262, 339, 27915, 318, 1682, 11, 50999]",0.0,-0.13316511071246603,1.6713615023474178,0.000495176063850522
634,634,454368,4557.12,4561.12, we assume that the weather tomorrow is going to be the same as the weather today.,"[51035, 356, 7048, 326, 262, 6193, 9439, 318, 1016, 284, 307, 262, 976, 355, 262, 6193, 1909, 13, 51235]",0.0,-0.13316511071246603,1.6713615023474178,0.000495176063850522
635,635,454368,4561.12,4563.200000000001, So you don't need two days of the weather? No.,"[51235, 1406, 345, 836, 470, 761, 734, 1528, 286, 262, 6193, 30, 1400, 13, 51339]",0.0,-0.13316511071246603,1.6713615023474178,0.000495176063850522
636,636,454368,4565.04,4569.84, That is already so much better than than getting randomly.,"[51431, 1320, 318, 1541, 523, 881, 1365, 621, 621, 1972, 15456, 13, 51671]",0.0,-0.13316511071246603,1.6713615023474178,0.000495176063850522
637,637,456984,4570.400000000001,4578.08," So how do you find this idea? Hey, I wonder if instead of adding two generic types,","[50391, 1406, 703, 466, 345, 1064, 428, 2126, 30, 14690, 11, 314, 4240, 611, 2427, 286, 4375, 734, 14276, 3858, 11, 50775]",0.0,-0.0803954031156457,1.6622222222222223,0.0017424417892470956
638,638,456984,4578.88,4585.12, we start assuming that the weather tomorrow is the same as the weather today. Where do you,"[50815, 356, 923, 13148, 326, 262, 6193, 9439, 318, 262, 976, 355, 262, 6193, 1909, 13, 6350, 466, 345, 51127]",0.0,-0.0803954031156457,1.6622222222222223,0.0017424417892470956
639,639,456984,4585.12,4592.0," find the idea for that? Because that ultimately, for you to do that, you have to kind of understand","[51127, 1064, 262, 2126, 329, 326, 30, 4362, 326, 6165, 11, 329, 345, 284, 466, 326, 11, 345, 423, 284, 1611, 286, 1833, 51471]",0.0,-0.0803954031156457,1.6622222222222223,0.0017424417892470956
640,640,456984,4592.0,4597.6," how people are using the language, right? Python is not the first language to do a thing like this.","[51471, 703, 661, 389, 1262, 262, 3303, 11, 826, 30, 11361, 318, 407, 262, 717, 3303, 284, 466, 257, 1517, 588, 428, 13, 51751]",0.0,-0.0803954031156457,1.6622222222222223,0.0017424417892470956
641,641,459760,4598.08,4605.4400000000005," This is a fairly well known trick, especially from other interpreted languages that had reason to","[50387, 770, 318, 257, 6547, 880, 1900, 6908, 11, 2592, 422, 584, 16173, 8950, 326, 550, 1738, 284, 50755]",0.0,-0.12924860344558467,1.3958333333333333,0.0002267679519718513
642,642,459760,4605.4400000000005,4611.4400000000005," be sped up. We occasionally look at papers about HHVM, which is for Facebook's","[50755, 307, 40424, 510, 13, 775, 10491, 804, 379, 9473, 546, 47138, 15996, 11, 543, 318, 329, 3203, 338, 51055]",0.0,-0.12924860344558467,1.3958333333333333,0.0002267679519718513
643,643,459760,4614.08,4622.72, efficient compiler for PHP. There are tricks known from the JVM and sometimes it just comes,"[51187, 6942, 17050, 329, 19599, 13, 1318, 389, 15910, 1900, 422, 262, 449, 15996, 290, 3360, 340, 655, 2058, 51619]",0.0,-0.12924860344558467,1.3958333333333333,0.0002267679519718513
644,644,462272,4622.8,4628.4800000000005," from academia. So the trick here is that the type itself doesn't, the variable doesn't know what type","[50367, 422, 34326, 13, 1406, 262, 6908, 994, 318, 326, 262, 2099, 2346, 1595, 470, 11, 262, 7885, 1595, 470, 760, 644, 2099, 50651]",0.0,-0.1944523286283686,1.6902654867256637,0.0023836686741560698
645,645,462272,4628.4800000000005,4636.240000000001, it is. So this is not a statically typed language where you can get that sort to have a shortcut,"[50651, 340, 318, 13, 1406, 428, 318, 407, 257, 47746, 25683, 3303, 810, 345, 460, 651, 326, 3297, 284, 423, 257, 29401, 51039]",0.0,-0.1944523286283686,1.6902654867256637,0.0023836686741560698
646,646,462272,4636.240000000001,4643.280000000001, to saying it's in. This is a trick that is especially important for interpreted languages,"[51039, 284, 2282, 340, 338, 287, 13, 770, 318, 257, 6908, 326, 318, 2592, 1593, 329, 16173, 8950, 51391]",0.0,-0.1944523286283686,1.6902654867256637,0.0023836686741560698
647,647,462272,4643.280000000001,4652.64," with dynamic typing because if the compiler could read in the source, these x and y that were","[51391, 351, 8925, 19720, 780, 611, 262, 17050, 714, 1100, 287, 262, 2723, 11, 777, 2124, 290, 331, 326, 547, 51859]",0.0,-0.1944523286283686,1.6902654867256637,0.0023836686741560698
648,648,465264,4652.72,4658.08," adding our integers, the compiler can just insert a single add machine code that","[50367, 4375, 674, 37014, 11, 262, 17050, 460, 655, 7550, 257, 2060, 751, 4572, 2438, 326, 50635]",0.0,-0.13245520720610748,1.6376811594202898,0.00028979196213185787
649,649,465264,4659.280000000001,4666.160000000001, hardware machine instruction that exists on every CPU and ditto for floats.,"[50695, 6890, 4572, 12064, 326, 7160, 319, 790, 9135, 290, 288, 37606, 329, 36016, 13, 51039]",0.0,-0.13245520720610748,1.6376811594202898,0.00028979196213185787
650,650,465264,4667.52,4673.92," But because in Python, you don't generally declare the types of your variables. You","[51107, 887, 780, 287, 11361, 11, 345, 836, 470, 4143, 13627, 262, 3858, 286, 534, 9633, 13, 921, 51427]",0.0,-0.13245520720610748,1.6376811594202898,0.00028979196213185787
651,651,465264,4673.92,4679.52, don't even declare the existence of your variables. They just spring into existence when you first,"[51427, 836, 470, 772, 13627, 262, 6224, 286, 534, 9633, 13, 1119, 655, 6076, 656, 6224, 618, 345, 717, 51707]",0.0,-0.13245520720610748,1.6376811594202898,0.00028979196213185787
652,652,467952,4679.6,4686.72," assign them, which is really cool and helps those beginners because there's less bookkeeping","[50367, 8333, 606, 11, 543, 318, 1107, 3608, 290, 5419, 883, 31729, 780, 612, 338, 1342, 1492, 19934, 50723]",0.0,-0.15371505797855436,1.5777777777777777,0.0005232634139247239
653,653,467952,4686.72,4693.280000000001, they have to learn how to do before they can start playing around with code. But it makes the,"[50723, 484, 423, 284, 2193, 703, 284, 466, 878, 484, 460, 923, 2712, 1088, 351, 2438, 13, 887, 340, 1838, 262, 51051]",0.0,-0.15371505797855436,1.5777777777777777,0.0005232634139247239
654,654,467952,4694.64,4703.92, interpretation of the code less efficient. And so we're sort of trying to make the interpretation,"[51119, 10794, 286, 262, 2438, 1342, 6942, 13, 843, 523, 356, 821, 3297, 286, 2111, 284, 787, 262, 10794, 51583]",0.0,-0.15371505797855436,1.5777777777777777,0.0005232634139247239
655,655,470392,4704.72,4711.92, more efficient without losing the super dynamic nature of the language. That's always the challenge.,"[50403, 517, 6942, 1231, 6078, 262, 2208, 8925, 3450, 286, 262, 3303, 13, 1320, 338, 1464, 262, 4427, 13, 50763]",0.0,-0.1248810256736866,1.4782608695652173,0.00016477477038279176
656,656,470392,4711.92,4721.84," 2.5 got the PEP 484 type hints. What is type hinting and is it used by the interpreter,","[50763, 362, 13, 20, 1392, 262, 350, 8905, 4764, 19, 2099, 20269, 13, 1867, 318, 2099, 9254, 278, 290, 318, 340, 973, 416, 262, 28846, 11, 51259]",0.0,-0.1248810256736866,1.4782608695652173,0.00016477477038279176
657,657,470392,4721.84,4727.84, the hints or is it just syntactic sugar? So the type hints is an optional mechanism,"[51259, 262, 20269, 393, 318, 340, 655, 7419, 12009, 7543, 30, 1406, 262, 2099, 20269, 318, 281, 11902, 9030, 51559]",0.0,-0.1248810256736866,1.4782608695652173,0.00016477477038279176
658,658,472784,4728.56,4736.08, that people can use. And it's especially popular with sort of larger companies that have very,"[50399, 326, 661, 460, 779, 13, 843, 340, 338, 2592, 2968, 351, 3297, 286, 4025, 2706, 326, 423, 845, 50775]",0.0,-0.1302870750427246,1.5899581589958158,0.0003256360359955579
659,659,472784,4736.08,4741.2, large code bases written in Python. Do you think of it as almost like documentation saying these,"[50775, 1588, 2438, 12536, 3194, 287, 11361, 13, 2141, 345, 892, 286, 340, 355, 2048, 588, 10314, 2282, 777, 51031]",0.0,-0.1302870750427246,1.5899581589958158,0.0003256360359955579
660,660,472784,4741.2,4748.88," two variables are this type? It is more than documentation. I mean, so it is a sub-language","[51031, 734, 9633, 389, 428, 2099, 30, 632, 318, 517, 621, 10314, 13, 314, 1612, 11, 523, 340, 318, 257, 850, 12, 16129, 51415]",0.0,-0.1302870750427246,1.5899581589958158,0.0003256360359955579
661,661,472784,4748.88,4756.08, of Python where you can express the types of variables. So here's a variable and it's an integer.,"[51415, 286, 11361, 810, 345, 460, 4911, 262, 3858, 286, 9633, 13, 1406, 994, 338, 257, 7885, 290, 340, 338, 281, 18253, 13, 51775]",0.0,-0.1302870750427246,1.5899581589958158,0.0003256360359955579
662,662,475608,4756.08,4761.36, And here's an argument to this function and it's a string. And here is a function that returns,"[50363, 843, 994, 338, 281, 4578, 284, 428, 2163, 290, 340, 338, 257, 4731, 13, 843, 994, 318, 257, 2163, 326, 5860, 50627]",0.0,-0.0925400568091351,1.7333333333333334,0.0006131597328931093
663,663,475608,4761.36,4767.84," a list of strings. But that's not checked when you run the code. But exactly, there is a separate","[50627, 257, 1351, 286, 13042, 13, 887, 326, 338, 407, 10667, 618, 345, 1057, 262, 2438, 13, 887, 3446, 11, 612, 318, 257, 4553, 50951]",0.0,-0.0925400568091351,1.7333333333333334,0.0006131597328931093
664,664,475608,4767.84,4773.84, piece of software called a static type checker that reads all your source code without executing,"[50951, 3704, 286, 3788, 1444, 257, 9037, 2099, 2198, 263, 326, 9743, 477, 534, 2723, 2438, 1231, 23710, 51251]",0.0,-0.0925400568091351,1.7333333333333334,0.0006131597328931093
665,665,475608,4773.84,4783.04, it. And things long and hard about what it looks from just reading the code that code might be doing,"[51251, 340, 13, 843, 1243, 890, 290, 1327, 546, 644, 340, 3073, 422, 655, 3555, 262, 2438, 326, 2438, 1244, 307, 1804, 51711]",0.0,-0.0925400568091351,1.7333333333333334,0.0006131597328931093
666,666,478304,4784.0,4791.5199999999995, and double checks if that makes sense if you take the types as annotated into account.,"[50411, 290, 4274, 8794, 611, 326, 1838, 2565, 611, 345, 1011, 262, 3858, 355, 24708, 515, 656, 1848, 13, 50787]",0.0,-0.1444907777764824,1.5720524017467248,0.00030658405739814043
667,667,478304,4791.5199999999995,4795.68," So this is something you're supposed to run as you develop. It's like a linter. Yeah,","[50787, 1406, 428, 318, 1223, 345, 821, 4385, 284, 1057, 355, 345, 1205, 13, 632, 338, 588, 257, 300, 3849, 13, 9425, 11, 50995]",0.0,-0.1444907777764824,1.5720524017467248,0.00030658405739814043
668,668,478304,4795.68,4802.56, lint. That's definitely a development tool. But the type annotations currently are not used for,"[50995, 300, 600, 13, 1320, 338, 4753, 257, 2478, 2891, 13, 887, 262, 2099, 37647, 3058, 389, 407, 973, 329, 51339]",0.0,-0.1444907777764824,1.5720524017467248,0.00030658405739814043
669,669,478304,4804.08,4810.88, speeding up the interpreter. And there are a number of reasons. Many people don't use them.,"[51415, 26347, 510, 262, 28846, 13, 843, 612, 389, 257, 1271, 286, 3840, 13, 4650, 661, 836, 470, 779, 606, 13, 51755]",0.0,-0.1444907777764824,1.5720524017467248,0.00030658405739814043
670,670,481088,4811.68,4819.4400000000005," Even when they do use them, they sometimes contain lies where the static type checker","[50403, 3412, 618, 484, 466, 779, 606, 11, 484, 3360, 3994, 7363, 810, 262, 9037, 2099, 2198, 263, 50791]",0.0,-0.10119945283920045,1.532967032967033,7.282911246875301e-05
671,671,481088,4820.0,4827.4400000000005," says everything's fine. I cannot prove that this integer is ever not an integer, but at runtime,","[50819, 1139, 2279, 338, 3734, 13, 314, 2314, 5879, 326, 428, 18253, 318, 1683, 407, 281, 18253, 11, 475, 379, 19124, 11, 51191]",0.0,-0.10119945283920045,1.532967032967033,7.282911246875301e-05
672,672,481088,4827.4400000000005,4836.64, somehow someone manages to violate that assumption. And the interpreter ends up doing just fine.,"[51191, 7599, 2130, 15314, 284, 16967, 326, 13196, 13, 843, 262, 28846, 5645, 510, 1804, 655, 3734, 13, 51651]",0.0,-0.10119945283920045,1.532967032967033,7.282911246875301e-05
673,673,483664,4836.72,4844.0," If we started enforcing type annotations in Python, many Python programs would no longer work.","[50367, 1002, 356, 2067, 26587, 2099, 37647, 287, 11361, 11, 867, 11361, 4056, 561, 645, 2392, 670, 13, 50731]",0.0,-0.09370152155558269,1.7047619047619047,0.002783769741654396
674,674,483664,4845.12,4849.280000000001, And some Python programs wouldn't even be possible because they're too dynamic.,"[50787, 843, 617, 11361, 4056, 3636, 470, 772, 307, 1744, 780, 484, 821, 1165, 8925, 13, 50995]",0.0,-0.09370152155558269,1.7047619047619047,0.002783769741654396
675,675,483664,4850.08,4856.8, And so we made the choice of not using the annotations. There is a possible future where,"[51035, 843, 523, 356, 925, 262, 3572, 286, 407, 1262, 262, 37647, 13, 1318, 318, 257, 1744, 2003, 810, 51371]",0.0,-0.09370152155558269,1.7047619047619047,0.002783769741654396
676,676,483664,4856.8,4866.160000000001," eventually three, four, five releases in the future, we could start using those annotations to","[51371, 4191, 1115, 11, 1440, 11, 1936, 10050, 287, 262, 2003, 11, 356, 714, 923, 1262, 883, 37647, 284, 51839]",0.0,-0.09370152155558269,1.7047619047619047,0.002783769741654396
677,677,486616,4866.24,4876.16," sort of provide hints because we can still say, well, the source code leads us to believe that","[50367, 3297, 286, 2148, 20269, 780, 356, 460, 991, 910, 11, 880, 11, 262, 2723, 2438, 5983, 514, 284, 1975, 326, 50863]",0.0,-0.15134912462376837,1.5862068965517242,0.00018487083434592932
678,678,486616,4876.16,4882.08, these x and y are both integers. And so we can generate an add integer instruction.,"[50863, 777, 2124, 290, 331, 389, 1111, 37014, 13, 843, 523, 356, 460, 7716, 281, 751, 18253, 12064, 13, 51159]",0.0,-0.15134912462376837,1.5862068965517242,0.00018487083434592932
679,679,486616,4883.2,4892.5599999999995," But we can still have a fallback that says, oh, if somehow the code at runtime provided something","[51215, 887, 356, 460, 991, 423, 257, 2121, 1891, 326, 1139, 11, 11752, 11, 611, 7599, 262, 2438, 379, 19124, 2810, 1223, 51683]",0.0,-0.15134912462376837,1.5862068965517242,0.00018487083434592932
680,680,489256,4892.56,4899.360000000001," else, maybe it provided two decimal numbers, we can still use that generic add operation","[50363, 2073, 11, 3863, 340, 2810, 734, 32465, 3146, 11, 356, 460, 991, 779, 326, 14276, 751, 4905, 50703]",0.0,-0.1156491888574807,1.5565217391304347,0.003990901634097099
681,681,489256,4899.360000000001,4905.360000000001, as a fallback. But we're not there. Is there currently a mechanism or do you see something like,"[50703, 355, 257, 2121, 1891, 13, 887, 356, 821, 407, 612, 13, 1148, 612, 3058, 257, 9030, 393, 466, 345, 766, 1223, 588, 51003]",0.0,-0.1156491888574807,1.5565217391304347,0.003990901634097099
682,682,489256,4905.360000000001,4913.68," that? We can almost add like an assert inside a function that says, please check that my type","[51003, 326, 30, 775, 460, 2048, 751, 588, 281, 6818, 2641, 257, 2163, 326, 1139, 11, 3387, 2198, 326, 616, 2099, 51419]",0.0,-0.1156491888574807,1.5565217391304347,0.003990901634097099
683,683,489256,4913.68,4920.4800000000005, hints are actually mapping to reality sort of like insert manual static typing.,"[51419, 20269, 389, 1682, 16855, 284, 3950, 3297, 286, 588, 7550, 10107, 9037, 19720, 13, 51759]",0.0,-0.1156491888574807,1.5565217391304347,0.003990901634097099
684,684,492048,4920.48,4925.28, There are third party libraries that are in that business.,"[50363, 1318, 389, 2368, 2151, 12782, 326, 389, 287, 326, 1597, 13, 50603]",0.0,-0.18482168515523276,1.6591928251121075,0.001783106243237853
685,685,492048,4925.28,4930.16, It's possible to do that kind of thing. It's possible for a third party library to take a hint,"[50603, 632, 338, 1744, 284, 466, 326, 1611, 286, 1517, 13, 632, 338, 1744, 329, 257, 2368, 2151, 5888, 284, 1011, 257, 9254, 50847]",0.0,-0.18482168515523276,1.6591928251121075,0.001783106243237853
686,686,492048,4931.28,4933.679999999999, and enforce it. It seems like a tricky thing.,"[50903, 290, 4605, 340, 13, 632, 2331, 588, 257, 17198, 1517, 13, 51023]",0.0,-0.18482168515523276,1.6591928251121075,0.001783106243237853
687,687,492048,4933.679999999999,4939.36," Well, what we actually do is, and this, I think this is a fairly unique feature in Python.","[51023, 3894, 11, 644, 356, 1682, 466, 318, 11, 290, 428, 11, 314, 892, 428, 318, 257, 6547, 3748, 3895, 287, 11361, 13, 51307]",0.0,-0.18482168515523276,1.6591928251121075,0.001783106243237853
688,688,492048,4940.0,4947.12," The type hints can be introspected at runtime. So while the program is running,","[51339, 383, 2099, 20269, 460, 307, 18951, 4443, 276, 379, 19124, 13, 1406, 981, 262, 1430, 318, 2491, 11, 51695]",0.0,-0.18482168515523276,1.6591928251121075,0.001783106243237853
689,689,494712,4947.2,4954.5599999999995," they mean Python is a very introspectable language. You can look at the variable and ask yourself,","[50367, 484, 1612, 11361, 318, 257, 845, 18951, 4443, 540, 3303, 13, 921, 460, 804, 379, 262, 7885, 290, 1265, 3511, 11, 50735]",0.0,-0.1428017020225525,1.8625592417061612,0.0003960634348914027
690,690,494712,4954.5599999999995,4961.84," what is the type of this variable? And if that variable happens to refer to a function,","[50735, 644, 318, 262, 2099, 286, 428, 7885, 30, 843, 611, 326, 7885, 4325, 284, 3522, 284, 257, 2163, 11, 51099]",0.0,-0.1428017020225525,1.8625592417061612,0.0003960634348914027
691,691,494712,4961.84,4968.16," you can ask, what are the arguments to the function? And nowadays, you can also ask,","[51099, 345, 460, 1265, 11, 644, 389, 262, 7159, 284, 262, 2163, 30, 843, 26760, 11, 345, 460, 635, 1265, 11, 51415]",0.0,-0.1428017020225525,1.8625592417061612,0.0003960634348914027
692,692,494712,4968.16,4970.72, what are the type annotations for the function?,"[51415, 644, 389, 262, 2099, 37647, 329, 262, 2163, 30, 51543]",0.0,-0.1428017020225525,1.8625592417061612,0.0003960634348914027
693,693,494712,4970.72,4975.599999999999, So the type annotations are there inside the variable as it's at runtime.,"[51543, 1406, 262, 2099, 37647, 389, 612, 2641, 262, 7885, 355, 340, 338, 379, 19124, 13, 51787]",0.0,-0.1428017020225525,1.8625592417061612,0.0003960634348914027
694,694,497560,4975.68,4980.64," They're mostly associated with the function object, not with each individual variable, but","[50367, 1119, 821, 4632, 3917, 351, 262, 2163, 2134, 11, 407, 351, 1123, 1981, 7885, 11, 475, 50615]",0.0,-0.09252957452701617,1.5467289719626167,0.0003739315434359014
695,695,497560,4982.08,4985.84, you can sort of map from the arguments to the variables.,"[50687, 345, 460, 3297, 286, 3975, 422, 262, 7159, 284, 262, 9633, 13, 50875]",0.0,-0.09252957452701617,1.5467289719626167,0.0003739315434359014
696,696,497560,4985.84,4987.76, And that's what a third party library can help.,"[50875, 843, 326, 338, 644, 257, 2368, 2151, 5888, 460, 1037, 13, 50971]",0.0,-0.09252957452701617,1.5467289719626167,0.0003739315434359014
697,697,497560,4987.76,4992.72, Exactly. And the problem with that is that all that extra runtime type checking,"[50971, 36819, 13, 843, 262, 1917, 351, 326, 318, 326, 477, 326, 3131, 19124, 2099, 10627, 51219]",0.0,-0.09252957452701617,1.5467289719626167,0.0003739315434359014
698,698,497560,4994.400000000001,4997.6, is going to slow your code down instead of speed it up.,"[51303, 318, 1016, 284, 3105, 534, 2438, 866, 2427, 286, 2866, 340, 510, 13, 51463]",0.0,-0.09252957452701617,1.5467289719626167,0.0003739315434359014
699,699,499760,4997.6,5006.08, I think to reference this sales pitchy blog post that says 75% of developer time is spent,"[50363, 314, 892, 284, 4941, 428, 4200, 7078, 88, 4130, 1281, 326, 1139, 5441, 4, 286, 8517, 640, 318, 3377, 50787]",0.0,-0.12845746970471042,1.6176470588235294,0.0020049300510436296
700,700,499760,5006.08,5011.200000000001," on debugging, I would say that in some cases, that might be okay. It might be okay to pay the cost","[50787, 319, 28769, 11, 314, 561, 910, 326, 287, 617, 2663, 11, 326, 1244, 307, 8788, 13, 632, 1244, 307, 8788, 284, 1414, 262, 1575, 51043]",0.0,-0.12845746970471042,1.6176470588235294,0.0020049300510436296
701,701,499760,5011.200000000001,5015.280000000001," of performance for the catching of the types, the type errors.","[51043, 286, 2854, 329, 262, 16508, 286, 262, 3858, 11, 262, 2099, 8563, 13, 51247]",0.0,-0.12845746970471042,1.6176470588235294,0.0020049300510436296
702,702,499760,5016.08,5023.92," And in most cases, doing it statically before you ship your code to production","[51287, 843, 287, 749, 2663, 11, 1804, 340, 47746, 878, 345, 4074, 534, 2438, 284, 3227, 51679]",0.0,-0.12845746970471042,1.6176470588235294,0.0020049300510436296
703,703,502392,5024.88,5028.56, is more efficient than doing it at runtime piecemeal.,"[50411, 318, 517, 6942, 621, 1804, 340, 379, 19124, 3704, 28208, 13, 50595]",0.0,-0.32583434860427657,1.3544973544973544,0.0002487619349267334
704,704,502392,5029.92,5035.28, Can you tell me about MYPY MIPI project?,"[50663, 1680, 345, 1560, 502, 546, 337, 48232, 56, 337, 4061, 40, 1628, 30, 50931]",0.0,-0.32583434860427657,1.3544973544973544,0.0002487619349267334
705,705,502392,5036.4,5043.12," What is it? What's the mission? And in general, what is the future of static typing in Python?","[50987, 1867, 318, 340, 30, 1867, 338, 262, 4365, 30, 843, 287, 2276, 11, 644, 318, 262, 2003, 286, 9037, 19720, 287, 11361, 30, 51323]",0.0,-0.32583434860427657,1.3544973544973544,0.0002487619349267334
706,706,502392,5043.84,5050.8," Well, so MIPI was started by a Finnish developer, Yuka Leto Sello.","[51359, 3894, 11, 523, 337, 4061, 40, 373, 2067, 416, 257, 26838, 8517, 11, 575, 14852, 3914, 78, 311, 11109, 13, 51707]",0.0,-0.32583434860427657,1.3544973544973544,0.0002487619349267334
707,707,505080,5051.52,5055.6," So many cool things out of Finland, I gotta say, just that part of the world.","[50399, 1406, 867, 3608, 1243, 503, 286, 17837, 11, 314, 17753, 910, 11, 655, 326, 636, 286, 262, 995, 13, 50603]",0.0,-0.1553379354022798,1.4770642201834863,0.01063336618244648
708,708,505080,5055.6,5059.28," I guess people have nothing better to do in those long, cold winters.","[50603, 314, 4724, 661, 423, 2147, 1365, 284, 466, 287, 883, 890, 11, 4692, 45764, 13, 50787]",0.0,-0.1553379354022798,1.4770642201834863,0.01063336618244648
709,709,505080,5060.72,5065.360000000001," I don't know. I think Yuka lived in England when he invented that stuff, actually.","[50859, 314, 836, 470, 760, 13, 314, 892, 575, 14852, 5615, 287, 4492, 618, 339, 15646, 326, 3404, 11, 1682, 13, 51091]",0.0,-0.1553379354022798,1.4770642201834863,0.01063336618244648
710,710,505080,5065.360000000001,5073.92, But MYPY is the original static type checker for Python. And the type annotations that were,"[51091, 887, 337, 48232, 56, 318, 262, 2656, 9037, 2099, 2198, 263, 329, 11361, 13, 843, 262, 2099, 37647, 326, 547, 51519]",0.0,-0.1553379354022798,1.4770642201834863,0.01063336618244648
711,711,507392,5073.92,5082.88, introduced with PEP 484 were sort of developed together with the static type checker.,"[50363, 5495, 351, 350, 8905, 4764, 19, 547, 3297, 286, 4166, 1978, 351, 262, 9037, 2099, 2198, 263, 13, 50811]",0.0,-0.15706254541873932,1.3798882681564246,0.00435267947614193
712,712,507392,5083.4400000000005,5089.6," And in fact, Yuka had first invented a different syntax that wasn't quite compatible with Python.","[50839, 843, 287, 1109, 11, 575, 14852, 550, 717, 15646, 257, 1180, 15582, 326, 2492, 470, 2407, 11670, 351, 11361, 13, 51147]",0.0,-0.15706254541873932,1.3798882681564246,0.00435267947614193
713,713,507392,5090.64,5097.84," And Yuka and I met at a Python conference in, I think, in 2013.","[51199, 843, 575, 14852, 290, 314, 1138, 379, 257, 11361, 4495, 287, 11, 314, 892, 11, 287, 2211, 13, 51559]",0.0,-0.15706254541873932,1.3798882681564246,0.00435267947614193
714,714,509784,5098.72,5108.8, And we sort of came up with a compromise syntax that would not require any changes to Python.,"[50407, 843, 356, 3297, 286, 1625, 510, 351, 257, 13110, 15582, 326, 561, 407, 2421, 597, 2458, 284, 11361, 13, 50911]",0.0,-0.16840562555525038,1.508108108108108,0.003175823949277401
715,715,509784,5109.76,5115.6, And that would let MYPY sort of be an add-on static type checker for Python.,"[50959, 843, 326, 561, 1309, 337, 48232, 56, 3297, 286, 307, 281, 751, 12, 261, 9037, 2099, 2198, 263, 329, 11361, 13, 51251]",0.0,-0.16840562555525038,1.508108108108108,0.003175823949277401
716,716,509784,5115.6,5118.24," Just out of curiosity, it was like double colon or something.","[51251, 2329, 503, 286, 20136, 11, 340, 373, 588, 4274, 7633, 393, 1223, 13, 51383]",0.0,-0.16840562555525038,1.508108108108108,0.003175823949277401
717,717,509784,5118.24,5121.2, What was he proposing that would break Python?,"[51383, 1867, 373, 339, 24634, 326, 561, 2270, 11361, 30, 51531]",0.0,-0.16840562555525038,1.508108108108108,0.003175823949277401
718,718,512120,5121.28,5128.88, I think he was using Angular brackets for types like in C++ or Java generics.,"[50367, 314, 892, 339, 373, 1262, 28147, 28103, 329, 3858, 588, 287, 327, 4880, 393, 7349, 1152, 873, 13, 50747]",0.0,-0.19331213323081411,1.5388349514563107,0.002108627464622259
719,719,512120,5128.88,5134.08," Yeah, you can't use Angular brackets in Python. That would be too tricky for","[50747, 9425, 11, 345, 460, 470, 779, 28147, 28103, 287, 11361, 13, 1320, 561, 307, 1165, 17198, 329, 51007]",0.0,-0.19331213323081411,1.5388349514563107,0.002108627464622259
720,720,512120,5134.08,5141.76," time. Well, the key thing is that we already had a syntax for annotations.","[51007, 640, 13, 3894, 11, 262, 1994, 1517, 318, 326, 356, 1541, 550, 257, 15582, 329, 37647, 13, 51391]",0.0,-0.19331213323081411,1.5388349514563107,0.002108627464622259
721,721,512120,5141.76,5148.24, We just didn't know what to use them for yet. So type annotations were just the sort of,"[51391, 775, 655, 1422, 470, 760, 644, 284, 779, 606, 329, 1865, 13, 1406, 2099, 37647, 547, 655, 262, 3297, 286, 51715]",0.0,-0.19331213323081411,1.5388349514563107,0.002108627464622259
722,722,514824,5148.24,5153.2, most logical thing to use that existing dummy syntax for.,"[50363, 749, 12219, 1517, 284, 779, 326, 4683, 31548, 15582, 329, 13, 50611]",0.0,-0.14521682868569585,1.4378698224852071,0.0012531107058748603
723,723,514824,5154.719999999999,5163.599999999999, But there was no syntax for defining generics directly syntactically in the language.,"[50687, 887, 612, 373, 645, 15582, 329, 16215, 1152, 873, 3264, 7419, 529, 1146, 287, 262, 3303, 13, 51131]",0.0,-0.14521682868569585,1.4378698224852071,0.0012531107058748603
724,724,514824,5164.4,5174.16," MYPY literally meant my version of Python, where my refers to Yuka. He had a parser that translated","[51171, 337, 48232, 56, 7360, 4001, 616, 2196, 286, 11361, 11, 810, 616, 10229, 284, 575, 14852, 13, 679, 550, 257, 30751, 326, 14251, 51659]",0.0,-0.14521682868569585,1.4378698224852071,0.0012531107058748603
725,725,517416,5174.16,5184.639999999999, MYPY into Python by doing the type checks and then removing the annotations and all the,"[50363, 337, 48232, 56, 656, 11361, 416, 1804, 262, 2099, 8794, 290, 788, 10829, 262, 37647, 290, 477, 262, 50887]",0.0,-0.12147655734768162,1.5066079295154184,0.001031525549478829
726,726,517416,5184.639999999999,5192.0, Angular brackets from the positions where he was using them. But a preprocessor model,"[50887, 28147, 28103, 422, 262, 6116, 810, 339, 373, 1262, 606, 13, 887, 257, 662, 41341, 2746, 51255]",0.0,-0.12147655734768162,1.5066079295154184,0.001031525549478829
727,727,517416,5192.0,5197.12, doesn't work very well with the typical workflow of Python development projects.,"[51255, 1595, 470, 670, 845, 880, 351, 262, 7226, 30798, 286, 11361, 2478, 4493, 13, 51511]",0.0,-0.12147655734768162,1.5066079295154184,0.001031525549478829
728,728,517416,5197.92,5202.32," That's funny. I mean, that could have been another major split if it became successful.","[51551, 1320, 338, 8258, 13, 314, 1612, 11, 326, 714, 423, 587, 1194, 1688, 6626, 611, 340, 2627, 4388, 13, 51771]",0.0,-0.12147655734768162,1.5066079295154184,0.001031525549478829
729,729,520232,5202.96,5210.48," Like if you watch TypeScript versus JavaScript, it's like a split in the community over types,","[50395, 4525, 611, 345, 2342, 5994, 7391, 9051, 11933, 11, 340, 338, 588, 257, 6626, 287, 262, 2055, 625, 3858, 11, 50771]",0.0,-0.13007576200697157,1.6902654867256637,0.0011365561513230205
730,730,520232,5210.48,5216.32, right? That seems to be stabilizing now. It's not necessarily a split. There's certainly plenty of,"[50771, 826, 30, 1320, 2331, 284, 307, 14349, 2890, 783, 13, 632, 338, 407, 6646, 257, 6626, 13, 1318, 338, 3729, 6088, 286, 51063]",0.0,-0.13007576200697157,1.6902654867256637,0.0011365561513230205
731,731,520232,5216.32,5225.44," people who don't use TypeScript, but just use the original JavaScript notation. Just like there","[51063, 661, 508, 836, 470, 779, 5994, 7391, 11, 475, 655, 779, 262, 2656, 11933, 33274, 13, 2329, 588, 612, 51519]",0.0,-0.13007576200697157,1.6902654867256637,0.0011365561513230205
732,732,520232,5225.44,5230.16, are many people in the Python world who don't use type annotations and don't use static type,"[51519, 389, 867, 661, 287, 262, 11361, 995, 508, 836, 470, 779, 2099, 37647, 290, 836, 470, 779, 9037, 2099, 51755]",0.0,-0.13007576200697157,1.6902654867256637,0.0011365561513230205
733,733,523016,5230.16,5235.92," checkers. Now, you know, but there is a bit of a split between TypeScript and old school JavaScript,","[50363, 2198, 364, 13, 2735, 11, 345, 760, 11, 475, 612, 318, 257, 1643, 286, 257, 6626, 1022, 5994, 7391, 290, 1468, 1524, 11933, 11, 50651]",0.0,-0.1863345191592262,1.6702127659574468,0.003569315653294325
734,734,523016,5235.92,5243.12," EES, whatever. Well, in the JavaScript world, transpilers are sort of the standard way of working","[50651, 412, 1546, 11, 4232, 13, 3894, 11, 287, 262, 11933, 995, 11, 1007, 79, 34393, 389, 3297, 286, 262, 3210, 835, 286, 1762, 51011]",0.0,-0.1863345191592262,1.6702127659574468,0.003569315653294325
735,735,523016,5243.12,5248.16," anyway, which is why TypeScript being a transpiler itself is not a big deal.","[51011, 6949, 11, 543, 318, 1521, 5994, 7391, 852, 257, 1007, 79, 5329, 2346, 318, 407, 257, 1263, 1730, 13, 51263]",0.0,-0.1863345191592262,1.6702127659574468,0.003569315653294325
736,736,523016,5248.88,5254.48," And transpilers for people don't know. It's the exact thing you said with MYPY. It's the code,","[51299, 843, 1007, 79, 34393, 329, 661, 836, 470, 760, 13, 632, 338, 262, 2748, 1517, 345, 531, 351, 337, 48232, 56, 13, 632, 338, 262, 2438, 11, 51579]",0.0,-0.1863345191592262,1.6702127659574468,0.003569315653294325
737,737,523016,5254.48,5259.12, I guess you call pre-processing code that translates from one language to the other. And that's part,"[51579, 314, 4724, 345, 869, 662, 12, 36948, 2438, 326, 23677, 422, 530, 3303, 284, 262, 584, 13, 843, 326, 338, 636, 51811]",0.0,-0.1863345191592262,1.6702127659574468,0.003569315653294325
738,738,525912,5259.12,5265.44," of the culture, part of the workflow of the JavaScript community. So that's right. At the same time,","[50363, 286, 262, 3968, 11, 636, 286, 262, 30798, 286, 262, 11933, 2055, 13, 1406, 326, 338, 826, 13, 1629, 262, 976, 640, 11, 50679]",0.0,-0.10291371712317833,1.5921787709497206,0.00029605001327581704
739,739,525912,5266.24,5272.0, an interesting development in the JavaScript slash TypeScript world at the moment is that,"[50719, 281, 3499, 2478, 287, 262, 11933, 24632, 5994, 7391, 995, 379, 262, 2589, 318, 326, 51007]",0.0,-0.10291371712317833,1.5921787709497206,0.00029605001327581704
740,740,525912,5272.96,5279.92, there is a proposal under consideration. It's only a stage one proposal that proposes to add a,"[51055, 612, 318, 257, 6961, 739, 9110, 13, 632, 338, 691, 257, 3800, 530, 6961, 326, 26017, 284, 751, 257, 51403]",0.0,-0.10291371712317833,1.5921787709497206,0.00029605001327581704
741,741,527992,5279.92,5290.16," feature to JavaScript where just like Python, it will ignore certain syntax when running the","[50363, 3895, 284, 11933, 810, 655, 588, 11361, 11, 340, 481, 8856, 1728, 15582, 618, 2491, 262, 50875]",0.0,-0.1592794954776764,1.5513513513513513,0.00368596357293427
742,742,527992,5290.16,5299.12, JavaScript code. And what it ignores is more or less a superset of the TypeScript annotations syntax.,"[50875, 11933, 2438, 13, 843, 644, 340, 24245, 318, 517, 393, 1342, 257, 22754, 316, 286, 262, 5994, 7391, 37647, 15582, 13, 51323]",0.0,-0.1592794954776764,1.5513513513513513,0.00368596357293427
743,743,527992,5300.72,5307.2," Interesting. So that would mean that eventually, if you wanted to, you could take TypeScript","[51403, 43580, 13, 1406, 326, 561, 1612, 326, 4191, 11, 611, 345, 2227, 284, 11, 345, 714, 1011, 5994, 7391, 51727]",0.0,-0.1592794954776764,1.5513513513513513,0.00368596357293427
744,744,530720,5307.679999999999,5314.08, and you could shove it directly into a JavaScript interpreter without,"[50387, 290, 345, 714, 38332, 340, 3264, 656, 257, 11933, 28846, 1231, 50707]",0.0,-0.1348392837925961,1.6666666666666667,0.00036522847949527204
745,745,530720,5314.08,5319.84," translation. The interesting thing in the JavaScript world, at least the web browser world,","[50707, 11059, 13, 383, 3499, 1517, 287, 262, 11933, 995, 11, 379, 1551, 262, 3992, 6444, 995, 11, 50995]",0.0,-0.1348392837925961,1.6666666666666667,0.00036522847949527204
746,746,530720,5320.48,5328.24, the web browsers have changed how they deploy and they sort of update their JavaScript engines,"[51027, 262, 3992, 22616, 423, 3421, 703, 484, 6061, 290, 484, 3297, 286, 4296, 511, 11933, 11874, 51415]",0.0,-0.1348392837925961,1.6666666666666667,0.00036522847949527204
747,747,530720,5329.28,5335.5199999999995, much more quickly than they used to in the early days. And so there's much less of a need for,"[51467, 881, 517, 2952, 621, 484, 973, 284, 287, 262, 1903, 1528, 13, 843, 523, 612, 338, 881, 1342, 286, 257, 761, 329, 51779]",0.0,-0.1348392837925961,1.6666666666666667,0.00036522847949527204
748,748,533552,5336.4800000000005,5343.92," translation in JavaScript itself, because most browsers just support the most recent version","[50411, 11059, 287, 11933, 2346, 11, 780, 749, 22616, 655, 1104, 262, 749, 2274, 2196, 50783]",0.0,-0.16278396953235974,1.6327683615819208,7.445002120221034e-05
749,749,533552,5343.92,5350.64," of ECMAScript. Just in a tangent of a tangent, do you see if you will recommend somebody use a","[50783, 286, 13182, 31180, 6519, 13, 2329, 287, 257, 13875, 298, 286, 257, 13875, 298, 11, 466, 345, 766, 611, 345, 481, 4313, 8276, 779, 257, 51119]",0.0,-0.16278396953235974,1.6327683615819208,7.445002120221034e-05
750,750,533552,5350.64,5357.68," thing, would you recommend TypeScript or JavaScript? I would recommend TypeScript just because of the","[51119, 1517, 11, 561, 345, 4313, 5994, 7391, 393, 11933, 30, 314, 561, 4313, 5994, 7391, 655, 780, 286, 262, 51471]",0.0,-0.16278396953235974,1.6327683615819208,7.445002120221034e-05
751,751,535768,5357.68,5364.56, strictness of the typing. It's an enormously helpful extra tool that helps you sort of,"[50363, 7646, 1108, 286, 262, 19720, 13, 632, 338, 281, 36005, 7613, 3131, 2891, 326, 5419, 345, 3297, 286, 50707]",0.0,-0.09204954653978348,1.6918238993710693,0.0032659934367984533
752,752,535768,5366.88,5375.6," keep your head straight about what your code is actually doing. I mean, it helps with editing","[50823, 1394, 534, 1182, 3892, 546, 644, 534, 2438, 318, 1682, 1804, 13, 314, 1612, 11, 340, 5419, 351, 12857, 51259]",0.0,-0.09204954653978348,1.6918238993710693,0.0032659934367984533
753,753,535768,5375.6,5383.84," your code, it helps with ensuring that your code is not too incorrect. And it's actually","[51259, 534, 2438, 11, 340, 5419, 351, 13359, 326, 534, 2438, 318, 407, 1165, 11491, 13, 843, 340, 338, 1682, 51671]",0.0,-0.09204954653978348,1.6918238993710693,0.0032659934367984533
754,754,538384,5384.72,5391.52, quite compatible with JavaScript. Never mind this syntactic sort of hack that is still years in,"[50407, 2407, 11670, 351, 11933, 13, 7236, 2000, 428, 7419, 12009, 3297, 286, 8156, 326, 318, 991, 812, 287, 50747]",0.0,-0.12901483882557263,1.5508021390374331,0.0004051072464790195
755,755,538384,5391.52,5398.64, the future. But any library that is written in pure JavaScript can still be used from TypeScript,"[50747, 262, 2003, 13, 887, 597, 5888, 326, 318, 3194, 287, 5899, 11933, 460, 991, 307, 973, 422, 5994, 7391, 51103]",0.0,-0.12901483882557263,1.5508021390374331,0.0004051072464790195
756,756,538384,5398.64,5405.92," programs. And also the other way around, you can write a library in TypeScript and then export it","[51103, 4056, 13, 843, 635, 262, 584, 835, 1088, 11, 345, 460, 3551, 257, 5888, 287, 5994, 7391, 290, 788, 10784, 340, 51467]",0.0,-0.12901483882557263,1.5508021390374331,0.0004051072464790195
757,757,540592,5406.08,5414.32, in a form that is totally consumable by JavaScript. That sort of compatibility is sort of the key,"[50371, 287, 257, 1296, 326, 318, 6635, 2784, 540, 416, 11933, 13, 1320, 3297, 286, 17764, 318, 3297, 286, 262, 1994, 50783]",0.0,-0.13375348630158798,1.6192468619246863,0.009973029606044292
758,758,540592,5414.32,5420.8," to the success of TypeScript. Yeah, just to look at it, it's almost like a biological system that's","[50783, 284, 262, 1943, 286, 5994, 7391, 13, 9425, 11, 655, 284, 804, 379, 340, 11, 340, 338, 2048, 588, 257, 10685, 1080, 326, 338, 51107]",0.0,-0.13375348630158798,1.6192468619246863,0.009973029606044292
759,759,540592,5420.8,5425.84," evolving. It's fascinating to see JavaScript of all the way it does. Well, maybe we should consider","[51107, 21568, 13, 632, 338, 13899, 284, 766, 11933, 286, 477, 262, 835, 340, 857, 13, 3894, 11, 3863, 356, 815, 2074, 51359]",0.0,-0.13375348630158798,1.6192468619246863,0.009973029606044292
760,760,540592,5425.84,5432.0," that biological systems are just engineering systems too, right? Yes. Just very advanced.","[51359, 326, 10685, 3341, 389, 655, 8705, 3341, 1165, 11, 826, 30, 3363, 13, 2329, 845, 6190, 13, 51667]",0.0,-0.13375348630158798,1.6192468619246863,0.009973029606044292
761,761,543200,5432.88,5440.64, With more history. But it's almost like the most visceral in the JavaScript world because,"[50407, 2080, 517, 2106, 13, 887, 340, 338, 2048, 588, 262, 749, 38259, 287, 262, 11933, 995, 780, 50795]",0.0,-0.0937107064750757,1.6508620689655173,0.0029314435087144375
762,762,543200,5440.64,5448.8, there's just so much code written in JavaScript that for its history was messy. If you talk about,"[50795, 612, 338, 655, 523, 881, 2438, 3194, 287, 11933, 326, 329, 663, 2106, 373, 24097, 13, 1002, 345, 1561, 546, 51203]",0.0,-0.0937107064750757,1.6508620689655173,0.0029314435087144375
763,763,543200,5448.8,5455.28," bugs per line of code, I just feel like JavaScript eats the cake or whatever the terminology is.","[51203, 11316, 583, 1627, 286, 2438, 11, 314, 655, 1254, 588, 11933, 25365, 262, 12187, 393, 4232, 262, 29191, 318, 13, 51527]",0.0,-0.0937107064750757,1.6508620689655173,0.0029314435087144375
764,764,543200,5455.28,5460.88," It beats Python by a lot in terms of the number of bugs, meaning like way more bugs in JavaScript.","[51527, 632, 17825, 11361, 416, 257, 1256, 287, 2846, 286, 262, 1271, 286, 11316, 11, 3616, 588, 835, 517, 11316, 287, 11933, 13, 51807]",0.0,-0.0937107064750757,1.6508620689655173,0.0029314435087144375
765,765,546088,5461.76,5467.92, And then obviously the browsers are developing. There's so much active development. It feels a,"[50407, 843, 788, 6189, 262, 22616, 389, 5922, 13, 1318, 338, 523, 881, 4075, 2478, 13, 632, 5300, 257, 50715]",0.0,-0.19357355833053588,1.6051502145922747,0.0013634583447128534
766,766,546088,5467.92,5473.52," lot more like evolution, where a bunch of stuff is born and dies and there's experimentation","[50715, 1256, 517, 588, 6954, 11, 810, 257, 7684, 286, 3404, 318, 4642, 290, 10564, 290, 612, 338, 29315, 50995]",0.0,-0.19357355833053588,1.6051502145922747,0.0013634583447128534
767,767,546088,5474.32,5481.84, debates versus Python is more all that stuff is happening. But there's just a longer history of,"[51035, 15389, 9051, 11361, 318, 517, 477, 326, 3404, 318, 5836, 13, 887, 612, 338, 655, 257, 2392, 2106, 286, 51411]",0.0,-0.19357355833053588,1.6051502145922747,0.0013634583447128534
768,768,546088,5481.84,5488.32, stable working giant software systems written in Python versus JavaScript is just a giant.,"[51411, 8245, 1762, 6175, 3788, 3341, 3194, 287, 11361, 9051, 11933, 318, 655, 257, 6175, 13, 51735]",0.0,-0.19357355833053588,1.6051502145922747,0.0013634583447128534
769,769,548832,5488.96,5495.44," Beautiful. I would say mess of code. It's very different culture. And to some extent,","[50395, 23762, 13, 314, 561, 910, 2085, 286, 2438, 13, 632, 338, 845, 1180, 3968, 13, 843, 284, 617, 6287, 11, 50719]",0.0,-0.14114979774721206,1.5561797752808988,0.0014866798883304
770,770,548832,5495.44,5501.44," differences in culture are random, but to some extent, the differences have to do with the environment.","[50719, 5400, 287, 3968, 389, 4738, 11, 475, 284, 617, 6287, 11, 262, 5400, 423, 284, 466, 351, 262, 2858, 13, 51019]",0.0,-0.14114979774721206,1.5561797752808988,0.0014866798883304
771,771,548832,5503.36,5513.36," And the fact that JavaScript is primarily the language for developing web applications,","[51115, 843, 262, 1109, 326, 11933, 318, 7525, 262, 3303, 329, 5922, 3992, 5479, 11, 51615]",0.0,-0.14114979774721206,1.5561797752808988,0.0014866798883304
772,772,551336,5513.36,5520.16, especially the client side. And the fact that it's basically the only language for developing,"[50363, 2592, 262, 5456, 1735, 13, 843, 262, 1109, 326, 340, 338, 6209, 262, 691, 3303, 329, 5922, 50703]",0.0,-0.1199080228805542,1.7181818181818183,0.0017971521010622382
773,773,551336,5520.16,5527.759999999999, web applications makes that community sort of just have a different nature than the community of,"[50703, 3992, 5479, 1838, 326, 2055, 3297, 286, 655, 423, 257, 1180, 3450, 621, 262, 2055, 286, 51083]",0.0,-0.1199080228805542,1.7181818181818183,0.0017971521010622382
774,774,551336,5527.759999999999,5536.719999999999, other languages. Plus the graphical component. And the fact that they're deploying it on all,"[51083, 584, 8950, 13, 8227, 262, 27831, 7515, 13, 843, 262, 1109, 326, 484, 821, 29682, 340, 319, 477, 51531]",0.0,-0.1199080228805542,1.7181818181818183,0.0017971521010622382
775,775,551336,5536.719999999999,5542.08," kinds of shapes of screens and devices and all that kind of stuff, it just creates a beautiful","[51531, 6982, 286, 15268, 286, 8947, 290, 4410, 290, 477, 326, 1611, 286, 3404, 11, 340, 655, 8075, 257, 4950, 51799]",0.0,-0.1199080228805542,1.7181818181818183,0.0017971521010622382
776,776,554208,5542.16,5548.64," chaos. Anyway, back to my pie. So what, okay, you met, you talked about syntax that could work.","[50367, 11918, 13, 21836, 11, 736, 284, 616, 2508, 13, 1406, 644, 11, 8788, 11, 345, 1138, 11, 345, 6619, 546, 15582, 326, 714, 670, 13, 50691]",0.0,-0.1577311080435048,1.5129310344827587,0.0015969756059348583
777,777,554208,5549.44,5553.68, Where does it currently stand? What's the future static typing in Python?,"[50731, 6350, 857, 340, 3058, 1302, 30, 1867, 338, 262, 2003, 9037, 19720, 287, 11361, 30, 50943]",0.0,-0.1577311080435048,1.5129310344827587,0.0015969756059348583
778,778,554208,5554.88,5562.4," It is still controversial, but it is much more accepted than when my pie and PEP 484 were young.","[51003, 632, 318, 991, 8381, 11, 475, 340, 318, 881, 517, 6292, 621, 618, 616, 2508, 290, 350, 8905, 4764, 19, 547, 1862, 13, 51379]",0.0,-0.1577311080435048,1.5129310344827587,0.0015969756059348583
779,779,554208,5563.28,5571.68, What's the connection between PEP 484 type hints and my pie? My pie was the original,"[51423, 1867, 338, 262, 4637, 1022, 350, 8905, 4764, 19, 2099, 20269, 290, 616, 2508, 30, 2011, 2508, 373, 262, 2656, 51843]",0.0,-0.1577311080435048,1.5129310344827587,0.0015969756059348583
780,780,557208,5572.08,5579.6, static type checker. So it might buy quickly evolved from you guys own variant of Python to,"[50363, 9037, 2099, 2198, 263, 13, 1406, 340, 1244, 2822, 2952, 12572, 422, 345, 3730, 898, 15304, 286, 11361, 284, 50739]",0.0,-0.21599580219813755,1.5026178010471205,0.0010925299720838666
781,781,557208,5580.32,5590.48, a static type checker for Python and sort of PEP 484. That was it like a very productive year where,"[50775, 257, 9037, 2099, 2198, 263, 329, 11361, 290, 3297, 286, 350, 8905, 4764, 19, 13, 1320, 373, 340, 588, 257, 845, 12973, 614, 810, 51283]",0.0,-0.21599580219813755,1.5026178010471205,0.0010925299720838666
782,782,557208,5590.48,5598.08," like many hundreds of messages were exchanged, debating the merits of every aspect of that PEP.","[51283, 588, 867, 5179, 286, 6218, 547, 22112, 11, 31174, 262, 21692, 286, 790, 4843, 286, 326, 350, 8905, 13, 51663]",0.0,-0.21599580219813755,1.5026178010471205,0.0010925299720838666
783,783,559808,5598.8,5606.0, And so my pie is a static type checker for Python. It is itself written in Python.,"[50399, 843, 523, 616, 2508, 318, 257, 9037, 2099, 2198, 263, 329, 11361, 13, 632, 318, 2346, 3194, 287, 11361, 13, 50759]",0.0,-0.20200228312658886,1.458100558659218,0.0004475256719160825
784,784,559808,5606.96,5614.96, Most additional static typing features that we introduced in the time since three six.,"[50807, 4042, 3224, 9037, 19720, 3033, 326, 356, 5495, 287, 262, 640, 1201, 1115, 2237, 13, 51207]",0.0,-0.20200228312658886,1.458100558659218,0.0004475256719160825
785,785,559808,5616.72,5625.12, We're also prototyped through my pie. My pie being an open source project with a very small,"[51295, 775, 821, 635, 41369, 276, 832, 616, 2508, 13, 2011, 2508, 852, 281, 1280, 2723, 1628, 351, 257, 845, 1402, 51715]",0.0,-0.20200228312658886,1.458100558659218,0.0004475256719160825
786,786,562512,5625.2,5632.64, number of maintainers was successful enough that people said this static type checking stuff for,"[50367, 1271, 286, 5529, 364, 373, 4388, 1576, 326, 661, 531, 428, 9037, 2099, 10627, 3404, 329, 50739]",0.0,-0.10723609016055152,1.4646464646464648,0.0001128595758927986
787,787,562512,5632.64,5641.76, Python is actually worth an investment for our company. But somehow they chose not to support,"[50739, 11361, 318, 1682, 2861, 281, 4896, 329, 674, 1664, 13, 887, 7599, 484, 7690, 407, 284, 1104, 51195]",0.0,-0.10723609016055152,1.4646464646464648,0.0001128595758927986
788,788,562512,5644.0,5652.96," making my pie faster, say, or adding new features to my pie, but both Google and Facebook and later","[51307, 1642, 616, 2508, 5443, 11, 910, 11, 393, 4375, 649, 3033, 284, 616, 2508, 11, 475, 1111, 3012, 290, 3203, 290, 1568, 51755]",0.0,-0.10723609016055152,1.4646464646464648,0.0001128595758927986
789,789,565296,5652.96,5659.36, Microsoft developed their own static type checker. I think Facebook was one of the first,"[50363, 5413, 4166, 511, 898, 9037, 2099, 2198, 263, 13, 314, 892, 3203, 373, 530, 286, 262, 717, 50683]",0.0,-0.10782113075256347,1.5919540229885059,0.0005323005025275052
790,790,565296,5660.24,5667.12, they decided that they wanted to use the same technology that they had successfully used for,"[50727, 484, 3066, 326, 484, 2227, 284, 779, 262, 976, 3037, 326, 484, 550, 7675, 973, 329, 51071]",0.0,-0.10782113075256347,1.5919540229885059,0.0005323005025275052
791,791,565296,5667.76,5677.36, HHVM because they sort of they had a bunch of compiler writers and sort of static type checking,"[51103, 47138, 15996, 780, 484, 3297, 286, 484, 550, 257, 7684, 286, 17050, 8786, 290, 3297, 286, 9037, 2099, 10627, 51583]",0.0,-0.10782113075256347,1.5919540229885059,0.0005323005025275052
792,792,567736,5677.44,5684.24, experts who had written the HHVM compiler and it was a big success within the company.,"[50367, 6154, 508, 550, 3194, 262, 47138, 15996, 17050, 290, 340, 373, 257, 1263, 1943, 1626, 262, 1664, 13, 50707]",0.0,-0.1228247430589464,1.5672268907563025,0.02145412005484104
793,793,567736,5684.96,5693.2," And they had done it in a certain way, sort of. They wrote a big, highly parallel application","[50743, 843, 484, 550, 1760, 340, 287, 257, 1728, 835, 11, 3297, 286, 13, 1119, 2630, 257, 1263, 11, 4047, 10730, 3586, 51155]",0.0,-0.1228247430589464,1.5672268907563025,0.02145412005484104
794,794,567736,5693.2,5699.599999999999," in an obscure language named OCaml, which is apparently mostly very good for writing static type","[51155, 287, 281, 18611, 3303, 3706, 440, 21701, 75, 11, 543, 318, 5729, 4632, 845, 922, 329, 3597, 9037, 2099, 51475]",0.0,-0.1228247430589464,1.5672268907563025,0.02145412005484104
795,795,567736,5699.599999999999,5706.799999999999, checkers. Interesting. I have a lot of questions about how to write a static type checker then.,"[51475, 2198, 364, 13, 43580, 13, 314, 423, 257, 1256, 286, 2683, 546, 703, 284, 3551, 257, 9037, 2099, 2198, 263, 788, 13, 51835]",0.0,-0.1228247430589464,1.5672268907563025,0.02145412005484104
796,796,570680,5706.8,5713.12, That's very confusing. Facebook wrote their version and they worked on it in secret for about,"[50363, 1320, 338, 845, 15337, 13, 3203, 2630, 511, 2196, 290, 484, 3111, 319, 340, 287, 3200, 329, 546, 50679]",0.0,-0.12948334784734816,1.5665236051502145,0.0005106260650791228
797,797,570680,5713.12,5720.320000000001, a year and then they came clean and went to open source. Google in the meantime was developing,"[50679, 257, 614, 290, 788, 484, 1625, 3424, 290, 1816, 284, 1280, 2723, 13, 3012, 287, 262, 14324, 373, 5922, 51039]",0.0,-0.12948334784734816,1.5665236051502145,0.0005106260650791228
798,798,570680,5720.320000000001,5727.92," something called pie type, which was mostly interesting because it, as you may have heard,","[51039, 1223, 1444, 2508, 2099, 11, 543, 373, 4632, 3499, 780, 340, 11, 355, 345, 743, 423, 2982, 11, 51419]",0.0,-0.12948334784734816,1.5665236051502145,0.0005106260650791228
799,799,570680,5727.92,5735.12, they have one gigantic monorepo. So all the code is checked into a single repository.,"[51419, 484, 423, 530, 24804, 937, 382, 7501, 13, 1406, 477, 262, 2438, 318, 10667, 656, 257, 2060, 16099, 13, 51779]",0.0,-0.12948334784734816,1.5665236051502145,0.0005106260650791228
800,800,573512,5735.76,5741.599999999999," Facebook has a different approach. So Facebook developed Pyre, which was written in OCaml,","[50395, 3203, 468, 257, 1180, 3164, 13, 1406, 3203, 4166, 9485, 260, 11, 543, 373, 3194, 287, 440, 21701, 75, 11, 50687]",0.0,-0.10491945630028135,1.5730337078651686,0.0005263100611045957
801,801,573512,5742.16,5749.84, which worked well with Facebook's development workflow. Google developed something they called,"[50715, 543, 3111, 880, 351, 3203, 338, 2478, 30798, 13, 3012, 4166, 1223, 484, 1444, 51099]",0.0,-0.10491945630028135,1.5730337078651686,0.0005263100611045957
802,802,573512,5749.84,5758.32," pie type, which was actually itself written in Python. And it was meant to sort of fit well in","[51099, 2508, 2099, 11, 543, 373, 1682, 2346, 3194, 287, 11361, 13, 843, 340, 373, 4001, 284, 3297, 286, 4197, 880, 287, 51523]",0.0,-0.10491945630028135,1.5730337078651686,0.0005263100611045957
803,803,575832,5759.12,5767.679999999999, their static type checking needs in Google's gigantic monorepo. So Google has one giant got it.,"[50403, 511, 9037, 2099, 10627, 2476, 287, 3012, 338, 24804, 937, 382, 7501, 13, 1406, 3012, 468, 530, 6175, 1392, 340, 13, 50831]",0.0,-0.19172836072517163,1.5975103734439835,0.000399015232687816
804,804,575832,5767.679999999999,5774.88," So just to clarify, the static type checker philosophically is a thing that's supposed to","[50831, 1406, 655, 284, 18282, 11, 262, 9037, 2099, 2198, 263, 6722, 1146, 318, 257, 1517, 326, 338, 4385, 284, 51191]",0.0,-0.19172836072517163,1.5975103734439835,0.000399015232687816
805,805,575832,5774.88,5780.4," exist outside of the language itself. And it's just a workflow, like a debugger for the programmers.","[51191, 2152, 2354, 286, 262, 3303, 2346, 13, 843, 340, 338, 655, 257, 30798, 11, 588, 257, 49518, 329, 262, 24867, 13, 51467]",0.0,-0.19172836072517163,1.5975103734439835,0.000399015232687816
806,806,575832,5780.4,5785.759999999999," It's a linter. For people who don't know a linter, maybe you can correct me. But it's a thing that","[51467, 632, 338, 257, 300, 3849, 13, 1114, 661, 508, 836, 470, 760, 257, 300, 3849, 11, 3863, 345, 460, 3376, 502, 13, 887, 340, 338, 257, 1517, 326, 51735]",0.0,-0.19172836072517163,1.5975103734439835,0.000399015232687816
807,807,578576,5785.84,5794.0, runs the code continuously pre processing to find issues based on style documentation.,"[50367, 4539, 262, 2438, 17282, 662, 7587, 284, 1064, 2428, 1912, 319, 3918, 10314, 13, 50775]",0.0,-0.1849064704699394,1.543778801843318,0.000538694963324815
808,808,578576,5794.64,5800.4800000000005," There's all kinds of linters, right? It can check that what usual things does a linter do? Maybe","[50807, 1318, 338, 477, 6982, 286, 9493, 1010, 11, 826, 30, 632, 460, 2198, 326, 644, 6678, 1243, 857, 257, 300, 3849, 466, 30, 6674, 51099]",0.0,-0.1849064704699394,1.543778801843318,0.000538694963324815
809,809,578576,5800.4800000000005,5804.96, check that you have too many characters in a single line.,"[51099, 2198, 326, 345, 423, 1165, 867, 3435, 287, 257, 2060, 1627, 13, 51323]",0.0,-0.1849064704699394,1.543778801843318,0.000538694963324815
810,810,578576,5805.76,5812.64," Linters often do static analysis where they try to point out things that are likely mistakes,","[51363, 406, 20193, 1690, 466, 9037, 3781, 810, 484, 1949, 284, 966, 503, 1243, 326, 389, 1884, 10135, 11, 51707]",0.0,-0.1849064704699394,1.543778801843318,0.000538694963324815
811,811,581264,5812.64,5819.6, but not incorrect according to the language specification. Like maybe you have a variable,"[50363, 475, 407, 11491, 1864, 284, 262, 3303, 20855, 13, 4525, 3863, 345, 423, 257, 7885, 50711]",0.0,-0.11013958765112836,1.7321428571428572,0.00040658717625774443
812,812,581264,5819.6,5828.72, that you never use for the compiler that is valid. You might be planning to use it in a future version,"[50711, 326, 345, 1239, 779, 329, 262, 17050, 326, 318, 4938, 13, 921, 1244, 307, 5410, 284, 779, 340, 287, 257, 2003, 2196, 51167]",0.0,-0.11013958765112836,1.7321428571428572,0.00040658717625774443
813,813,581264,5828.72,5834.160000000001," of the code. And the compiler might just optimize it out. But the compiler is not going to tell you,","[51167, 286, 262, 2438, 13, 843, 262, 17050, 1244, 655, 27183, 340, 503, 13, 887, 262, 17050, 318, 407, 1016, 284, 1560, 345, 11, 51439]",0.0,-0.11013958765112836,1.7321428571428572,0.00040658717625774443
814,814,581264,5834.160000000001,5840.4800000000005," hey, you're never using this variable. A linter will tell you that variable is not used. Maybe","[51439, 17207, 11, 345, 821, 1239, 1262, 428, 7885, 13, 317, 300, 3849, 481, 1560, 345, 326, 7885, 318, 407, 973, 13, 6674, 51755]",0.0,-0.11013958765112836,1.7321428571428572,0.00040658717625774443
815,815,584048,5841.28,5845.599999999999," there's a typo somewhere else where you're meant to use it, but you accidentally use","[50403, 612, 338, 257, 46517, 7382, 2073, 810, 345, 821, 4001, 284, 779, 340, 11, 475, 345, 14716, 779, 50619]",0.0,-0.14241927503103233,1.6350710900473933,8.992078801384196e-05
816,816,584048,5845.599999999999,5851.28, something else. Or there are a number of common scenarios. A linter is often,"[50619, 1223, 2073, 13, 1471, 612, 389, 257, 1271, 286, 2219, 13858, 13, 317, 300, 3849, 318, 1690, 50903]",0.0,-0.14241927503103233,1.6350710900473933,8.992078801384196e-05
817,817,584048,5853.2,5860.879999999999, a big collection of little heuristics where by looking at the combination of how your code is,"[50999, 257, 1263, 4947, 286, 1310, 339, 333, 3969, 810, 416, 2045, 379, 262, 6087, 286, 703, 534, 2438, 318, 51383]",0.0,-0.14241927503103233,1.6350710900473933,8.992078801384196e-05
818,818,584048,5860.879999999999,5869.679999999999," laid out, maybe how it's indented, maybe the comment structure, but also just things like","[51383, 8104, 503, 11, 3863, 703, 340, 338, 773, 4714, 11, 3863, 262, 2912, 4645, 11, 475, 635, 655, 1243, 588, 51823]",0.0,-0.14241927503103233,1.6350710900473933,8.992078801384196e-05
819,819,587048,5870.48,5877.599999999999," definition of names, use of names. It'll tell you likely things that are wrong. And in some cases,","[50363, 6770, 286, 3891, 11, 779, 286, 3891, 13, 632, 1183, 1560, 345, 1884, 1243, 326, 389, 2642, 13, 843, 287, 617, 2663, 11, 50719]",0.0,-0.16364512178632948,1.5077720207253886,0.0009540385799482465
820,820,587048,5877.599999999999,5885.04," linters are really style checkers. For Python, there are a number of linters that check things like,","[50719, 300, 20193, 389, 1107, 3918, 2198, 364, 13, 1114, 11361, 11, 612, 389, 257, 1271, 286, 300, 20193, 326, 2198, 1243, 588, 11, 51091]",0.0,-0.16364512178632948,1.5077720207253886,0.0009540385799482465
821,821,587048,5886.0,5893.759999999999, do you use the PEP8 recommended naming scheme for your functions and classes and variables?,"[51139, 466, 345, 779, 262, 350, 8905, 23, 7151, 19264, 7791, 329, 534, 5499, 290, 6097, 290, 9633, 30, 51527]",0.0,-0.16364512178632948,1.5077720207253886,0.0009540385799482465
822,822,589376,5894.24,5898.320000000001, Because classes start with an uppercase and the rest starts with a lower case.,"[50387, 4362, 6097, 923, 351, 281, 334, 39921, 589, 290, 262, 1334, 4940, 351, 257, 2793, 1339, 13, 50591]",0.0,-0.1439163088798523,1.8059701492537314,0.016073687002062798
823,823,589376,5899.52,5904.320000000001," There's like differences there. And so the linter can tell you, hey, you have a class that","[50651, 1318, 338, 588, 5400, 612, 13, 843, 523, 262, 300, 3849, 460, 1560, 345, 11, 17207, 11, 345, 423, 257, 1398, 326, 50891]",0.0,-0.1439163088798523,1.8059701492537314,0.016073687002062798
824,824,589376,5905.04,5911.76," whose first letter is not an uppercase letter. And that's just, I just find it annoying if I","[50927, 3025, 717, 3850, 318, 407, 281, 334, 39921, 589, 3850, 13, 843, 326, 338, 655, 11, 314, 655, 1064, 340, 15774, 611, 314, 51263]",0.0,-0.1439163088798523,1.8059701492537314,0.016073687002062798
825,825,589376,5911.76,5917.76, wanted that to be an uppercase letter. I would have typed an uppercase letter. But other people find,"[51263, 2227, 326, 284, 307, 281, 334, 39921, 589, 3850, 13, 314, 561, 423, 25683, 281, 334, 39921, 589, 3850, 13, 887, 584, 661, 1064, 51563]",0.0,-0.1439163088798523,1.8059701492537314,0.016073687002062798
826,826,591776,5917.76,5923.68," it very comforting that if the linter is no longer complaining about their code, that they","[50363, 340, 845, 34228, 326, 611, 262, 300, 3849, 318, 645, 2392, 18705, 546, 511, 2438, 11, 326, 484, 50659]",0.0,-0.09726090016572372,1.6367521367521367,0.0007293181261047721
827,827,591776,5923.68,5928.8, have followed all the style rules. Maybe it's a fast way for a new developer joining a team to,"[50659, 423, 3940, 477, 262, 3918, 3173, 13, 6674, 340, 338, 257, 3049, 835, 329, 257, 649, 8517, 9679, 257, 1074, 284, 50915]",0.0,-0.09726090016572372,1.6367521367521367,0.0007293181261047721
828,828,591776,5928.8,5934.400000000001," learn the style rules, right? Yeah, there's definitely that. But the best use of a linter is probably","[50915, 2193, 262, 3918, 3173, 11, 826, 30, 9425, 11, 612, 338, 4753, 326, 13, 887, 262, 1266, 779, 286, 257, 300, 3849, 318, 2192, 51195]",0.0,-0.09726090016572372,1.6367521367521367,0.0007293181261047721
829,829,591776,5935.6,5945.76," not so much to sort of enforce team uniformity, but to actually help developers catch bugs that","[51255, 407, 523, 881, 284, 3297, 286, 4605, 1074, 8187, 414, 11, 475, 284, 1682, 1037, 6505, 4929, 11316, 326, 51763]",0.0,-0.09726090016572372,1.6367521367521367,0.0007293181261047721
830,830,594576,5945.84,5953.84, the compilers for whatever reason don't catch. And there's lots of that in Python. But a static,"[50367, 262, 552, 34393, 329, 4232, 1738, 836, 470, 4929, 13, 843, 612, 338, 6041, 286, 326, 287, 11361, 13, 887, 257, 9037, 50767]",0.0,-0.14707392615240975,1.4923076923076923,0.0004732691159006208
831,831,594576,5953.84,5963.2," type checker focuses on a particular aspect of the linting, which, I mean, my party doesn't care how","[50767, 2099, 2198, 263, 13692, 319, 257, 1948, 4843, 286, 262, 300, 600, 278, 11, 543, 11, 314, 1612, 11, 616, 2151, 1595, 470, 1337, 703, 51235]",0.0,-0.14707392615240975,1.4923076923076923,0.0004732691159006208
832,832,594576,5963.2,5971.2, you name your classes and variables. But it is meticulous about when you say that there was an,"[51235, 345, 1438, 534, 6097, 290, 9633, 13, 887, 340, 318, 47628, 546, 618, 345, 910, 326, 612, 373, 281, 51635]",0.0,-0.14707392615240975,1.4923076923076923,0.0004732691159006208
833,833,597120,5971.2,5976.96," integer here, and you're passing a string there, it will tell you, hey, that string is not an","[50363, 18253, 994, 11, 290, 345, 821, 6427, 257, 4731, 612, 11, 340, 481, 1560, 345, 11, 17207, 11, 326, 4731, 318, 407, 281, 50651]",0.0,-0.12486588327508223,1.7924528301886793,0.015883851796388626
834,834,597120,5976.96,5982.96," integer. So some things wrong, either either you were incorrect when you said it was an integer,","[50651, 18253, 13, 1406, 617, 1243, 2642, 11, 2035, 2035, 345, 547, 11491, 618, 345, 531, 340, 373, 281, 18253, 11, 50951]",0.0,-0.12486588327508223,1.7924528301886793,0.015883851796388626
835,835,597120,5982.96,5988.48," or you're incorrect when you're passing into a string. If this is a race of static type checkers,","[50951, 393, 345, 821, 11491, 618, 345, 821, 6427, 656, 257, 4731, 13, 1002, 428, 318, 257, 3234, 286, 9037, 2099, 2198, 364, 11, 51227]",0.0,-0.12486588327508223,1.7924528301886793,0.015883851796388626
836,836,597120,5988.48,5992.32," there's somebody winning. As you said, it's interesting that the companies didn't choose to","[51227, 612, 338, 8276, 5442, 13, 1081, 345, 531, 11, 340, 338, 3499, 326, 262, 2706, 1422, 470, 3853, 284, 51419]",0.0,-0.12486588327508223,1.7924528301886793,0.015883851796388626
837,837,599232,5992.4,6002.48, invest in this centralized development of my pie. Is there a future for my pie? What do you see as,"[50367, 1325, 287, 428, 29024, 2478, 286, 616, 2508, 13, 1148, 612, 257, 2003, 329, 616, 2508, 30, 1867, 466, 345, 766, 355, 50871]",0.0,-0.2463314369933246,1.489795918367347,0.0032939924858510494
838,838,599232,6003.5199999999995,6010.96," well, one of the companies went out and everybody uses like a pie type, whatever Google's is called.","[50923, 880, 11, 530, 286, 262, 2706, 1816, 503, 290, 7288, 3544, 588, 257, 2508, 2099, 11, 4232, 3012, 338, 318, 1444, 13, 51295]",0.0,-0.2463314369933246,1.489795918367347,0.0032939924858510494
839,839,599232,6010.96,6018.08," Well, Microsoft is hoping that Microsoft's horse in that race called PyRite is going to win.","[51295, 3894, 11, 5413, 318, 7725, 326, 5413, 338, 8223, 287, 326, 3234, 1444, 9485, 49, 578, 318, 1016, 284, 1592, 13, 51651]",0.0,-0.2463314369933246,1.489795918367347,0.0032939924858510494
840,840,601808,6018.64,6028.64," PyRite, like R-I-G-H-T. Correct. Yeah, my all my word processors tend to type out correct that as","[50391, 9485, 49, 578, 11, 588, 371, 12, 40, 12, 38, 12, 39, 12, 51, 13, 22941, 13, 9425, 11, 616, 477, 616, 1573, 20399, 4327, 284, 2099, 503, 3376, 326, 355, 50891]",0.0,-0.2128917064863382,1.4236453201970443,0.0006754642236046493
841,841,601808,6028.64,6035.92," PyRite, the name of the, I don't know what it is, some kind of semi-precious metal. Oh, right.","[50891, 9485, 49, 578, 11, 262, 1438, 286, 262, 11, 314, 836, 470, 760, 644, 340, 318, 11, 617, 1611, 286, 10663, 12, 3866, 4680, 6147, 13, 3966, 11, 826, 13, 51255]",0.0,-0.2128917064863382,1.4236453201970443,0.0006754642236046493
842,842,601808,6037.44,6043.44," I love it. Okay. So, okay, that's the Microsoft hope, but it, okay, so let me ask the question a","[51331, 314, 1842, 340, 13, 16805, 13, 1406, 11, 8788, 11, 326, 338, 262, 5413, 2911, 11, 475, 340, 11, 8788, 11, 523, 1309, 502, 1265, 262, 1808, 257, 51631]",0.0,-0.2128917064863382,1.4236453201970443,0.0006754642236046493
843,843,604344,6043.44,6049.04, different way. Is there going to be ever a future where the static type checker gets integrated into,"[50363, 1180, 835, 13, 1148, 612, 1016, 284, 307, 1683, 257, 2003, 810, 262, 9037, 2099, 2198, 263, 3011, 11521, 656, 50643]",0.0,-0.07857601081623751,1.5025641025641026,0.0005410604644566774
844,844,604344,6049.04,6060.32, the language? Nobody is currently excited about doing any work towards that. That doesn't mean that,"[50643, 262, 3303, 30, 15658, 318, 3058, 6568, 546, 1804, 597, 670, 3371, 326, 13, 1320, 1595, 470, 1612, 326, 51207]",0.0,-0.07857601081623751,1.5025641025641026,0.0005410604644566774
845,845,604344,6060.32,6071.44," five or 10 years from now, the situation isn't different. At the moment, all the static type","[51207, 1936, 393, 838, 812, 422, 783, 11, 262, 3074, 2125, 470, 1180, 13, 1629, 262, 2589, 11, 477, 262, 9037, 2099, 51763]",0.0,-0.07857601081623751,1.5025641025641026,0.0005410604644566774
846,846,607144,6071.5199999999995,6082.16, checkers still evolve at a much higher speed than Python and its annotation syntax evolve.,"[50367, 2198, 364, 991, 18101, 379, 257, 881, 2440, 2866, 621, 11361, 290, 663, 23025, 15582, 18101, 13, 50899]",0.0,-0.1332459229689378,1.6363636363636365,0.0011370403226464987
847,847,607144,6082.799999999999,6089.2, You get the new release of Python once a year. Those are the only times that you can introduce,"[50931, 921, 651, 262, 649, 2650, 286, 11361, 1752, 257, 614, 13, 5845, 389, 262, 691, 1661, 326, 345, 460, 10400, 51251]",0.0,-0.1332459229689378,1.6363636363636365,0.0011370403226464987
848,848,607144,6089.2,6096.639999999999," new annotation syntax. And there's, there are always people who invent new, new annotation syntax that","[51251, 649, 23025, 15582, 13, 843, 612, 338, 11, 612, 389, 1464, 661, 508, 8067, 649, 11, 649, 23025, 15582, 326, 51623]",0.0,-0.1332459229689378,1.6363636363636365,0.0011370403226464987
849,849,609664,6096.64,6106.0," they're trying to push. And worse, once we've all agreed that we are going to put some new syntax","[50363, 484, 821, 2111, 284, 4574, 13, 843, 4785, 11, 1752, 356, 1053, 477, 4987, 326, 356, 389, 1016, 284, 1234, 617, 649, 15582, 50831]",0.0,-0.06472752683906145,1.6299559471365639,0.003061950206756592
850,850,609664,6106.0,6112.4800000000005," in, we can never take it back. At least a sort of deprecating and existing feature takes many","[50831, 287, 11, 356, 460, 1239, 1011, 340, 736, 13, 1629, 1551, 257, 3297, 286, 1207, 8344, 803, 290, 4683, 3895, 2753, 867, 51155]",0.0,-0.06472752683906145,1.6299559471365639,0.003061950206756592
851,851,609664,6112.4800000000005,6117.52, releases because you have to assume that people started using it as soon as we announced it.,"[51155, 10050, 780, 345, 423, 284, 7048, 326, 661, 2067, 1262, 340, 355, 2582, 355, 356, 3414, 340, 13, 51407]",0.0,-0.06472752683906145,1.6299559471365639,0.003061950206756592
852,852,609664,6118.56,6123.52," And then you can't take it away from them right away. You have to start telling them,","[51459, 843, 788, 345, 460, 470, 1011, 340, 1497, 422, 606, 826, 1497, 13, 921, 423, 284, 923, 5149, 606, 11, 51707]",0.0,-0.06472752683906145,1.6299559471365639,0.003061950206756592
853,853,612352,6123.6,6129.76," well, this will go away, but we're not going to come and tell you that it's an error yet. And then","[50367, 880, 11, 428, 481, 467, 1497, 11, 475, 356, 821, 407, 1016, 284, 1282, 290, 1560, 345, 326, 340, 338, 281, 4049, 1865, 13, 843, 788, 50675]",0.0,-0.13099566007915295,1.663677130044843,0.0027275588363409042
854,854,612352,6129.76,6134.96," later, it's going to be a warning. And then eventually three releases in the future, maybe we remove it.","[50675, 1568, 11, 340, 338, 1016, 284, 307, 257, 6509, 13, 843, 788, 4191, 1115, 10050, 287, 262, 2003, 11, 3863, 356, 4781, 340, 13, 50935]",0.0,-0.13099566007915295,1.663677130044843,0.0027275588363409042
855,855,612352,6136.320000000001,6142.56," On the other hand, the typical static type checker still has a release like","[51003, 1550, 262, 584, 1021, 11, 262, 7226, 9037, 2099, 2198, 263, 991, 468, 257, 2650, 588, 51315]",0.0,-0.13099566007915295,1.663677130044843,0.0027275588363409042
856,856,612352,6145.120000000001,6153.4400000000005," every month, every two months, certainly many times a year. Some type checkers also include","[51443, 790, 1227, 11, 790, 734, 1933, 11, 3729, 867, 1661, 257, 614, 13, 2773, 2099, 2198, 364, 635, 2291, 51859]",0.0,-0.13099566007915295,1.663677130044843,0.0027275588363409042
857,857,615344,6153.839999999999,6163.919999999999, a bunch of experimental ideas that aren't official standard Python syntax yet. The static type checkers,"[50383, 257, 7684, 286, 11992, 4213, 326, 3588, 470, 1743, 3210, 11361, 15582, 1865, 13, 383, 9037, 2099, 2198, 364, 50887]",0.0,-0.09439468383789062,1.547486033519553,0.00032519642263650894
858,858,615344,6163.919999999999,6171.599999999999," also just get better at discovering things that that sort of are unspecified by the language,","[50887, 635, 655, 651, 1365, 379, 21611, 1243, 326, 326, 3297, 286, 389, 29547, 416, 262, 3303, 11, 51271]",0.0,-0.09439468383789062,1.547486033519553,0.00032519642263650894
859,859,615344,6171.599999999999,6176.799999999999, but that sort of could make sense. And so each static type checker actually has,"[51271, 475, 326, 3297, 286, 714, 787, 2565, 13, 843, 523, 1123, 9037, 2099, 2198, 263, 1682, 468, 51531]",0.0,-0.09439468383789062,1.547486033519553,0.00032519642263650894
860,860,617680,6177.52,6182.24, it's sort of strong and weak points. So it's cool. It's like a laboratory of experiments.,"[50399, 340, 338, 3297, 286, 1913, 290, 4939, 2173, 13, 1406, 340, 338, 3608, 13, 632, 338, 588, 257, 14010, 286, 10256, 13, 50635]",0.0,-0.18114463570191688,1.6200873362445414,0.0003269942826591432
861,861,617680,6182.24,6186.56," Yeah. Microsoft will go and all and you get to see. And you see that everywhere, right?","[50635, 9425, 13, 5413, 481, 467, 290, 477, 290, 345, 651, 284, 766, 13, 843, 345, 766, 326, 8347, 11, 826, 30, 50851]",0.0,-0.18114463570191688,1.6200873362445414,0.0003269942826591432
862,862,617680,6186.56,6193.6," Because there's not one single JavaScript engine either. There is one in Chrome, there is one in","[50851, 4362, 612, 338, 407, 530, 2060, 11933, 3113, 2035, 13, 1318, 318, 530, 287, 13282, 11, 612, 318, 530, 287, 51203]",0.0,-0.18114463570191688,1.6200873362445414,0.0003269942826591432
863,863,617680,6193.6,6200.64," Safari, there's one in Firefox. But that said, you said there's not interest, I think there is a","[51203, 23298, 11, 612, 338, 530, 287, 16802, 13, 887, 326, 531, 11, 345, 531, 612, 338, 407, 1393, 11, 314, 892, 612, 318, 257, 51555]",0.0,-0.18114463570191688,1.6200873362445414,0.0003269942826591432
864,864,620064,6200.64,6207.92," lot of interest in type hinting, right? In the PEP 484. Actually, like how many people use that?","[50363, 1256, 286, 1393, 287, 2099, 9254, 278, 11, 826, 30, 554, 262, 350, 8905, 4764, 19, 13, 18689, 11, 588, 703, 867, 661, 779, 326, 30, 50727]",0.0,-0.18020762393349096,1.5341880341880343,0.002222606446594
865,865,620064,6207.92,6212.08," Do you have a sense? How many people use? Because it's optional, it says sugar.","[50727, 2141, 345, 423, 257, 2565, 30, 1374, 867, 661, 779, 30, 4362, 340, 338, 11902, 11, 340, 1139, 7543, 13, 50935]",0.0,-0.18020762393349096,1.5341880341880343,0.002222606446594
866,866,620064,6212.88,6220.8," I can't put a number on it, but from the number of packages that do interesting things with it at","[50975, 314, 460, 470, 1234, 257, 1271, 319, 340, 11, 475, 422, 262, 1271, 286, 10392, 326, 466, 3499, 1243, 351, 340, 379, 51371]",0.0,-0.18020762393349096,1.5341880341880343,0.002222606446594
867,867,620064,6220.8,6227.84, runtime and the fact that there are like now three or four very mature type checkers,"[51371, 19124, 290, 262, 1109, 326, 612, 389, 588, 783, 1115, 393, 1440, 845, 15345, 2099, 2198, 364, 51723]",0.0,-0.18020762393349096,1.5341880341880343,0.002222606446594
868,868,622784,6228.64,6235.76," that each have their segment of the market. And then there is PyCharm, which has a sort of more","[50403, 326, 1123, 423, 511, 10618, 286, 262, 1910, 13, 843, 788, 612, 318, 9485, 1925, 1670, 11, 543, 468, 257, 3297, 286, 517, 50759]",0.0,-0.18806222081184387,1.5025906735751295,9.689907892607152e-05
869,869,622784,6235.76,6243.92," heuristic based type checker that also supports the same syntax. My assumption is that many,","[50759, 339, 27915, 1912, 2099, 2198, 263, 326, 635, 6971, 262, 976, 15582, 13, 2011, 13196, 318, 326, 867, 11, 51167]",0.0,-0.18806222081184387,1.5025906735751295,9.689907892607152e-05
870,870,622784,6243.92,6253.04, many people developing Python software professionally for some kind of production situation are using,"[51167, 867, 661, 5922, 11361, 3788, 28049, 329, 617, 1611, 286, 3227, 3074, 389, 1262, 51623]",0.0,-0.18806222081184387,1.5025906735751295,9.689907892607152e-05
871,871,625304,6253.12,6260.96, a static type checker. Especially anybody who has a continuous integration cycle probably has,"[50367, 257, 9037, 2099, 2198, 263, 13, 18948, 9599, 508, 468, 257, 12948, 11812, 6772, 2192, 468, 50759]",0.0,-0.17095309893290203,1.4709302325581395,0.0013713221997022629
872,872,625304,6263.28,6270.08, one of the steps in there. They're testing routine that happens for basically every commit,"[50875, 530, 286, 262, 4831, 287, 612, 13, 1119, 821, 4856, 8027, 326, 4325, 329, 6209, 790, 4589, 51215]",0.0,-0.17095309893290203,1.4709302325581395,0.0013713221997022629
873,873,625304,6271.68,6277.04," is run a static type checker. And in most cases, that will be my pi.","[51295, 318, 1057, 257, 9037, 2099, 2198, 263, 13, 843, 287, 749, 2663, 11, 326, 481, 307, 616, 31028, 13, 51563]",0.0,-0.17095309893290203,1.4709302325581395,0.0013713221997022629
874,874,627704,6277.6,6284.08," So I think it's pretty popular topic. According to this webpage,","[50391, 1406, 314, 892, 340, 338, 2495, 2968, 7243, 13, 4784, 284, 428, 35699, 11, 50715]",0.0,-0.25437050280363666,1.4135021097046414,0.0015235200989991426
875,875,627704,6285.5199999999995,6293.12," 20 to 30% of Python, three code bases are using type hints. Wow, I wonder how they measured that.","[50787, 1160, 284, 1542, 4, 286, 11361, 11, 1115, 2438, 12536, 389, 1262, 2099, 20269, 13, 24755, 11, 314, 4240, 703, 484, 8630, 326, 13, 51167]",0.0,-0.25437050280363666,1.4135021097046414,0.0015235200989991426
876,876,627704,6293.12,6298.24," Did they just scan all of GitHub? Yeah, that's what it looks like. They did a","[51167, 7731, 484, 655, 9367, 477, 286, 21722, 30, 9425, 11, 326, 338, 644, 340, 3073, 588, 13, 1119, 750, 257, 51423]",0.0,-0.25437050280363666,1.4135021097046414,0.0015235200989991426
877,877,627704,6298.24,6306.0," quick set, not all of but like a random sampling. So you mentioned PyCharm. Let me ask you the","[51423, 2068, 900, 11, 407, 477, 286, 475, 588, 257, 4738, 19232, 13, 1406, 345, 4750, 9485, 1925, 1670, 13, 3914, 502, 1265, 345, 262, 51811]",0.0,-0.25437050280363666,1.4135021097046414,0.0015235200989991426
878,878,630600,6306.08,6314.8, big subjective question. What's the best IDE for Python? And you're extremely biased now,"[50367, 1263, 19088, 1808, 13, 1867, 338, 262, 1266, 33497, 329, 11361, 30, 843, 345, 821, 4457, 21925, 783, 50803]",0.0,-0.16786116645449684,1.3259668508287292,0.00012865077587775886
879,879,630600,6314.8,6320.32," that you're with Microsoft. Is it PyCharm, VS Code, Vim or Emacs?","[50803, 326, 345, 821, 351, 5413, 13, 1148, 340, 9485, 1925, 1670, 11, 22269, 6127, 11, 36645, 393, 36447, 30, 51079]",0.0,-0.16786116645449684,1.3259668508287292,0.00012865077587775886
880,880,630600,6321.28,6328.16," Historically, I actually started out with using Vim, but when it was still called Vi.","[51127, 48153, 11, 314, 1682, 2067, 503, 351, 1262, 36645, 11, 475, 618, 340, 373, 991, 1444, 16049, 13, 51471]",0.0,-0.16786116645449684,1.3259668508287292,0.00012865077587775886
881,881,632816,6328.32,6341.2," For a very long time, I think from the early 80s to, I'd say two years ago, I was a Emacs user.","[50371, 1114, 257, 845, 890, 640, 11, 314, 892, 422, 262, 1903, 4019, 82, 284, 11, 314, 1549, 910, 734, 812, 2084, 11, 314, 373, 257, 36447, 2836, 13, 51015]",0.0,-0.24723176033266128,1.2751677852348993,0.0014991234056651592
882,882,632816,6341.2,6342.24, Nice.,"[51015, 18460, 13, 51067]",0.0,-0.24723176033266128,1.2751677852348993,0.0014991234056651592
883,883,632816,6342.24,6356.24," Between, I'd say 2013 and 2018, I dabbled with PyCharm mostly because it had a couple of","[51067, 14307, 11, 314, 1549, 910, 2211, 290, 2864, 11, 314, 288, 6485, 992, 351, 9485, 1925, 1670, 4632, 780, 340, 550, 257, 3155, 286, 51767]",0.0,-0.24723176033266128,1.2751677852348993,0.0014991234056651592
884,884,635624,6356.24,6364.96," features. I mean, PyCharm is like deriving an 18-wheeler truck, whereas Emacs is more","[50363, 3033, 13, 314, 1612, 11, 9485, 1925, 1670, 318, 588, 4587, 1412, 281, 1248, 12, 22001, 263, 7779, 11, 9472, 36447, 318, 517, 50799]",0.0,-0.23221857706705729,1.4893617021276595,0.006535767111927271
885,885,635624,6367.12,6375.599999999999," like driving your comfortable Toyota car. That's that's that you've had for 100,000 miles. And","[50907, 588, 5059, 534, 6792, 20182, 1097, 13, 1320, 338, 326, 338, 326, 345, 1053, 550, 329, 1802, 11, 830, 4608, 13, 843, 51331]",0.0,-0.23221857706705729,1.4893617021276595,0.006535767111927271
886,886,635624,6375.599999999999,6382.16," you know what every little rattle of the car means. I was very comfortable in Emacs, but there were","[51331, 345, 760, 644, 790, 1310, 374, 1999, 286, 262, 1097, 1724, 13, 314, 373, 845, 6792, 287, 36447, 11, 475, 612, 547, 51659]",0.0,-0.23221857706705729,1.4893617021276595,0.006535767111927271
887,887,638216,6382.16,6388.08, certain things it couldn't do. It wasn't very good at that sort of at least the way I had,"[50363, 1728, 1243, 340, 3521, 470, 466, 13, 632, 2492, 470, 845, 922, 379, 326, 3297, 286, 379, 1551, 262, 835, 314, 550, 50659]",0.0,-0.18138646064920627,1.5895196506550218,0.0015964005142450333
888,888,638216,6388.08,6395.2, configured it. I didn't have very good tooling in Emacs for finding the definition of a function.,"[50659, 17839, 340, 13, 314, 1422, 470, 423, 845, 922, 2891, 278, 287, 36447, 329, 4917, 262, 6770, 286, 257, 2163, 13, 51015]",0.0,-0.18138646064920627,1.5895196506550218,0.0015964005142450333
889,889,638216,6396.5599999999995,6397.44, Got it.,"[51083, 11853, 340, 13, 51127]",0.0,-0.18138646064920627,1.5895196506550218,0.0015964005142450333
890,890,638216,6397.44,6403.36," When I was at Dropbox, exploring a five million line Python code base,","[51127, 1649, 314, 373, 379, 38930, 11, 13504, 257, 1936, 1510, 1627, 11361, 2438, 2779, 11, 51423]",0.0,-0.18138646064920627,1.5895196506550218,0.0015964005142450333
891,891,638216,6405.84,6411.68," just grabbing all that code for where there where is there a class full bar. Well, turns out that","[51547, 655, 23256, 477, 326, 2438, 329, 810, 612, 810, 318, 612, 257, 1398, 1336, 2318, 13, 3894, 11, 4962, 503, 326, 51839]",0.0,-0.18138646064920627,1.5895196506550218,0.0015964005142450333
892,892,641168,6411.68,6416.400000000001," if you grab all five million lines of code, there are many classes with the same name.","[50363, 611, 345, 5552, 477, 1936, 1510, 3951, 286, 2438, 11, 612, 389, 867, 6097, 351, 262, 976, 1438, 13, 50599]",0.0,-0.0958431407969485,1.5574468085106383,0.00014393689343705773
893,893,641168,6417.92,6425.360000000001," And so PyCharm sort of once once you fired it up and once it's indexed, your repository","[50675, 843, 523, 9485, 1925, 1670, 3297, 286, 1752, 1752, 345, 6294, 340, 510, 290, 1752, 340, 338, 41497, 11, 534, 16099, 51047]",0.0,-0.0958431407969485,1.5574468085106383,0.00014393689343705773
894,894,641168,6426.56,6433.200000000001," was very helpful. But as soon as I had to edit code, I would jump back to Emacs and do all my","[51107, 373, 845, 7613, 13, 887, 355, 2582, 355, 314, 550, 284, 4370, 2438, 11, 314, 561, 4391, 736, 284, 36447, 290, 466, 477, 616, 51439]",0.0,-0.0958431407969485,1.5574468085106383,0.00014393689343705773
895,895,641168,6433.200000000001,6439.4400000000005, editing there because I could type much faster and switch between files. When I would when I knew,"[51439, 12857, 612, 780, 314, 714, 2099, 881, 5443, 290, 5078, 1022, 3696, 13, 1649, 314, 561, 618, 314, 2993, 51751]",0.0,-0.0958431407969485,1.5574468085106383,0.00014393689343705773
896,896,643944,6439.44,6445.5199999999995, which file I wanted much much quicker and I never really got used to the the whole PyCharm user,"[50363, 543, 2393, 314, 2227, 881, 881, 20061, 290, 314, 1239, 1107, 1392, 973, 284, 262, 262, 2187, 9485, 1925, 1670, 2836, 50667]",0.0,-0.10036334841270146,1.7598566308243728,0.0014438637299463153
897,897,643944,6445.5199999999995,6451.919999999999," interface. Yeah, I feel torn in that same kind of way because I've used PyCharm off and on exactly","[50667, 7071, 13, 9425, 11, 314, 1254, 12445, 287, 326, 976, 1611, 286, 835, 780, 314, 1053, 973, 9485, 1925, 1670, 572, 290, 319, 3446, 50987]",0.0,-0.10036334841270146,1.7598566308243728,0.0014438637299463153
898,898,643944,6451.919999999999,6459.28, in that same way. And I feel like I'm just being an old grumpy man for not learning how to quickly,"[50987, 287, 326, 976, 835, 13, 843, 314, 1254, 588, 314, 1101, 655, 852, 281, 1468, 1036, 32152, 582, 329, 407, 4673, 703, 284, 2952, 51355]",0.0,-0.10036334841270146,1.7598566308243728,0.0014438637299463153
899,899,643944,6459.28,6462.719999999999," switch between files and all that kind of stuff. I feel like that has to do with shortcuts, that's","[51355, 5078, 1022, 3696, 290, 477, 326, 1611, 286, 3404, 13, 314, 1254, 588, 326, 468, 284, 466, 351, 32953, 11, 326, 338, 51527]",0.0,-0.10036334841270146,1.7598566308243728,0.0014438637299463153
900,900,643944,6462.719999999999,6467.36," to do with, I mean, you just have to get accustomed just like with touch typing. Yeah, you have to","[51527, 284, 466, 351, 11, 314, 1612, 11, 345, 655, 423, 284, 651, 23840, 655, 588, 351, 3638, 19720, 13, 9425, 11, 345, 423, 284, 51759]",0.0,-0.10036334841270146,1.7598566308243728,0.0014438637299463153
901,901,646736,6467.36,6472.719999999999," just want to learn that. I mean, if you don't need it much, you don't need touch typing either.","[50363, 655, 765, 284, 2193, 326, 13, 314, 1612, 11, 611, 345, 836, 470, 761, 340, 881, 11, 345, 836, 470, 761, 3638, 19720, 2035, 13, 50631]",0.0,-0.1346701320848967,1.6630824372759856,0.0006460270960815251
902,902,646736,6473.28,6477.679999999999," You can type with two fingers just fine in the short term, but in the long term, your life will","[50659, 921, 460, 2099, 351, 734, 9353, 655, 3734, 287, 262, 1790, 3381, 11, 475, 287, 262, 890, 3381, 11, 534, 1204, 481, 50879]",0.0,-0.1346701320848967,1.6630824372759856,0.0006460270960815251
903,903,646736,6478.24,6484.0, become better psychologically and productivity wise if you learn how to type with 10 fingers.,"[50907, 1716, 1365, 39705, 290, 13714, 10787, 611, 345, 2193, 703, 284, 2099, 351, 838, 9353, 13, 51195]",0.0,-0.1346701320848967,1.6630824372759856,0.0006460270960815251
904,904,646736,6484.0,6490.32," If you do a lot of keyboard input, before everyone emails and stuff, right? Like you look at the","[51195, 1002, 345, 466, 257, 1256, 286, 10586, 5128, 11, 878, 2506, 7237, 290, 3404, 11, 826, 30, 4525, 345, 804, 379, 262, 51511]",0.0,-0.1346701320848967,1.6630824372759856,0.0006460270960815251
905,905,646736,6490.88,6495.28," next 20, 30 years of your life, you have to anticipate where technology is going.","[51539, 1306, 1160, 11, 1542, 812, 286, 534, 1204, 11, 345, 423, 284, 23794, 810, 3037, 318, 1016, 13, 51759]",0.0,-0.1346701320848967,1.6630824372759856,0.0006460270960815251
906,906,649736,6497.36,6502.32, Do you want to invest in handwriting notes? Probably not. More and more people are doing,"[50363, 2141, 345, 765, 284, 1325, 287, 44396, 4710, 30, 18578, 407, 13, 3125, 290, 517, 661, 389, 1804, 50611]",0.0,-0.0866535386921447,1.7096774193548387,0.0005845835548825562
907,907,649736,6502.32,6507.5199999999995, typing versus handwriting notes. So you can anticipate that. So there's no reason to actually,"[50611, 19720, 9051, 44396, 4710, 13, 1406, 345, 460, 23794, 326, 13, 1406, 612, 338, 645, 1738, 284, 1682, 50871]",0.0,-0.0866535386921447,1.7096774193548387,0.0005845835548825562
908,908,649736,6507.5199999999995,6512.799999999999, practice handwriting. There's more reason to practice typing. You can actually estimate back,"[50871, 3357, 44396, 13, 1318, 338, 517, 1738, 284, 3357, 19720, 13, 921, 460, 1682, 8636, 736, 51135]",0.0,-0.0866535386921447,1.7096774193548387,0.0005845835548825562
909,909,649736,6512.799999999999,6519.839999999999," to the spreadsheet, the number of paragraphs, sentences or words you write for the rest of your","[51135, 284, 262, 30117, 11, 262, 1271, 286, 23549, 11, 13439, 393, 2456, 345, 3551, 329, 262, 1334, 286, 534, 51487]",0.0,-0.0866535386921447,1.7096774193548387,0.0005845835548825562
910,910,651984,6519.84,6525.6, life. You probably go again with the spreadsheet of my life.,"[50363, 1204, 13, 921, 2192, 467, 757, 351, 262, 30117, 286, 616, 1204, 13, 50651]",0.0,-0.2106857526870001,1.5675675675675675,0.10389851033687592
911,911,651984,6527.12,6532.400000000001," All of that is not actual converted to a spreadsheet, but it's a gut feeling. Like I have the same","[50727, 1439, 286, 326, 318, 407, 4036, 11513, 284, 257, 30117, 11, 475, 340, 338, 257, 12500, 4203, 13, 4525, 314, 423, 262, 976, 50991]",0.0,-0.2106857526870001,1.5675675675675675,0.10389851033687592
912,912,651984,6532.400000000001,6538.08," kind of gut feeling about books. I've almost exclusively switched to Kindle now for ebook readers,","[50991, 1611, 286, 12500, 4203, 546, 3835, 13, 314, 1053, 2048, 11541, 15293, 284, 27114, 783, 329, 47179, 7183, 11, 51275]",0.0,-0.2106857526870001,1.5675675675675675,0.10389851033687592
913,913,651984,6539.2,6544.8," even though I still love and probably always will the smell, the feel of a physical book.","[51331, 772, 996, 314, 991, 1842, 290, 2192, 1464, 481, 262, 8508, 11, 262, 1254, 286, 257, 3518, 1492, 13, 51611]",0.0,-0.2106857526870001,1.5675675675675675,0.10389851033687592
914,914,654480,6545.76,6552.8," And the reason I switched to Kindle is like, all right, well, this is really paving. The future","[50411, 843, 262, 1738, 314, 15293, 284, 27114, 318, 588, 11, 477, 826, 11, 880, 11, 428, 318, 1107, 47711, 13, 383, 2003, 50763]",0.0,-0.1663733965730014,1.4427860696517414,0.001167361275292933
915,915,654480,6552.8,6559.04, is going to be digital in terms of consuming books and content of that nature. So you should,"[50763, 318, 1016, 284, 307, 4875, 287, 2846, 286, 18587, 3835, 290, 2695, 286, 326, 3450, 13, 1406, 345, 815, 51075]",0.0,-0.1663733965730014,1.4427860696517414,0.001167361275292933
916,916,654480,6560.4800000000005,6567.04," let your brain get accustomed to that experience. In that same way, it feels like PyCharm or VS Code.","[51147, 1309, 534, 3632, 651, 23840, 284, 326, 1998, 13, 554, 326, 976, 835, 11, 340, 5300, 588, 9485, 1925, 1670, 393, 22269, 6127, 13, 51475]",0.0,-0.1663733965730014,1.4427860696517414,0.001167361275292933
917,917,656704,6567.04,6576.64, I think PyCharm is the most sophisticated featureful Python ID. It feels like I should,"[50363, 314, 892, 9485, 1925, 1670, 318, 262, 749, 13767, 3895, 913, 11361, 4522, 13, 632, 5300, 588, 314, 815, 50843]",0.0,-0.10509970947936341,1.560483870967742,0.040024999529123306
918,918,656704,6576.64,6583.04, probably at some point very soon switch entirely. I'm not allowed to use anything else for Python,"[50843, 2192, 379, 617, 966, 845, 2582, 5078, 5000, 13, 314, 1101, 407, 3142, 284, 779, 1997, 2073, 329, 11361, 51163]",0.0,-0.10509970947936341,1.560483870967742,0.040024999529123306
919,919,656704,6583.04,6588.96," than this ID or VS Code. It doesn't matter, but walk away from Emacs for this particular application.","[51163, 621, 428, 4522, 393, 22269, 6127, 13, 632, 1595, 470, 2300, 11, 475, 2513, 1497, 422, 36447, 329, 428, 1948, 3586, 13, 51459]",0.0,-0.10509970947936341,1.560483870967742,0.040024999529123306
920,920,656704,6588.96,6594.4, So I think I'm limiting myself in the same way that using two fingers for typing is limiting myself.,"[51459, 1406, 314, 892, 314, 1101, 15637, 3589, 287, 262, 976, 835, 326, 1262, 734, 9353, 329, 19720, 318, 15637, 3589, 13, 51731]",0.0,-0.10509970947936341,1.560483870967742,0.040024999529123306
921,921,659440,6595.28,6598.0, This is a therapy session. This is not even a question.,"[50407, 770, 318, 257, 9102, 6246, 13, 770, 318, 407, 772, 257, 1808, 13, 50543]",0.0,-0.20917888536845167,1.492063492063492,0.002745756646618247
922,922,659440,6600.0,6601.599999999999, But I'm sure a lot of people are thinking about it.,"[50643, 887, 314, 1101, 1654, 257, 1256, 286, 661, 389, 3612, 546, 340, 13, 50723]",0.0,-0.20917888536845167,1.492063492063492,0.002745756646618247
923,923,659440,6601.599999999999,6609.12, I'm not going to stop you. I think that everybody has to decide for themselves,"[50723, 314, 1101, 407, 1016, 284, 2245, 345, 13, 314, 892, 326, 7288, 468, 284, 5409, 329, 2405, 51099]",0.0,-0.20917888536845167,1.492063492063492,0.002745756646618247
924,924,659440,6609.12,6619.04, which one they want to invest more time in. I actually ended up giving VS Code a very tentative,"[51099, 543, 530, 484, 765, 284, 1325, 517, 640, 287, 13, 314, 1682, 4444, 510, 3501, 22269, 6127, 257, 845, 38358, 51595]",0.0,-0.20917888536845167,1.492063492063492,0.002745756646618247
925,925,661904,6619.04,6628.96, try when I started out at Microsoft and really liking it. It took me a while before I realized,"[50363, 1949, 618, 314, 2067, 503, 379, 5413, 290, 1107, 24976, 340, 13, 632, 1718, 502, 257, 981, 878, 314, 6939, 50859]",0.0,-0.13256852825482687,1.3493150684931507,0.004062025807797909
926,926,661904,6628.96,6637.5199999999995, why that was. I think that actually the founders of VS Code may not necessarily agree with me on this.,"[50859, 1521, 326, 373, 13, 314, 892, 326, 1682, 262, 22202, 286, 22269, 6127, 743, 407, 6646, 4236, 351, 502, 319, 428, 13, 51287]",0.0,-0.13256852825482687,1.3493150684931507,0.004062025807797909
927,927,663752,6638.4800000000005,6645.200000000001," But to me, VS Code is in a sense the spiritual successor of Emacs.","[50411, 887, 284, 502, 11, 22269, 6127, 318, 287, 257, 2565, 262, 8557, 17270, 286, 36447, 13, 50747]",0.0,-0.19998324863494388,1.4736842105263157,0.018598463386297226
928,928,663752,6646.72,6657.040000000001," Because as you probably know as an old Emacs hack, the key part of Emacs is that it's mostly written in","[50823, 4362, 355, 345, 2192, 760, 355, 281, 1468, 36447, 8156, 11, 262, 1994, 636, 286, 36447, 318, 326, 340, 338, 4632, 3194, 287, 51339]",0.0,-0.19998324863494388,1.4736842105263157,0.018598463386297226
929,929,663752,6657.040000000001,6665.68, Lisp. And that sort of new features of Emacs usually update all the Lisp packages,"[51339, 38593, 13, 843, 326, 3297, 286, 649, 3033, 286, 36447, 3221, 4296, 477, 262, 38593, 10392, 51771]",0.0,-0.19998324863494388,1.4736842105263157,0.018598463386297226
930,930,666568,6666.320000000001,6673.200000000001," and add new Lisp packages. And oh yeah, there's also some very obscure thing","[50395, 290, 751, 649, 38593, 10392, 13, 843, 11752, 10194, 11, 612, 338, 635, 617, 845, 18611, 1517, 50739]",0.0,-0.1262151691275583,1.4840425531914894,0.00022679250105284154
931,931,666568,6673.200000000001,6680.0, improved in the part that's not in Lisp. But that's usually not why it would upgrade to a new version,"[50739, 6596, 287, 262, 636, 326, 338, 407, 287, 38593, 13, 887, 326, 338, 3221, 407, 1521, 340, 561, 8515, 284, 257, 649, 2196, 51079]",0.0,-0.1262151691275583,1.4840425531914894,0.00022679250105284154
932,932,666568,6680.0,6689.12, of Emacs. There's a core implementation that that sort of can read a file and it can put bits on the,"[51079, 286, 36447, 13, 1318, 338, 257, 4755, 7822, 326, 326, 3297, 286, 460, 1100, 257, 2393, 290, 340, 460, 1234, 10340, 319, 262, 51535]",0.0,-0.1262151691275583,1.4840425531914894,0.00022679250105284154
933,933,668912,6689.12,6697.04, screen and it can sort of manage memory and buffers. And then what makes it an editor full of,"[50363, 3159, 290, 340, 460, 3297, 286, 6687, 4088, 290, 39334, 13, 843, 788, 644, 1838, 340, 281, 5464, 1336, 286, 50759]",0.0,-0.12880131735730527,1.6065573770491803,0.055109065026044846
934,934,668912,6697.04,6704.16," features is all the Lisp packages. And of course, the design of how the Lisp packages interact with","[50759, 3033, 318, 477, 262, 38593, 10392, 13, 843, 286, 1781, 11, 262, 1486, 286, 703, 262, 38593, 10392, 9427, 351, 51115]",0.0,-0.12880131735730527,1.6065573770491803,0.055109065026044846
935,935,668912,6704.16,6712.72, each other and with that sort of that base layer of the core immutable engine. But almost everything,"[51115, 1123, 584, 290, 351, 326, 3297, 286, 326, 2779, 7679, 286, 262, 4755, 40139, 3113, 13, 887, 2048, 2279, 51543]",0.0,-0.12880131735730527,1.6065573770491803,0.055109065026044846
936,936,671272,6712.72,6719.84, in that core engine in Emacs case can still be overridden or replaced. And so,"[50363, 287, 326, 4755, 3113, 287, 36447, 1339, 460, 991, 307, 23170, 4651, 393, 6928, 13, 843, 523, 50719]",0.0,-0.12362941106160481,1.4350282485875707,0.00582196656614542
937,937,671272,6722.96,6733.360000000001, VS Code has a similar architecture where there is like a base engine that you have no control over.,"[50875, 22269, 6127, 468, 257, 2092, 10959, 810, 612, 318, 588, 257, 2779, 3113, 326, 345, 423, 645, 1630, 625, 13, 51395]",0.0,-0.12362941106160481,1.4350282485875707,0.00582196656614542
938,938,671272,6734.16,6739.84," I mean, it's open source, but nobody except the people who work on that part","[51435, 314, 1612, 11, 340, 338, 1280, 2723, 11, 475, 8168, 2845, 262, 661, 508, 670, 319, 326, 636, 51719]",0.0,-0.12362941106160481,1.4350282485875707,0.00582196656614542
939,939,673984,6740.0,6751.6, changes it much. And it has sort of a package manager and a whole series of interfaces for packages,"[50371, 2458, 340, 881, 13, 843, 340, 468, 3297, 286, 257, 5301, 4706, 290, 257, 2187, 2168, 286, 20314, 329, 10392, 50951]",0.0,-0.19455817488373303,1.6761363636363635,0.00017019227379933
940,940,673984,6751.6,6758.0, and an additional series of conventions for how packages should interact with the lower layers,"[50951, 290, 281, 3224, 2168, 286, 21396, 329, 703, 10392, 815, 9427, 351, 262, 2793, 11685, 51271]",0.0,-0.19455817488373303,1.6761363636363635,0.00017019227379933
941,941,673984,6758.0,6768.08, and with each other. And powerful primitive operations that let you move the cursor around or select,"[51271, 290, 351, 1123, 584, 13, 843, 3665, 20049, 4560, 326, 1309, 345, 1445, 262, 23493, 1088, 393, 2922, 51775]",0.0,-0.19455817488373303,1.6761363636363635,0.00017019227379933
942,942,676808,6768.72,6775.5199999999995, pieces of text or delete pieces of text or interact with the keyboard and the mouse and what other,"[50395, 5207, 286, 2420, 393, 12233, 5207, 286, 2420, 393, 9427, 351, 262, 10586, 290, 262, 10211, 290, 644, 584, 50735]",0.0,-0.11544239337627704,1.574585635359116,9.594602306606248e-05
943,943,676808,6775.5199999999995,6785.04, peripherals you have. And so the sort of the extreme extensibility and the package ecosystem,"[50735, 18375, 874, 345, 423, 13, 843, 523, 262, 3297, 286, 262, 3257, 1070, 641, 2247, 290, 262, 5301, 13187, 51211]",0.0,-0.11544239337627704,1.574585635359116,9.594602306606248e-05
944,944,676808,6785.76,6793.44, that you that you see in VS Code is a mirror of very similar architectural features in Emacs.,"[51247, 326, 345, 326, 345, 766, 287, 22269, 6127, 318, 257, 10162, 286, 845, 2092, 27070, 3033, 287, 36447, 13, 51631]",0.0,-0.11544239337627704,1.574585635359116,9.594602306606248e-05
945,945,679344,6794.16,6800.5599999999995," Well, I'll have to give it a serious try because as far as sort of the hype and the excitement","[50399, 3894, 11, 314, 1183, 423, 284, 1577, 340, 257, 2726, 1949, 780, 355, 1290, 355, 3297, 286, 262, 20606, 290, 262, 14067, 50719]",0.0,-0.18483509019363759,1.5274261603375527,0.008046663366258144
946,946,679344,6800.5599999999995,6805.36, in the general programming community VS Code seems to dominate. The interesting thing about,"[50719, 287, 262, 2276, 8300, 2055, 22269, 6127, 2331, 284, 17863, 13, 383, 3499, 1517, 546, 50959]",0.0,-0.18483509019363759,1.5274261603375527,0.008046663366258144
947,947,679344,6806.719999999999,6814.719999999999," PyCharm and what is it? PHP Storm, which are these JetBrains specific IDs that are designed for","[51027, 9485, 1925, 1670, 290, 644, 318, 340, 30, 19599, 8865, 11, 543, 389, 777, 19013, 9414, 1299, 2176, 32373, 326, 389, 3562, 329, 51427]",0.0,-0.18483509019363759,1.5274261603375527,0.008046663366258144
948,948,679344,6814.719999999999,6821.04," one programming language. It's interesting to when an ID is specialized, right?","[51427, 530, 8300, 3303, 13, 632, 338, 3499, 284, 618, 281, 4522, 318, 16976, 11, 826, 30, 51743]",0.0,-0.18483509019363759,1.5274261603375527,0.008046663366258144
949,949,682104,6821.04,6828.24, They're usually actually just specializations of IntelliJ because underneath it's all the same,"[50363, 1119, 821, 3221, 1682, 655, 2041, 4582, 286, 2558, 23225, 41, 780, 14638, 340, 338, 477, 262, 976, 50723]",0.0,-0.17256015539169312,1.46524064171123,0.0015479057328775525
950,950,682104,6829.28,6841.68," editing engine with different veneer on top, where in VS Code many things you do require","[50775, 12857, 3113, 351, 1180, 410, 1734, 263, 319, 1353, 11, 810, 287, 22269, 6127, 867, 1243, 345, 466, 2421, 51395]",0.0,-0.17256015539169312,1.46524064171123,0.0015479057328775525
951,951,682104,6842.48,6850.0," loading third party extensions. In PyCharm, it is possible to have third party extensions,","[51435, 11046, 2368, 2151, 18366, 13, 554, 9485, 1925, 1670, 11, 340, 318, 1744, 284, 423, 2368, 2151, 18366, 11, 51811]",0.0,-0.17256015539169312,1.46524064171123,0.0015479057328775525
952,952,685000,6850.72,6857.28," but it is a struggle to create one. Yes. And it's not part of the culture, all that kind of stuff.","[50399, 475, 340, 318, 257, 6531, 284, 2251, 530, 13, 3363, 13, 843, 340, 338, 407, 636, 286, 262, 3968, 11, 477, 326, 1611, 286, 3404, 13, 50727]",0.0,-0.18446793054279528,1.4893617021276595,0.00016241721459664404
953,953,685000,6857.28,6863.84," Yeah, we that I remember that might have been five years ago or so we were trying to get","[50727, 9425, 11, 356, 326, 314, 3505, 326, 1244, 423, 587, 1936, 812, 2084, 393, 523, 356, 547, 2111, 284, 651, 51055]",0.0,-0.18446793054279528,1.4893617021276595,0.00016241721459664404
954,954,685000,6863.84,6871.04, some better MyPy integration into PyCharm because MyPy is sort of Python tooling and PyCharm,"[51055, 617, 1365, 2011, 20519, 11812, 656, 9485, 1925, 1670, 780, 2011, 20519, 318, 3297, 286, 11361, 2891, 278, 290, 9485, 1925, 1670, 51415]",0.0,-0.18446793054279528,1.4893617021276595,0.00016241721459664404
955,955,687104,6871.92,6882.24," had its own type checking, heuristic thing that we wanted to replace with something based on MyPy","[50407, 550, 663, 898, 2099, 10627, 11, 339, 27915, 1517, 326, 356, 2227, 284, 6330, 351, 1223, 1912, 319, 2011, 20519, 50923]",0.0,-0.17759768642596344,1.5265957446808511,0.002021310618147254
956,956,687104,6882.24,6888.64, because that was what we were using in the company. And it for the guy who was writing that,"[50923, 780, 326, 373, 644, 356, 547, 1262, 287, 262, 1664, 13, 843, 340, 329, 262, 3516, 508, 373, 3597, 326, 51243]",0.0,-0.17759768642596344,1.5265957446808511,0.002021310618147254
957,957,687104,6889.44,6897.76," PyCharm extension, it was really a struggle to sort of find documentation and get the development","[51283, 9485, 1925, 1670, 7552, 11, 340, 373, 1107, 257, 6531, 284, 3297, 286, 1064, 10314, 290, 651, 262, 2478, 51699]",0.0,-0.17759768642596344,1.5265957446808511,0.002021310618147254
958,958,689776,6897.84,6905.04, workflow going and debug his code and all that. So it was not a pleasant experience.,"[50367, 30798, 1016, 290, 14257, 465, 2438, 290, 477, 326, 13, 1406, 340, 373, 407, 257, 15497, 1998, 13, 50727]",0.0,-0.21305196181587552,1.574468085106383,0.0016648113960400224
959,959,689776,6906.0,6912.16," Let me talk to you about parallelism in your post titled reasoning about async IOs,","[50775, 3914, 502, 1561, 284, 345, 546, 10730, 1042, 287, 534, 1281, 11946, 14607, 546, 30351, 314, 16748, 11, 51083]",0.0,-0.21305196181587552,1.574468085106383,0.0016648113960400224
960,960,689776,6912.16,6917.4400000000005," some of four, you talk about a fast food restaurant in Silicon Valley that has only one table. Is this","[51083, 617, 286, 1440, 11, 345, 1561, 546, 257, 3049, 2057, 7072, 287, 18210, 6916, 326, 468, 691, 530, 3084, 13, 1148, 428, 51347]",0.0,-0.21305196181587552,1.574468085106383,0.0016648113960400224
961,961,689776,6917.4400000000005,6922.08, a real thing? I just wanted to ask you about that. Is that just like a metaphor you're using or is,"[51347, 257, 1103, 1517, 30, 314, 655, 2227, 284, 1265, 345, 546, 326, 13, 1148, 326, 655, 588, 257, 23094, 345, 821, 1262, 393, 318, 51579]",0.0,-0.21305196181587552,1.574468085106383,0.0016648113960400224
962,962,692208,6922.16,6928.64, that an actual restaurant in Silicon Valley? It was a metaphor of course. I can imagine such a,"[50367, 326, 281, 4036, 7072, 287, 18210, 6916, 30, 632, 373, 257, 23094, 286, 1781, 13, 314, 460, 5967, 884, 257, 50691]",0.0,-0.19354470570882162,1.6506550218340612,0.0015319758094847202
963,963,692208,6928.64,6934.32," restaurant. So for people who don't then read the thing you should, but it was a","[50691, 7072, 13, 1406, 329, 661, 508, 836, 470, 788, 1100, 262, 1517, 345, 815, 11, 475, 340, 373, 257, 50975]",0.0,-0.19354470570882162,1.6506550218340612,0.0015319758094847202
964,964,692208,6935.68,6942.64, idea of a restaurant where there's only one table and you show up one at a time and they are prepared,"[51043, 2126, 286, 257, 7072, 810, 612, 338, 691, 530, 3084, 290, 345, 905, 510, 530, 379, 257, 640, 290, 484, 389, 5597, 51391]",0.0,-0.19354470570882162,1.6506550218340612,0.0015319758094847202
965,965,692208,6943.2,6948.5599999999995, and actually looked it up and there is restaurants like this throughout the world. And it just seems,"[51419, 290, 1682, 3114, 340, 510, 290, 612, 318, 10808, 588, 428, 3690, 262, 995, 13, 843, 340, 655, 2331, 51687]",0.0,-0.19354470570882162,1.6506550218340612,0.0015319758094847202
966,966,694856,6948.56,6956.0," like a fascinating idea. You stand in line, you show up, there's one table, they ask you all kinds","[50363, 588, 257, 13899, 2126, 13, 921, 1302, 287, 1627, 11, 345, 905, 510, 11, 612, 338, 530, 3084, 11, 484, 1265, 345, 477, 6982, 50735]",0.0,-0.14658859522655757,1.6995708154506437,0.0016287219477817416
967,967,694856,6956.0,6961.360000000001, of questions that cook just for you. That's fascinating. It sounds like you'd find places like that in,"[50735, 286, 2683, 326, 4255, 655, 329, 345, 13, 1320, 338, 13899, 13, 632, 5238, 588, 345, 1549, 1064, 4113, 588, 326, 287, 51003]",0.0,-0.14658859522655757,1.6995708154506437,0.0016287219477817416
968,968,694856,6961.360000000001,6967.04," Tokyo. It sounds like a very Japanese thing or in the Bay Area, there are pop places that probably","[51003, 11790, 13, 632, 5238, 588, 257, 845, 4960, 1517, 393, 287, 262, 4696, 9498, 11, 612, 389, 1461, 4113, 326, 2192, 51287]",0.0,-0.14658859522655757,1.6995708154506437,0.0016287219477817416
969,969,694856,6967.04,6971.4400000000005, more or less work like that. But I've never eaten at such a place. The fascinating thing is you,"[51287, 517, 393, 1342, 670, 588, 326, 13, 887, 314, 1053, 1239, 17065, 379, 884, 257, 1295, 13, 383, 13899, 1517, 318, 345, 51507]",0.0,-0.14658859522655757,1.6995708154506437,0.0016287219477817416
970,970,697144,6971.44,6979.759999999999, proposes a fast food. This is all for a burger. It was one of my rare sort of more literary or,"[50363, 26017, 257, 3049, 2057, 13, 770, 318, 477, 329, 257, 26593, 13, 632, 373, 530, 286, 616, 4071, 3297, 286, 517, 16716, 393, 50779]",0.0,-0.14128226650004483,1.5772357723577235,0.0025147469714283943
971,971,697144,6979.759999999999,6987.2, poetic moments where I thought I'll just open with a crazy example to catch your attention. And the,"[50779, 38273, 7188, 810, 314, 1807, 314, 1183, 655, 1280, 351, 257, 7165, 1672, 284, 4929, 534, 3241, 13, 843, 262, 51151]",0.0,-0.14128226650004483,1.5772357723577235,0.0025147469714283943
972,972,697144,6987.2,6994.879999999999, rest is very dry stuff about locks and semaphores and how semaphore is a generalization of a lock.,"[51151, 1334, 318, 845, 5894, 3404, 546, 19253, 290, 5026, 6570, 2850, 290, 703, 5026, 6570, 382, 318, 257, 2276, 1634, 286, 257, 5793, 13, 51535]",0.0,-0.14128226650004483,1.5772357723577235,0.0025147469714283943
973,973,697144,6994.879999999999,6999.28," Well, it was very poetic and well delivered and it actually made me wonder if it's real or not","[51535, 3894, 11, 340, 373, 845, 38273, 290, 880, 6793, 290, 340, 1682, 925, 502, 4240, 611, 340, 338, 1103, 393, 407, 51755]",0.0,-0.14128226650004483,1.5772357723577235,0.0025147469714283943
974,974,699928,6999.36,7004.639999999999," because you don't make that explicit. And it feels like it could be true. And in fact, I wouldn't be","[50367, 780, 345, 836, 470, 787, 326, 7952, 13, 843, 340, 5300, 588, 340, 714, 307, 2081, 13, 843, 287, 1109, 11, 314, 3636, 470, 307, 50631]",0.0,-0.11641677923962078,1.6172413793103448,0.0013899019686505198
975,975,699928,7004.639999999999,7008.96, surprised if somebody like listens to this and knows exactly a restaurant like this in Silicon,"[50631, 6655, 611, 8276, 588, 35019, 284, 428, 290, 4206, 3446, 257, 7072, 588, 428, 287, 18210, 50847]",0.0,-0.11641677923962078,1.6172413793103448,0.0013899019686505198
976,976,699928,7008.96,7015.36," Valley. Anyway, can we step back and can you just talk about parallelism, concurrency,","[50847, 6916, 13, 21836, 11, 460, 356, 2239, 736, 290, 460, 345, 655, 1561, 546, 10730, 1042, 11, 1673, 13382, 11, 51167]",0.0,-0.11641677923962078,1.6172413793103448,0.0013899019686505198
977,977,699928,7015.36,7022.24," threading, asynchronous, all of these different terms? What is it? A high philosophical level?","[51167, 4704, 278, 11, 39354, 11, 477, 286, 777, 1180, 2846, 30, 1867, 318, 340, 30, 317, 1029, 17580, 1241, 30, 51511]",0.0,-0.11641677923962078,1.6172413793103448,0.0013899019686505198
978,978,699928,7022.24,7028.96," The fisherman is back in the boat. Well, the idea is if the fisherman has two fishing rods,","[51511, 383, 48750, 318, 736, 287, 262, 8848, 13, 3894, 11, 262, 2126, 318, 611, 262, 48750, 468, 734, 12478, 32858, 11, 51847]",0.0,-0.11641677923962078,1.6172413793103448,0.0013899019686505198
979,979,702928,7030.24,7036.08," since fishing is mostly a matter of waiting for a fish to nibble. Well, it depends on how you","[50411, 1201, 12478, 318, 4632, 257, 2300, 286, 4953, 329, 257, 5916, 284, 33272, 903, 13, 3894, 11, 340, 8338, 319, 703, 345, 50703]",0.0,-0.1028061208036757,1.676991150442478,0.00021212497085798532
980,980,702928,7036.08,7042.639999999999, do it actually. But if you're doing the style of fishing where you throw it out and then,"[50703, 466, 340, 1682, 13, 887, 611, 345, 821, 1804, 262, 3918, 286, 12478, 810, 345, 3714, 340, 503, 290, 788, 51031]",0.0,-0.1028061208036757,1.676991150442478,0.00021212497085798532
981,981,702928,7043.84,7050.16," you let it sit for a while until maybe you see a nibble, one fisherman can easily run two or three","[51091, 345, 1309, 340, 1650, 329, 257, 981, 1566, 3863, 345, 766, 257, 33272, 903, 11, 530, 48750, 460, 3538, 1057, 734, 393, 1115, 51407]",0.0,-0.1028061208036757,1.676991150442478,0.00021212497085798532
982,982,702928,7050.16,7056.96," or four fishing rods. And so as long as you can afford the equipment, you can catch four times as","[51407, 393, 1440, 12478, 32858, 13, 843, 523, 355, 890, 355, 345, 460, 5368, 262, 5112, 11, 345, 460, 4929, 1440, 1661, 355, 51747]",0.0,-0.1028061208036757,1.676991150442478,0.00021212497085798532
983,983,705696,7057.04,7064.96," many fish by a small investment in four fishing rods. And so since your time, you sort of say","[50367, 867, 5916, 416, 257, 1402, 4896, 287, 1440, 12478, 32858, 13, 843, 523, 1201, 534, 640, 11, 345, 3297, 286, 910, 50763]",0.0,-0.11959326520879218,1.6753246753246753,0.0002941989223472774
984,984,705696,7064.96,7071.2," you have all Saturday to go fishing, if you can catch four times as much fish, you have a much","[50763, 345, 423, 477, 3909, 284, 467, 12478, 11, 611, 345, 460, 4929, 1440, 1661, 355, 881, 5916, 11, 345, 423, 257, 881, 51075]",0.0,-0.11959326520879218,1.6753246753246753,0.0002941989223472774
985,985,705696,7071.2,7076.08, higher productivity. And that's actually I think how deep sea fishing is done. You could just have,"[51075, 2440, 13714, 13, 843, 326, 338, 1682, 314, 892, 703, 2769, 5417, 12478, 318, 1760, 13, 921, 714, 655, 423, 51319]",0.0,-0.11959326520879218,1.6753246753246753,0.0002941989223472774
986,986,705696,7076.08,7081.92, a rod and you put in the holes so you could have many rods. What is there an interesting difference,"[51319, 257, 15299, 290, 345, 1234, 287, 262, 10421, 523, 345, 714, 423, 867, 32858, 13, 1867, 318, 612, 281, 3499, 3580, 51611]",0.0,-0.11959326520879218,1.6753246753246753,0.0002941989223472774
987,987,708192,7081.92,7089.4400000000005," between parallelism and concurrency and asynchronous? Is there one subset of the other to you? Like,","[50363, 1022, 10730, 1042, 290, 1673, 13382, 290, 39354, 30, 1148, 612, 530, 24637, 286, 262, 584, 284, 345, 30, 4525, 11, 50739]",0.0,-0.14492221978994516,1.627906976744186,0.004629823379218578
988,988,708192,7089.4400000000005,7094.24," how do you think about these terms? In the computer world, there is a big difference.","[50739, 703, 466, 345, 892, 546, 777, 2846, 30, 554, 262, 3644, 995, 11, 612, 318, 257, 1263, 3580, 13, 50979]",0.0,-0.14492221978994516,1.627906976744186,0.004629823379218578
989,989,708192,7094.8,7100.16," When people are talking about parallelism, like a parallel computer,","[51007, 1649, 661, 389, 3375, 546, 10730, 1042, 11, 588, 257, 10730, 3644, 11, 51275]",0.0,-0.14492221978994516,1.627906976744186,0.004629823379218578
990,990,708192,7101.84,7111.84, that's usually really several complete CPUs that are sort of tied together and share something,"[51359, 326, 338, 3221, 1107, 1811, 1844, 32340, 326, 389, 3297, 286, 8165, 1978, 290, 2648, 1223, 51859]",0.0,-0.14492221978994516,1.627906976744186,0.004629823379218578
991,991,711192,7111.92,7122.16, like memory or an IOBUS. Concurrency can be a much more abstract concept where,"[50363, 588, 4088, 393, 281, 314, 9864, 2937, 13, 13223, 13382, 460, 307, 257, 881, 517, 12531, 3721, 810, 50875]",0.0,-0.164688235423604,1.4918032786885247,0.0002115082461386919
992,992,711192,7123.76,7130.88, you have the illusion that things happen simultaneously. But what the computer actually does is,"[50955, 345, 423, 262, 17878, 326, 1243, 1645, 11640, 13, 887, 644, 262, 3644, 1682, 857, 318, 51311]",0.0,-0.164688235423604,1.4918032786885247,0.0002115082461386919
993,993,711192,7131.84,7137.36, it spends a little time running some this program for a while and then it spends some time running,"[51359, 340, 16887, 257, 1310, 640, 2491, 617, 428, 1430, 329, 257, 981, 290, 788, 340, 16887, 617, 640, 2491, 51635]",0.0,-0.164688235423604,1.4918032786885247,0.0002115082461386919
994,994,713736,7137.36,7141.839999999999, that program for a while and then spending some time for the third program for a while.,"[50363, 326, 1430, 329, 257, 981, 290, 788, 4581, 617, 640, 329, 262, 2368, 1430, 329, 257, 981, 13, 50587]",0.0,-0.1381141616076958,1.6972477064220184,0.005995867308229208
995,995,713736,7142.48,7149.679999999999," So parallelism is the reality and concurrency is part reality, part illusion. Yeah, parallelism","[50619, 1406, 10730, 1042, 318, 262, 3950, 290, 1673, 13382, 318, 636, 3950, 11, 636, 17878, 13, 9425, 11, 10730, 1042, 50979]",0.0,-0.1381141616076958,1.6972477064220184,0.005995867308229208
996,996,713736,7149.679999999999,7157.12, typically implies that there is multiple copies of the hardware. You write that implementing,"[50979, 6032, 15565, 326, 612, 318, 3294, 9088, 286, 262, 6890, 13, 921, 3551, 326, 15427, 51351]",0.0,-0.1381141616076958,1.6972477064220184,0.005995867308229208
997,997,713736,7157.12,7162.88," synchronization primitives is hard in that blog post and you talk about locks and semaphores,","[51351, 42133, 2684, 20288, 318, 1327, 287, 326, 4130, 1281, 290, 345, 1561, 546, 19253, 290, 5026, 6570, 2850, 11, 51639]",0.0,-0.1381141616076958,1.6972477064220184,0.005995867308229208
998,998,716288,7163.52,7169.92," why is it hard to implement synchronization primitives? Because at the conscious level,","[50395, 1521, 318, 340, 1327, 284, 3494, 42133, 2684, 20288, 30, 4362, 379, 262, 6921, 1241, 11, 50715]",0.0,-0.10844810547367219,1.5,0.00028792821103706956
999,999,716288,7169.92,7178.72, our brains are not trained to sort of keep track of multiple things at the same time.,"[50715, 674, 14290, 389, 407, 8776, 284, 3297, 286, 1394, 2610, 286, 3294, 1243, 379, 262, 976, 640, 13, 51155]",0.0,-0.10844810547367219,1.5,0.00028792821103706956
1000,1000,716288,7179.36,7186.16," Like, obviously, you can walk and chew gum at the same time because they're both activities that","[51187, 4525, 11, 6189, 11, 345, 460, 2513, 290, 34722, 27142, 379, 262, 976, 640, 780, 484, 821, 1111, 4568, 326, 51527]",0.0,-0.10844810547367219,1.5,0.00028792821103706956
1001,1001,718616,7186.8,7192.96, require only a little bit of your conscious activity. But try balancing your checkbook,"[50395, 2421, 691, 257, 1310, 1643, 286, 534, 6921, 3842, 13, 887, 1949, 22486, 534, 2198, 2070, 50703]",0.0,-0.11721657597741415,1.5304347826086957,0.0005128443008288741
1002,1002,718616,7193.68,7200.639999999999, and watching a murder mystery on TV. You'll mix up the digits or you'll miss an,"[50739, 290, 4964, 257, 5123, 10715, 319, 3195, 13, 921, 1183, 5022, 510, 262, 19561, 393, 345, 1183, 2051, 281, 51087]",0.0,-0.11721657597741415,1.5304347826086957,0.0005128443008288741
1003,1003,718616,7200.639999999999,7206.0," essential clue on in the TV show. So why does it matter that the programmer, the human,","[51087, 6393, 18437, 319, 287, 262, 3195, 905, 13, 1406, 1521, 857, 340, 2300, 326, 262, 24292, 11, 262, 1692, 11, 51355]",0.0,-0.11721657597741415,1.5304347826086957,0.0005128443008288741
1004,1004,718616,7207.28,7214.0," is bad? Because the programmer is, at least with the current state of the art, is responsible for","[51419, 318, 2089, 30, 4362, 262, 24292, 318, 11, 379, 1551, 351, 262, 1459, 1181, 286, 262, 1242, 11, 318, 4497, 329, 51755]",0.0,-0.11721657597741415,1.5304347826086957,0.0005128443008288741
1005,1005,721400,7214.16,7223.6, writing the code correctly. And it's hard enough to keep track of a recipe that you just,"[50371, 3597, 262, 2438, 9380, 13, 843, 340, 338, 1327, 1576, 284, 1394, 2610, 286, 257, 8364, 326, 345, 655, 50843]",0.0,-0.1841606412615095,1.4456521739130435,0.00021369144087657332
1006,1006,721400,7224.64,7232.72," execute one step at a time. Chop the carrots, then peel the potatoes, mix the icing.","[50895, 12260, 530, 2239, 379, 257, 640, 13, 40159, 262, 34397, 11, 788, 31738, 262, 18821, 11, 5022, 262, 41567, 13, 51299]",0.0,-0.1841606412615095,1.4456521739130435,0.00021369144087657332
1007,1007,721400,7233.68,7241.6," You need your whole brain when you're reading a piece of code, what is going on? Okay, we're","[51347, 921, 761, 534, 2187, 3632, 618, 345, 821, 3555, 257, 3704, 286, 2438, 11, 644, 318, 1016, 319, 30, 16805, 11, 356, 821, 51743]",0.0,-0.1841606412615095,1.4456521739130435,0.00021369144087657332
1008,1008,724160,7242.56,7249.120000000001, loading the number of mermaids in variable A and the number of mermen in variable B.,"[50411, 11046, 262, 1271, 286, 4017, 23151, 82, 287, 7885, 317, 290, 262, 1271, 286, 4017, 3653, 287, 7885, 347, 13, 50739]",0.0,-0.1601088047027588,1.743718592964824,0.0003185876994393766
1009,1009,724160,7249.120000000001,7256.0, And now we take the average or whatever. I like just jumping from metaphor to metaphor.,"[50739, 843, 783, 356, 1011, 262, 2811, 393, 4232, 13, 314, 588, 655, 14284, 422, 23094, 284, 23094, 13, 51083]",0.0,-0.1601088047027588,1.743718592964824,0.0003185876994393766
1010,1010,724160,7256.0,7261.4400000000005," I like it. You have to keep in your head, what is in A, what is in B, what is in C,","[51083, 314, 588, 340, 13, 921, 423, 284, 1394, 287, 534, 1182, 11, 644, 318, 287, 317, 11, 644, 318, 287, 347, 11, 644, 318, 287, 327, 11, 51355]",0.0,-0.1601088047027588,1.743718592964824,0.0003185876994393766
1011,1011,724160,7262.320000000001,7270.320000000001, hopefully you have better names. And that is challenging enough. If you have two different,"[51399, 11481, 345, 423, 1365, 3891, 13, 843, 326, 318, 9389, 1576, 13, 1002, 345, 423, 734, 1180, 51799]",0.0,-0.1601088047027588,1.743718592964824,0.0003185876994393766
1012,1012,727032,7271.2,7280.16," pieces of code that are sort of being executed simultaneously, whether it's using the parallel","[50407, 5207, 286, 2438, 326, 389, 3297, 286, 852, 10945, 11640, 11, 1771, 340, 338, 1262, 262, 10730, 50855]",0.0,-0.07971619888090752,1.7393939393939395,2.7884248993359506e-05
1013,1013,727032,7280.16,7290.0," or the concurrent approach, if like A is the number of fishermen and B is the number of programmers,","[50855, 393, 262, 24580, 3164, 11, 611, 588, 317, 318, 262, 1271, 286, 34955, 290, 347, 318, 262, 1271, 286, 24867, 11, 51347]",0.0,-0.07971619888090752,1.7393939393939395,2.7884248993359506e-05
1014,1014,727032,7290.799999999999,7295.679999999999," but in another part of the code, A is the number of mermaids and B is the number of mermen.","[51387, 475, 287, 1194, 636, 286, 262, 2438, 11, 317, 318, 262, 1271, 286, 4017, 23151, 82, 290, 347, 318, 262, 1271, 286, 4017, 3653, 13, 51631]",0.0,-0.07971619888090752,1.7393939393939395,2.7884248993359506e-05
1015,1015,729568,7296.320000000001,7302.96," And somehow that's the same variable. If you do it sequentially, if first you do your mermaids,","[50395, 843, 7599, 326, 338, 262, 976, 7885, 13, 1002, 345, 466, 340, 4726, 3746, 11, 611, 717, 345, 466, 534, 4017, 23151, 82, 11, 50727]",0.0,-0.1900052511563865,1.7953488372093023,0.000370453781215474
1016,1016,729568,7302.96,7309.12," mer people computation, and then you do your people in the boat computation, it doesn't matter that","[50727, 4017, 661, 29964, 11, 290, 788, 345, 466, 534, 661, 287, 262, 8848, 29964, 11, 340, 1595, 470, 2300, 326, 51035]",0.0,-0.1900052511563865,1.7953488372093023,0.000370453781215474
1017,1017,729568,7309.12,7315.280000000001, the variables are called A and B. And that is literally the same variable because you're done with one,"[51035, 262, 9633, 389, 1444, 317, 290, 347, 13, 843, 326, 318, 7360, 262, 976, 7885, 780, 345, 821, 1760, 351, 530, 51343]",0.0,-0.1900052511563865,1.7953488372093023,0.000370453781215474
1018,1018,729568,7315.280000000001,7322.400000000001," use of that variable. But when you mix them together, suddenly the number of mer people","[51343, 779, 286, 326, 7885, 13, 887, 618, 345, 5022, 606, 1978, 11, 6451, 262, 1271, 286, 4017, 661, 51699]",0.0,-0.1900052511563865,1.7953488372093023,0.000370453781215474
1019,1019,732240,7322.48,7328.0, replaces the number of fishermen and your computation goes dramatically wrong.,"[50367, 24020, 262, 1271, 286, 34955, 290, 534, 29964, 2925, 12034, 2642, 13, 50643]",0.0,-0.11854861156049981,1.6205357142857142,0.000652776041533798
1020,1020,732240,7328.0,7333.679999999999, And there's all kinds of ordering of operations that could result in the assignment of those,"[50643, 843, 612, 338, 477, 6982, 286, 16216, 286, 4560, 326, 714, 1255, 287, 262, 16237, 286, 883, 50927]",0.0,-0.11854861156049981,1.6205357142857142,0.000652776041533798
1021,1021,732240,7333.679999999999,7339.04, variables and so you have to anticipate all possible orderings. And you think you're smart and you'll,"[50927, 9633, 290, 523, 345, 423, 284, 23794, 477, 1744, 1502, 654, 13, 843, 345, 892, 345, 821, 4451, 290, 345, 1183, 51195]",0.0,-0.11854861156049981,1.6205357142857142,0.000652776041533798
1022,1022,732240,7339.04,7346.879999999999," put a lock around it. And in practice, in terms of bugs per line, per 1000 lines of code,","[51195, 1234, 257, 5793, 1088, 340, 13, 843, 287, 3357, 11, 287, 2846, 286, 11316, 583, 1627, 11, 583, 8576, 3951, 286, 2438, 11, 51587]",0.0,-0.11854861156049981,1.6205357142857142,0.000652776041533798
1023,1023,734688,7347.52,7356.400000000001, this is an area where everything is worse. So a lock is a mechanism by which you forbid only one,"[50395, 428, 318, 281, 1989, 810, 2279, 318, 4785, 13, 1406, 257, 5793, 318, 257, 9030, 416, 543, 345, 33277, 691, 530, 50839]",0.0,-0.17116418251624474,1.5077720207253886,0.00036757721682079136
1024,1024,734688,7357.4400000000005,7364.96, chef can access the oven at a time. Something like that. And then semaphores allow you to do what?,"[50891, 21221, 460, 1895, 262, 14361, 379, 257, 640, 13, 13742, 588, 326, 13, 843, 788, 5026, 6570, 2850, 1249, 345, 284, 466, 644, 30, 51267]",0.0,-0.17116418251624474,1.5077720207253886,0.00036757721682079136
1025,1025,734688,7364.96,7371.12," Multiple ovens. That's not a bad idea because if you're sort of, if you're preparing, if you're","[51267, 20401, 14361, 82, 13, 1320, 338, 407, 257, 2089, 2126, 780, 611, 345, 821, 3297, 286, 11, 611, 345, 821, 10629, 11, 611, 345, 821, 51575]",0.0,-0.17116418251624474,1.5077720207253886,0.00036757721682079136
1026,1026,737112,7371.2,7377.28," baking cakes and you have multiple people all baking cakes, but there's only one oven, then","[50367, 16871, 30849, 290, 345, 423, 3294, 661, 477, 16871, 30849, 11, 475, 612, 338, 691, 530, 14361, 11, 788, 50671]",0.0,-0.128099321161659,1.8495145631067962,0.0020514989737421274
1027,1027,737112,7377.28,7383.28," maybe you can tell that the oven is in use, but maybe it's preheating. And so you have to maybe","[50671, 3863, 345, 460, 1560, 326, 262, 14361, 318, 287, 779, 11, 475, 3863, 340, 338, 662, 258, 803, 13, 843, 523, 345, 423, 284, 3863, 50971]",0.0,-0.128099321161659,1.8495145631067962,0.0020514989737421274
1028,1028,737112,7383.28,7390.32," you make a sign that says oven in use, and you flip the sign over and it says oven is free when","[50971, 345, 787, 257, 1051, 326, 1139, 14361, 287, 779, 11, 290, 345, 14283, 262, 1051, 625, 290, 340, 1139, 14361, 318, 1479, 618, 51323]",0.0,-0.128099321161659,1.8495145631067962,0.0020514989737421274
1029,1029,737112,7390.32,7398.4," you're done baking your cake. That's a lock. That's sort of, and what do you do when you have two","[51323, 345, 821, 1760, 16871, 534, 12187, 13, 1320, 338, 257, 5793, 13, 1320, 338, 3297, 286, 11, 290, 644, 466, 345, 466, 618, 345, 423, 734, 51727]",0.0,-0.128099321161659,1.8495145631067962,0.0020514989737421274
1030,1030,739840,7398.48,7404.96," ovens or maybe you have 10 ovens, you can put a separate sign on each oven or maybe you can","[50367, 14361, 82, 393, 3863, 345, 423, 838, 14361, 82, 11, 345, 460, 1234, 257, 4553, 1051, 319, 1123, 14361, 393, 3863, 345, 460, 50691]",0.0,-0.12773938081702407,1.71875,0.0007617493392899632
1031,1031,739840,7404.96,7411.2, sort of someone who comes in wants to see at a glance. And maybe there's an electronic sign that,"[50691, 3297, 286, 2130, 508, 2058, 287, 3382, 284, 766, 379, 257, 16086, 13, 843, 3863, 612, 338, 281, 7914, 1051, 326, 51003]",0.0,-0.12773938081702407,1.71875,0.0007617493392899632
1032,1032,739840,7411.2,7420.48, says there are still five ovens available. Or maybe there are already three people waiting for an,"[51003, 1139, 612, 389, 991, 1936, 14361, 82, 1695, 13, 1471, 3863, 612, 389, 1541, 1115, 661, 4953, 329, 281, 51467]",0.0,-0.12773938081702407,1.71875,0.0007617493392899632
1033,1033,739840,7420.48,7427.599999999999," oven. So you can, if you see an oven that's not in use, it's already reserved for someone else who","[51467, 14361, 13, 1406, 345, 460, 11, 611, 345, 766, 281, 14361, 326, 338, 407, 287, 779, 11, 340, 338, 1541, 10395, 329, 2130, 2073, 508, 51823]",0.0,-0.12773938081702407,1.71875,0.0007617493392899632
1034,1034,742760,7427.6,7433.120000000001, got in line first. And that's sort of what the restaurant metaphor was trying to explain.,"[50363, 1392, 287, 1627, 717, 13, 843, 326, 338, 3297, 286, 644, 262, 7072, 23094, 373, 2111, 284, 4727, 13, 50639]",0.0,-0.1617724540385794,1.5714285714285714,0.00018834129150491208
1035,1035,742760,7433.120000000001,7440.320000000001," Yeah. And so you're now tasked, you're sitting as a designer of Python with a team of brilliant","[50639, 9425, 13, 843, 523, 345, 821, 783, 23052, 11, 345, 821, 5586, 355, 257, 11915, 286, 11361, 351, 257, 1074, 286, 10457, 50999]",0.0,-0.1617724540385794,1.5714285714285714,0.00018834129150491208
1036,1036,742760,7440.320000000001,7444.88, core developers and you have to try to figure out to what degree can any of these ideas be,"[50999, 4755, 6505, 290, 345, 423, 284, 1949, 284, 3785, 503, 284, 644, 4922, 460, 597, 286, 777, 4213, 307, 51227]",0.0,-0.1617724540385794,1.5714285714285714,0.00018834129150491208
1037,1037,742760,7444.88,7452.88," integrated and not. So maybe this is a good time to ask, what is a sync IO and how has it evolved","[51227, 11521, 290, 407, 13, 1406, 3863, 428, 318, 257, 922, 640, 284, 1265, 11, 644, 318, 257, 17510, 24418, 290, 703, 468, 340, 12572, 51627]",0.0,-0.1617724540385794,1.5714285714285714,0.00018834129150491208
1038,1038,745288,7452.88,7461.6, since Python 3.4? Wow. Yeah. So we had this really old library for for doing things,"[50363, 1201, 11361, 513, 13, 19, 30, 24755, 13, 9425, 13, 1406, 356, 550, 428, 1107, 1468, 5888, 329, 329, 1804, 1243, 50799]",0.0,-0.14364513022000672,1.4702380952380953,0.0012669706484302878
1039,1039,745288,7463.4400000000005,7470.4800000000005," concurrently, especially things that had to do with IO and networking IO was especially","[50891, 47480, 11, 2592, 1243, 326, 550, 284, 466, 351, 24418, 290, 19140, 24418, 373, 2592, 51243]",0.0,-0.14364513022000672,1.4702380952380953,0.0012669706484302878
1040,1040,745288,7471.4400000000005,7481.2," sort of a popular topic. And in the Python standard library, we had a brief","[51291, 3297, 286, 257, 2968, 7243, 13, 843, 287, 262, 11361, 3210, 5888, 11, 356, 550, 257, 4506, 51779]",0.0,-0.14364513022000672,1.4702380952380953,0.0012669706484302878
1041,1041,748120,7482.0,7490.0," period where there was lots of development. And I think it was late 90s, maybe early 2000s and like","[50403, 2278, 810, 612, 373, 6041, 286, 2478, 13, 843, 314, 892, 340, 373, 2739, 4101, 82, 11, 3863, 1903, 4751, 82, 290, 588, 50803]",0.0,-0.12892122702165085,1.5677966101694916,5.526147288037464e-05
1042,1042,748120,7491.5199999999995,7497.12, two little modules were added that were the state of the art of doing a synchronous IO or,"[50879, 734, 1310, 13103, 547, 2087, 326, 547, 262, 1181, 286, 262, 1242, 286, 1804, 257, 18305, 516, 24418, 393, 51159]",0.0,-0.12892122702165085,1.5677966101694916,5.526147288037464e-05
1043,1043,748120,7497.12,7503.2," sort of non blocking IO, which means that you can keep multiple network connections open and","[51159, 3297, 286, 1729, 12013, 24418, 11, 543, 1724, 326, 345, 460, 1394, 3294, 3127, 8787, 1280, 290, 51463]",0.0,-0.12892122702165085,1.5677966101694916,5.526147288037464e-05
1044,1044,748120,7503.2,7509.28, sort of service them all in parallel like a typical web server does. So IO is input and,"[51463, 3297, 286, 2139, 606, 477, 287, 10730, 588, 257, 7226, 3992, 4382, 857, 13, 1406, 24418, 318, 5128, 290, 51767]",0.0,-0.12892122702165085,1.5677966101694916,5.526147288037464e-05
1045,1045,750928,7509.28,7514.88," opus you're writing either to the network, a regional network connection or reading and writing","[50363, 1034, 385, 345, 821, 3597, 2035, 284, 262, 3127, 11, 257, 7915, 3127, 4637, 393, 3555, 290, 3597, 50643]",0.0,-0.2241700140984504,1.6493506493506493,0.007716260384768248
1046,1046,750928,7514.88,7522.4, to a hard drive story. Also possible. And you can do the ideas you could do to multiple while,"[50643, 284, 257, 1327, 3708, 1621, 13, 4418, 1744, 13, 843, 345, 460, 466, 262, 4213, 345, 714, 466, 284, 3294, 981, 51019]",0.0,-0.2241700140984504,1.6493506493506493,0.007716260384768248
1047,1047,750928,7522.4,7528.96," also doing computation. So running some code that does some fancy stuff. Yeah, like when you're","[51019, 635, 1804, 29964, 13, 1406, 2491, 617, 2438, 326, 857, 617, 14996, 3404, 13, 9425, 11, 588, 618, 345, 821, 51347]",0.0,-0.2241700140984504,1.6493506493506493,0.007716260384768248
1048,1048,750928,7528.96,7536.24," writing a web server, when a request comes in a user, the sort of needs to see a particular web","[51347, 3597, 257, 3992, 4382, 11, 618, 257, 2581, 2058, 287, 257, 2836, 11, 262, 3297, 286, 2476, 284, 766, 257, 1948, 3992, 51711]",0.0,-0.2241700140984504,1.6493506493506493,0.007716260384768248
1049,1049,753624,7536.24,7542.8," page, you have to find that page maybe in the database and format it properly and send it back","[50363, 2443, 11, 345, 423, 284, 1064, 326, 2443, 3863, 287, 262, 6831, 290, 5794, 340, 6105, 290, 3758, 340, 736, 50691]",0.0,-0.1306856991199965,1.673913043478261,0.0029909538570791483
1050,1050,753624,7542.8,7549.04, to the client. And there's a lot of waiting waiting for the database waiting for the network. And so,"[50691, 284, 262, 5456, 13, 843, 612, 338, 257, 1256, 286, 4953, 4953, 329, 262, 6831, 4953, 329, 262, 3127, 13, 843, 523, 51003]",0.0,-0.1306856991199965,1.673913043478261,0.0029909538570791483
1051,1051,753624,7549.04,7556.08," you can handle hundreds or thousands or millions of requests concurrently on one machine. Anyway,","[51003, 345, 460, 5412, 5179, 393, 4138, 393, 5242, 286, 7007, 47480, 319, 530, 4572, 13, 21836, 11, 51355]",0.0,-0.1306856991199965,1.673913043478261,0.0029909538570791483
1052,1052,753624,7556.88,7564.16, ways of doing that in Python were kind of stagnated. And I forget it might have been around,"[51395, 2842, 286, 1804, 326, 287, 11361, 547, 1611, 286, 23196, 515, 13, 843, 314, 6044, 340, 1244, 423, 587, 1088, 51759]",0.0,-0.1306856991199965,1.673913043478261,0.0029909538570791483
1053,1053,756416,7564.16,7576.16," 2012, 2014. When someone for the umpteenth time actually said these async chat and async core","[50363, 2321, 11, 1946, 13, 1649, 2130, 329, 262, 23781, 457, 28117, 640, 1682, 531, 777, 30351, 8537, 290, 30351, 4755, 50963]",0.0,-0.19712435680886972,1.4522613065326633,0.004876711405813694
1054,1054,756416,7576.16,7581.84, modules that you have in the standard library are not quite enough to solve my particular problem.,"[50963, 13103, 326, 345, 423, 287, 262, 3210, 5888, 389, 407, 2407, 1576, 284, 8494, 616, 1948, 1917, 13, 51247]",0.0,-0.19712435680886972,1.4522613065326633,0.004876711405813694
1055,1055,756416,7582.72,7589.68," Can we add one tiny little feature? And everybody said, no, that stuff is not too but you're not","[51291, 1680, 356, 751, 530, 7009, 1310, 3895, 30, 843, 7288, 531, 11, 645, 11, 326, 3404, 318, 407, 1165, 475, 345, 821, 407, 51639]",0.0,-0.19712435680886972,1.4522613065326633,0.004876711405813694
1056,1056,758968,7589.68,7595.280000000001, supposed to use that stuff. Write your own using a third party library. And then everybody started,"[50363, 4385, 284, 779, 326, 3404, 13, 19430, 534, 898, 1262, 257, 2368, 2151, 5888, 13, 843, 788, 7288, 2067, 50643]",0.0,-0.13787533192152387,1.603305785123967,0.0021439853589981794
1057,1057,758968,7595.280000000001,7604.72, a debate about what the right third party library was. And somehow I felt that there was actually,"[50643, 257, 4384, 546, 644, 262, 826, 2368, 2151, 5888, 373, 13, 843, 7599, 314, 2936, 326, 612, 373, 1682, 51115]",0.0,-0.13787533192152387,1.603305785123967,0.0021439853589981794
1058,1058,758968,7605.6,7613.6," a queue for, well, maybe we need a better state of the art module in the standard library for","[51159, 257, 16834, 329, 11, 880, 11, 3863, 356, 761, 257, 1365, 1181, 286, 262, 1242, 8265, 287, 262, 3210, 5888, 329, 51559]",0.0,-0.13787533192152387,1.603305785123967,0.0021439853589981794
1059,1059,758968,7613.6,7619.6, multiplexing input output from different sources. You could say that it's spiraled out of control,"[51559, 3294, 87, 278, 5128, 5072, 422, 1180, 4237, 13, 921, 714, 910, 326, 340, 338, 9158, 3021, 503, 286, 1630, 51859]",0.0,-0.13787533192152387,1.603305785123967,0.0021439853589981794
1060,1060,761960,7619.76,7626.08, a little bit. It was at the time it was the largest Python enhancement proposal that was ever proposed.,"[50371, 257, 1310, 1643, 13, 632, 373, 379, 262, 640, 340, 373, 262, 4387, 11361, 28554, 6961, 326, 373, 1683, 5150, 13, 50687]",0.0,-0.10963132008012519,1.6894977168949772,0.00038782451883889735
1061,1061,761960,7626.96,7632.0, And you were deeply involved with that. At the time I was very much involved with that. I was,"[50731, 843, 345, 547, 7744, 2950, 351, 326, 13, 1629, 262, 640, 314, 373, 845, 881, 2950, 351, 326, 13, 314, 373, 50983]",0.0,-0.10963132008012519,1.6894977168949772,0.00038782451883889735
1062,1062,761960,7632.0,7641.68, like the lead architect. I ended up talking to people who had already developed serious third party,"[50983, 588, 262, 1085, 7068, 13, 314, 4444, 510, 3375, 284, 661, 508, 550, 1541, 4166, 2726, 2368, 2151, 51467]",0.0,-0.10963132008012519,1.6894977168949772,0.00038782451883889735
1063,1063,761960,7642.320000000001,7646.96, libraries that did similar things and sort of taking ideas from them and,"[51499, 12782, 326, 750, 2092, 1243, 290, 3297, 286, 2263, 4213, 422, 606, 290, 51731]",0.0,-0.10963132008012519,1.6894977168949772,0.00038782451883889735
1064,1064,764696,7647.76,7654.88, getting their feedback on my design. And eventually we put it in the standard library. And after a few,"[50403, 1972, 511, 7538, 319, 616, 1486, 13, 843, 4191, 356, 1234, 340, 287, 262, 3210, 5888, 13, 843, 706, 257, 1178, 50759]",0.0,-0.17184838903955665,1.6085106382978724,0.00020315678557381034
1065,1065,764696,7654.88,7660.4, years I got distracted. I think the big thing that distracted me was actually type annotations.,"[50759, 812, 314, 1392, 22943, 13, 314, 892, 262, 1263, 1517, 326, 22943, 502, 373, 1682, 2099, 37647, 13, 51035]",0.0,-0.17184838903955665,1.6085106382978724,0.00020315678557381034
1066,1066,764696,7661.76,7667.52, But other people kept it alive and kicking and it's been quite successful actually,"[51103, 887, 584, 661, 4030, 340, 6776, 290, 17997, 290, 340, 338, 587, 2407, 4388, 1682, 51391]",0.0,-0.17184838903955665,1.6085106382978724,0.00020315678557381034
1067,1067,764696,7668.96,7674.72, in the world of Python web clients. So initially what are some of the design challenges there in,"[51463, 287, 262, 995, 286, 11361, 3992, 7534, 13, 1406, 7317, 644, 389, 617, 286, 262, 1486, 6459, 612, 287, 51751]",0.0,-0.17184838903955665,1.6085106382978724,0.00020315678557381034
1068,1068,767472,7674.8,7679.04, that debate for the PEP? And what are some things that got rejected? What are some things that,"[50367, 326, 4384, 329, 262, 350, 8905, 30, 843, 644, 389, 617, 1243, 326, 1392, 8606, 30, 1867, 389, 617, 1243, 326, 50579]",0.0,-0.14324690166272616,1.628691983122363,0.0011068523162975907
1069,1069,767472,7679.04,7686.240000000001, got accepted to stand out to you? There are a couple of different ways you can handle parallel,"[50579, 1392, 6292, 284, 1302, 503, 284, 345, 30, 1318, 389, 257, 3155, 286, 1180, 2842, 345, 460, 5412, 10730, 50939]",0.0,-0.14324690166272616,1.628691983122363,0.0011068523162975907
1070,1070,767472,7686.240000000001,7692.72, I.O. And this happens sort of at an architectural level in operating systems as well. Like Windows,"[50939, 314, 13, 46, 13, 843, 428, 4325, 3297, 286, 379, 281, 27070, 1241, 287, 5361, 3341, 355, 880, 13, 4525, 3964, 51263]",0.0,-0.14324690166272616,1.628691983122363,0.0011068523162975907
1071,1071,767472,7692.72,7700.16," prefers to do it one way and Unix prefers to do it the other way. You sort of, you have an object","[51263, 26237, 284, 466, 340, 530, 835, 290, 33501, 26237, 284, 466, 340, 262, 584, 835, 13, 921, 3297, 286, 11, 345, 423, 281, 2134, 51635]",0.0,-0.14324690166272616,1.628691983122363,0.0011068523162975907
1072,1072,770016,7700.16,7706.32, that represents a network endpoint say connection with web browser that you're client.,"[50363, 326, 6870, 257, 3127, 36123, 910, 4637, 351, 3992, 6444, 326, 345, 821, 5456, 13, 50671]",0.0,-0.18737121728750375,1.6919431279620853,0.005890886299312115
1073,1073,770016,7707.5199999999995,7713.84, And say you're waiting for an incoming request. Two fundamental approaches are,"[50731, 843, 910, 345, 821, 4953, 329, 281, 15619, 2581, 13, 4930, 7531, 10581, 389, 51047]",0.0,-0.18737121728750375,1.6919431279620853,0.005890886299312115
1074,1074,770016,7716.32,7721.68, okay I'm waiting for an incoming request. I'm doing something else. Come wake me up or of course,"[51171, 8788, 314, 1101, 4953, 329, 281, 15619, 2581, 13, 314, 1101, 1804, 1223, 2073, 13, 7911, 7765, 502, 510, 393, 286, 1781, 51439]",0.0,-0.18737121728750375,1.6919431279620853,0.005890886299312115
1075,1075,770016,7721.68,7726.88, sort of come tell me when something interesting happened like a packet came in on that network,"[51439, 3297, 286, 1282, 1560, 502, 618, 1223, 3499, 3022, 588, 257, 19638, 1625, 287, 319, 326, 3127, 51699]",0.0,-0.18737121728750375,1.6919431279620853,0.005890886299312115
1076,1076,772688,7726.88,7737.76, connection. And the other paradigm is we're on a team of a whole bunch of people with maybe a,"[50363, 4637, 13, 843, 262, 584, 23457, 318, 356, 821, 319, 257, 1074, 286, 257, 2187, 7684, 286, 661, 351, 3863, 257, 50907]",0.0,-0.08970476686954498,1.5348837209302326,0.0026498993393033743
1077,1077,772688,7737.76,7744.96, little mind and we can only manage one web connection at a time. So I'm just sitting,"[50907, 1310, 2000, 290, 356, 460, 691, 6687, 530, 3992, 4637, 379, 257, 640, 13, 1406, 314, 1101, 655, 5586, 51267]",0.0,-0.08970476686954498,1.5348837209302326,0.0026498993393033743
1078,1078,772688,7747.36,7754.16, looking at this web connection and I'm just blocked until something comes in and then,"[51387, 2045, 379, 428, 3992, 4637, 290, 314, 1101, 655, 10226, 1566, 1223, 2058, 287, 290, 788, 51727]",0.0,-0.08970476686954498,1.5348837209302326,0.0026498993393033743
1079,1079,775416,7754.96,7763.599999999999, I'm already waiting for it. I get the data I process the data and then I go back to the top and say,"[50403, 314, 1101, 1541, 4953, 329, 340, 13, 314, 651, 262, 1366, 314, 1429, 262, 1366, 290, 788, 314, 467, 736, 284, 262, 1353, 290, 910, 50835]",0.0,-0.15837998191515604,1.6986301369863013,0.0002136960974894464
1080,1080,775416,7763.599999999999,7770.8, no sort of I'm waiting for the next packet. Those are about the two paradigms. One is a,"[50835, 645, 3297, 286, 314, 1101, 4953, 329, 262, 1306, 19638, 13, 5845, 389, 546, 262, 734, 11497, 328, 907, 13, 1881, 318, 257, 51195]",0.0,-0.15837998191515604,1.6986301369863013,0.0002136960974894464
1081,1081,775416,7770.8,7776.96, paradigm where there is sort of notionally a threat of control whether it's an actual operating,"[51195, 23457, 810, 612, 318, 3297, 286, 9495, 453, 257, 2372, 286, 1630, 1771, 340, 338, 281, 4036, 5361, 51503]",0.0,-0.15837998191515604,1.6986301369863013,0.0002136960974894464
1082,1082,775416,7776.96,7784.0, system thread or more an abstraction in async.io we call them tasks. But a task in async,"[51503, 1080, 4704, 393, 517, 281, 34651, 287, 30351, 13, 952, 356, 869, 606, 8861, 13, 887, 257, 4876, 287, 30351, 51855]",0.0,-0.15837998191515604,1.6986301369863013,0.0002136960974894464
1083,1083,778400,7784.4,7793.04, or a thread in other contexts is devoted to one thing and it has logic for all the stages like,"[50383, 393, 257, 4704, 287, 584, 26307, 318, 13378, 284, 530, 1517, 290, 340, 468, 9156, 329, 477, 262, 9539, 588, 50815]",0.0,-0.14565310607085358,1.6440677966101696,0.0008905456634238362
1084,1084,778400,7793.04,7799.84, when it's a web request like first wait wait for the first line of the web request parse it because,"[50815, 618, 340, 338, 257, 3992, 2581, 588, 717, 4043, 4043, 329, 262, 717, 1627, 286, 262, 3992, 2581, 21136, 340, 780, 51155]",0.0,-0.14565310607085358,1.6440677966101696,0.0008905456634238362
1085,1085,778400,7799.84,7808.4, then you know if it's a get or a post or a put or whatever or an error. Then wait until you have,"[51155, 788, 345, 760, 611, 340, 338, 257, 651, 393, 257, 1281, 393, 257, 1234, 393, 4232, 393, 281, 4049, 13, 3244, 4043, 1566, 345, 423, 51583]",0.0,-0.14565310607085358,1.6440677966101696,0.0008905456634238362
1086,1086,780840,7808.4,7812.799999999999, a bunch of lines until there's a blank line then parse that as headers and then,"[50363, 257, 7684, 286, 3951, 1566, 612, 338, 257, 9178, 1627, 788, 21136, 326, 355, 24697, 290, 788, 50583]",0.0,-0.09057689848400298,1.7788461538461537,0.001172626856714487
1087,1087,780840,7813.679999999999,7819.679999999999, interpret that and then wait for the rest of the data to come in if there is any more that you,"[50627, 6179, 326, 290, 788, 4043, 329, 262, 1334, 286, 262, 1366, 284, 1282, 287, 611, 612, 318, 597, 517, 326, 345, 50927]",0.0,-0.09057689848400298,1.7788461538461537,0.001172626856714487
1088,1088,780840,7819.679999999999,7827.5199999999995, request expect that sort of standard web stuff. And the other thing is and there's always endless,"[50927, 2581, 1607, 326, 3297, 286, 3210, 3992, 3404, 13, 843, 262, 584, 1517, 318, 290, 612, 338, 1464, 13079, 51319]",0.0,-0.09057689848400298,1.7788461538461537,0.001172626856714487
1089,1089,780840,7827.5199999999995,7833.92, debate about which approach is more efficient and which approach is more error prone where I just,"[51319, 4384, 546, 543, 3164, 318, 517, 6942, 290, 543, 3164, 318, 517, 4049, 17592, 810, 314, 655, 51639]",0.0,-0.09057689848400298,1.7788461538461537,0.001172626856714487
1090,1090,783392,7834.0,7842.64, have a whole bunch of stacks in front of me and whenever a packet comes in I sort of look at the,"[50367, 423, 257, 2187, 7684, 286, 24285, 287, 2166, 286, 502, 290, 8797, 257, 19638, 2058, 287, 314, 3297, 286, 804, 379, 262, 50799]",0.0,-0.1218020531439012,1.7809523809523808,0.0018760001985356212
1091,1091,783392,7842.64,7847.84, number of the packet that there's some number on the packet and I say oh that packet goes on this,"[50799, 1271, 286, 262, 19638, 326, 612, 338, 617, 1271, 319, 262, 19638, 290, 314, 910, 11752, 326, 19638, 2925, 319, 428, 51059]",0.0,-0.1218020531439012,1.7809523809523808,0.0018760001985356212
1092,1092,783392,7847.84,7853.92, pile and then I can do a little bit and then sort of that pile provides my context.,"[51059, 14540, 290, 788, 314, 460, 466, 257, 1310, 1643, 290, 788, 3297, 286, 326, 14540, 3769, 616, 4732, 13, 51363]",0.0,-0.1218020531439012,1.7809523809523808,0.0018760001985356212
1093,1093,783392,7855.04,7861.4400000000005, And as soon as I'm done with with the processing I sort of I can forget everything about what's,"[51419, 843, 355, 2582, 355, 314, 1101, 1760, 351, 351, 262, 7587, 314, 3297, 286, 314, 460, 6044, 2279, 546, 644, 338, 51739]",0.0,-0.1218020531439012,1.7809523809523808,0.0018760001985356212
1094,1094,786144,7861.44,7866.5599999999995, going on because the next packet will come in from some random other client and it's that pile,"[50363, 1016, 319, 780, 262, 1306, 19638, 481, 1282, 287, 422, 617, 4738, 584, 5456, 290, 340, 338, 326, 14540, 50619]",0.0,-0.08349200736644656,1.662280701754386,0.0007347727078013122
1095,1095,786144,7866.5599999999995,7874.0, or this pile and every time a pile is maybe empty or full or whatever the criteria is I can toss,"[50619, 393, 428, 14540, 290, 790, 640, 257, 14540, 318, 3863, 6565, 393, 1336, 393, 4232, 262, 9987, 318, 314, 460, 12153, 50991]",0.0,-0.08349200736644656,1.662280701754386,0.0007347727078013122
1096,1096,786144,7874.0,7882.08, it away or use it for a new space but several traditional third party libraries for asynchronous,"[50991, 340, 1497, 393, 779, 340, 329, 257, 649, 2272, 475, 1811, 4569, 2368, 2151, 12782, 329, 39354, 51395]",0.0,-0.08349200736644656,1.662280701754386,0.0007347727078013122
1097,1097,786144,7882.08,7888.799999999999, IO processing in Python chose the model of a callback and that's that's the idea where you,"[51395, 24418, 7587, 287, 11361, 7690, 262, 2746, 286, 257, 23838, 290, 326, 338, 326, 338, 262, 2126, 810, 345, 51731]",0.0,-0.08349200736644656,1.662280701754386,0.0007347727078013122
1098,1098,788880,7888.8,7894.72, have a bunch of different stacks of paper in front of you and every time someone gives you a piece,"[50363, 423, 257, 7684, 286, 1180, 24285, 286, 3348, 287, 2166, 286, 345, 290, 790, 640, 2130, 3607, 345, 257, 3704, 50659]",0.0,-0.08310658184450063,1.5945945945945945,0.0008773677400313318
1099,1099,788880,7894.72,7903.2, gives you new sheet you decide which stack it belongs to. And that leads to a certain style,"[50659, 3607, 345, 649, 9629, 345, 5409, 543, 8931, 340, 14448, 284, 13, 843, 326, 5983, 284, 257, 1728, 3918, 51083]",0.0,-0.08310658184450063,1.5945945945945945,0.0008773677400313318
1100,1100,788880,7903.2,7914.16, of spaghetti code that I find sort of aesthetically not pleasing and I was sort of never very successful,"[51083, 286, 48241, 2438, 326, 314, 1064, 3297, 286, 14606, 31786, 407, 28790, 290, 314, 373, 3297, 286, 1239, 845, 4388, 51631]",0.0,-0.08310658184450063,1.5945945945945945,0.0008773677400313318
1101,1101,791416,7914.16,7921.12, and I had heard many stories about people who were also sort of complaining about that style of,"[50363, 290, 314, 550, 2982, 867, 3923, 546, 661, 508, 547, 635, 3297, 286, 18705, 546, 326, 3918, 286, 50711]",0.0,-0.09885309612940228,1.5294117647058822,0.0005340779898688197
1102,1102,791416,7921.12,7927.92, coding. It was very prevalent in JavaScript at the time at least because it was like how the,"[50711, 19617, 13, 632, 373, 845, 21854, 287, 11933, 379, 262, 640, 379, 1551, 780, 340, 373, 588, 703, 262, 51051]",0.0,-0.09885309612940228,1.5294117647058822,0.0005340779898688197
1103,1103,791416,7927.92,7937.36, JavaScript event loop basically works. And so I thought well the task based model where each task,"[51051, 11933, 1785, 9052, 6209, 2499, 13, 843, 523, 314, 1807, 880, 262, 4876, 1912, 2746, 810, 1123, 4876, 51523]",0.0,-0.09885309612940228,1.5294117647058822,0.0005340779898688197
1104,1104,793736,7937.44,7944.0, has a bunch of logic we had mechanisms in the Python language that we could easily reuse,"[50367, 468, 257, 7684, 286, 9156, 356, 550, 11701, 287, 262, 11361, 3303, 326, 356, 714, 3538, 32349, 50695]",0.0,-0.10110092163085938,1.65,0.009801299311220646
1105,1105,793736,7944.719999999999,7951.12, for that. And I thought I want to build a whole library for asynchronous networking IO,"[50731, 329, 326, 13, 843, 314, 1807, 314, 765, 284, 1382, 257, 2187, 5888, 329, 39354, 19140, 24418, 51051]",0.0,-0.10110092163085938,1.65,0.009801299311220646
1106,1106,793736,7952.719999999999,7959.36, and all the other things that may need to be done asynchronously based on that paradigm.,"[51131, 290, 477, 262, 584, 1243, 326, 743, 761, 284, 307, 1760, 355, 24871, 3481, 1912, 319, 326, 23457, 13, 51463]",0.0,-0.10110092163085938,1.65,0.009801299311220646
1107,1107,793736,7959.92,7966.96, And so I just chose a paradigm and try to see how far I could get with that. And it turns out that,"[51491, 843, 523, 314, 655, 7690, 257, 23457, 290, 1949, 284, 766, 703, 1290, 314, 714, 651, 351, 326, 13, 843, 340, 4962, 503, 326, 51843]",0.0,-0.10110092163085938,1.65,0.009801299311220646
1108,1108,796696,7966.96,7973.6, it's pretty good paradigm. So people enjoy that kind of paradigm programming for asynchronous IO,"[50363, 340, 338, 2495, 922, 23457, 13, 1406, 661, 2883, 326, 1611, 286, 23457, 8300, 329, 39354, 24418, 50695]",0.0,-0.1732566621568468,1.4680851063829787,0.00027202029014006257
1109,1109,796696,7974.4,7982.56," relative to callbacks. Okay, beautiful. So how does that all interplay with the infamous","[50735, 3585, 284, 869, 10146, 13, 16805, 11, 4950, 13, 1406, 703, 857, 326, 477, 987, 1759, 351, 262, 16526, 51143]",0.0,-0.1732566621568468,1.4680851063829787,0.00027202029014006257
1110,1110,796696,7982.56,7990.24, Gill the global interpreter lock? Maybe can you say what the Gill is and how does it dance,"[51143, 12981, 262, 3298, 28846, 5793, 30, 6674, 460, 345, 910, 644, 262, 12981, 318, 290, 703, 857, 340, 9280, 51527]",0.0,-0.1732566621568468,1.4680851063829787,0.00027202029014006257
1111,1111,799024,7990.24,7998.08, beautifully with asin coyote? The global interpreter lock solves the problem that Python,"[50363, 21104, 351, 355, 259, 34003, 1258, 30, 383, 3298, 28846, 5793, 39107, 262, 1917, 326, 11361, 50755]",0.0,-0.14543377802922175,1.5737704918032787,0.004453868605196476
1112,1112,799024,7998.08,8005.36, originally was not written with either asynchronous or or parallelism in mind at all. There was no,"[50755, 6198, 373, 407, 3194, 351, 2035, 39354, 393, 393, 10730, 1042, 287, 2000, 379, 477, 13, 1318, 373, 645, 51119]",0.0,-0.14543377802922175,1.5737704918032787,0.004453868605196476
1113,1113,799024,8005.36,8012.0, concurrency in the language. There was no parallelism. There were no threads. Only a small number of,"[51119, 1673, 13382, 287, 262, 3303, 13, 1318, 373, 645, 10730, 1042, 13, 1318, 547, 645, 14390, 13, 5514, 257, 1402, 1271, 286, 51451]",0.0,-0.14543377802922175,1.5737704918032787,0.004453868605196476
1114,1114,801200,8012.08,8018.96, years into Python's initial development. All the new cool operating systems like,"[50367, 812, 656, 11361, 338, 4238, 2478, 13, 1439, 262, 649, 3608, 5361, 3341, 588, 50711]",0.0,-0.31623077392578125,1.401098901098901,0.00728938402608037
1115,1115,801200,8020.0,8027.76," Suno as and Silicon graphics, Irix and then eventually POSIX and Windows all came with","[50763, 3825, 78, 355, 290, 18210, 9382, 11, 314, 8609, 290, 788, 4191, 28069, 10426, 290, 3964, 477, 1625, 351, 51151]",0.0,-0.31623077392578125,1.401098901098901,0.00728938402608037
1116,1116,801200,8027.76,8034.24, threading libraries that let you do multiple things in parallel. And there is a certain,"[51151, 4704, 278, 12782, 326, 1309, 345, 466, 3294, 1243, 287, 10730, 13, 843, 612, 318, 257, 1728, 51475]",0.0,-0.31623077392578125,1.401098901098901,0.00728938402608037
1117,1117,803424,8034.96,8041.36, certain sort of principle which is the operating system handles the threads for you.,"[50399, 1728, 3297, 286, 7989, 543, 318, 262, 5361, 1080, 17105, 262, 14390, 329, 345, 13, 50719]",0.0,-0.11376062234242758,1.6094674556213018,0.0006516005960293114
1118,1118,803424,8042.5599999999995,8051.28, And the program can pretend that there are as many CPUs as there are threads in the program.,"[50779, 843, 262, 1430, 460, 16614, 326, 612, 389, 355, 867, 32340, 355, 612, 389, 14390, 287, 262, 1430, 13, 51215]",0.0,-0.11376062234242758,1.6094674556213018,0.0006516005960293114
1119,1119,803424,8053.2,8061.2," And those CPUs were completely independently. And if you don't have enough CPUs, the operating","[51311, 843, 883, 32340, 547, 3190, 14799, 13, 843, 611, 345, 836, 470, 423, 1576, 32340, 11, 262, 5361, 51711]",0.0,-0.11376062234242758,1.6094674556213018,0.0006516005960293114
1120,1120,806120,8061.28,8067.5199999999995," system sort of simulates those extra CPUs. On the other hand, if you have enough CPUs,","[50367, 1080, 3297, 286, 985, 15968, 883, 3131, 32340, 13, 1550, 262, 584, 1021, 11, 611, 345, 423, 1576, 32340, 11, 50679]",0.0,-0.13025365976186898,1.4367816091954022,0.00018851527420338243
1121,1121,806120,8068.32,8075.76, you can get a lot of work done by deploying those multiple CPUs. But Python wasn't written,"[50719, 345, 460, 651, 257, 1256, 286, 670, 1760, 416, 29682, 883, 3294, 32340, 13, 887, 11361, 2492, 470, 3194, 51091]",0.0,-0.13025365976186898,1.4367816091954022,0.00018851527420338243
1122,1122,806120,8076.72,8089.12," to do that. And so as libraries for for multi threading were added to C,","[51139, 284, 466, 326, 13, 843, 523, 355, 12782, 329, 329, 5021, 4704, 278, 547, 2087, 284, 327, 11, 51759]",0.0,-0.13025365976186898,1.4367816091954022,0.00018851527420338243
1123,1123,808912,8090.08,8097.2," but every operating system vendor was adding their own version of that. We thought, and maybe","[50411, 475, 790, 5361, 1080, 18371, 373, 4375, 511, 898, 2196, 286, 326, 13, 775, 1807, 11, 290, 3863, 50767]",0.0,-0.11881137424045139,1.662280701754386,8.502936543663964e-05
1124,1124,808912,8097.2,8102.8," we were wrong, but at the time we thought, well, we quickly want to be able to support these multiple","[50767, 356, 547, 2642, 11, 475, 379, 262, 640, 356, 1807, 11, 880, 11, 356, 2952, 765, 284, 307, 1498, 284, 1104, 777, 3294, 51047]",0.0,-0.11881137424045139,1.662280701754386,8.502936543663964e-05
1125,1125,808912,8102.8,8108.88," threads because they seemed at the time in the early 90s when they were new, at least to me,","[51047, 14390, 780, 484, 3947, 379, 262, 640, 287, 262, 1903, 4101, 82, 618, 484, 547, 649, 11, 379, 1551, 284, 502, 11, 51351]",0.0,-0.11881137424045139,1.662280701754386,8.502936543663964e-05
1126,1126,808912,8109.84,8116.08," they seemed a cool, interesting programming paradigm. And one of the things that Python at","[51399, 484, 3947, 257, 3608, 11, 3499, 8300, 23457, 13, 843, 530, 286, 262, 1243, 326, 11361, 379, 51711]",0.0,-0.11881137424045139,1.662280701754386,8.502936543663964e-05
1127,1127,811608,8116.08,8125.04, least at the time felt was nice about the language was that we could give a safe version of all kinds of,"[50363, 1551, 379, 262, 640, 2936, 373, 3621, 546, 262, 3303, 373, 326, 356, 714, 1577, 257, 3338, 2196, 286, 477, 6982, 286, 50811]",0.0,-0.11769739247984805,1.4689265536723164,0.0002967731561511755
1128,1128,811608,8125.76,8131.04, cool new operating system toys to the Python programmer. Like I remember,"[50847, 3608, 649, 5361, 1080, 14958, 284, 262, 11361, 24292, 13, 4525, 314, 3505, 51111]",0.0,-0.11769739247984805,1.4689265536723164,0.0002967731561511755
1129,1129,811608,8133.28,8139.84," one or two years before threading, I had spent some time adding networking sockets","[51223, 530, 393, 734, 812, 878, 4704, 278, 11, 314, 550, 3377, 617, 640, 4375, 19140, 37037, 51551]",0.0,-0.11769739247984805,1.4689265536723164,0.0002967731561511755
1130,1130,813984,8140.4800000000005,8149.52," to Python. And they were very literal translation of the networking sockets that were in the BSD operating system. So Unix, BSD.","[50395, 284, 11361, 13, 843, 484, 547, 845, 18875, 11059, 286, 262, 19140, 37037, 326, 547, 287, 262, 347, 10305, 5361, 1080, 13, 1406, 33501, 11, 347, 10305, 13, 50847]",0.0,-0.26768232900885086,1.5884955752212389,0.0005399062647484243
1131,1131,813984,8150.72,8164.72," But the nice thing was if you're using sockets from Python, then all the things you can do wrong with sockets in C would automatically give you a clear error message instead of just ending up with a malfunctioning hanging program.","[50907, 887, 262, 3621, 1517, 373, 611, 345, 821, 1262, 37037, 422, 11361, 11, 788, 477, 262, 1243, 345, 460, 466, 2642, 351, 37037, 287, 327, 561, 6338, 1577, 345, 257, 1598, 4049, 3275, 2427, 286, 655, 7464, 510, 351, 257, 35654, 278, 10938, 1430, 13, 51607]",0.0,-0.26768232900885086,1.5884955752212389,0.0005399062647484243
1132,1132,816472,8164.72,8194.16," And so we thought, well, we'll do the same thing with threading. But we didn't really want to rewrite the interpreter to be thread safe because that was, was like, that would be a very complex refactoring of all the interpreter code and all the runtime code, because all the objects were written with the assumption that there's only one thread. And so we said, okay, well,","[50363, 843, 523, 356, 1807, 11, 880, 11, 356, 1183, 466, 262, 976, 1517, 351, 4704, 278, 13, 887, 356, 1422, 470, 1107, 765, 284, 28183, 262, 28846, 284, 307, 4704, 3338, 780, 326, 373, 11, 373, 588, 11, 326, 561, 307, 257, 845, 3716, 1006, 529, 3255, 286, 477, 262, 28846, 2438, 290, 477, 262, 19124, 2438, 11, 780, 477, 262, 5563, 547, 3194, 351, 262, 13196, 326, 612, 338, 691, 530, 4704, 13, 843, 523, 356, 531, 11, 8788, 11, 880, 11, 51835]",0.0,-0.1894526148951331,1.7511737089201878,0.013111486099660397
1133,1133,819472,8194.72,8209.199999999999," we'll take our losses, we'll provide something that looks like threads. And as long as you only have a single CPU on your computer, which most computers at the time did, it feels just like threads because","[50363, 356, 1183, 1011, 674, 9089, 11, 356, 1183, 2148, 1223, 326, 3073, 588, 14390, 13, 843, 355, 890, 355, 345, 691, 423, 257, 2060, 9135, 319, 534, 3644, 11, 543, 749, 9061, 379, 262, 640, 750, 11, 340, 5300, 655, 588, 14390, 780, 51087]",0.0,-0.1301874037711851,1.6194331983805668,0.0022361103910952806
1134,1134,819472,8210.64,8224.32," the whole idea of multiple threads in the OS was that even if your computer only had one CPU, you could still fire up at many threads as you wanted. Well, within reason, maybe 10 or 12, not 5000.","[51159, 262, 2187, 2126, 286, 3294, 14390, 287, 262, 7294, 373, 326, 772, 611, 534, 3644, 691, 550, 530, 9135, 11, 345, 714, 991, 2046, 510, 379, 867, 14390, 355, 345, 2227, 13, 3894, 11, 1626, 1738, 11, 3863, 838, 393, 1105, 11, 407, 23336, 13, 51843]",0.0,-0.1301874037711851,1.6194331983805668,0.0022361103910952806
1135,1135,822472,8225.679999999998,8242.16, And so we thought we had conquered the abstraction of threads pretty well because multi core CPUs were not in in most Python programmers hands anyway.,"[50411, 843, 523, 356, 1807, 356, 550, 29346, 262, 34651, 286, 14390, 2495, 880, 780, 5021, 4755, 32340, 547, 407, 287, 287, 749, 11361, 24867, 2832, 6949, 13, 51235]",0.0,-0.3251794179280599,1.4316939890710383,0.0009965876815840602
1136,1136,822472,8242.16,8250.72," And then of course, a couple of more iterations of Moore's law and computers getting faster. And at some point,","[51235, 843, 788, 286, 1781, 11, 257, 3155, 286, 517, 34820, 286, 8877, 338, 1099, 290, 9061, 1972, 5443, 13, 843, 379, 617, 966, 11, 51663]",0.0,-0.3251794179280599,1.4316939890710383,0.0009965876815840602
1137,1137,825072,8251.519999999999,8259.279999999999," the chip designers decided that they couldn't make the CPUs faster, but they could still make","[50403, 262, 11594, 15441, 3066, 326, 484, 3521, 470, 787, 262, 32340, 5443, 11, 475, 484, 714, 991, 787, 50791]",0.0,-0.08283455932841581,1.5683060109289617,0.0005604284815490246
1138,1138,825072,8259.279999999999,8265.84," them smaller. And so they could put multiple CPUs on one chip. And suddenly, there was all this pressure","[50791, 606, 4833, 13, 843, 523, 484, 714, 1234, 3294, 32340, 319, 530, 11594, 13, 843, 6451, 11, 612, 373, 477, 428, 3833, 51119]",0.0,-0.08283455932841581,1.5683060109289617,0.0005604284815490246
1139,1139,825072,8266.48,8273.519999999999, about do things in parallel. And that's where the solution we had in Python didn't work.,"[51151, 546, 466, 1243, 287, 10730, 13, 843, 326, 338, 810, 262, 4610, 356, 550, 287, 11361, 1422, 470, 670, 13, 51503]",0.0,-0.08283455932841581,1.5683060109289617,0.0005604284815490246
1140,1140,827352,8273.76,8284.960000000001," And that's that sort of the moment that the Gil became became infamous, because the Gil, the Gil was the solution we used to sort of","[50375, 843, 326, 338, 326, 3297, 286, 262, 2589, 326, 262, 10689, 2627, 2627, 16526, 11, 780, 262, 10689, 11, 262, 10689, 373, 262, 4610, 356, 973, 284, 3297, 286, 50935]",0.0,-0.24187508144894163,1.635,0.0018657681066542864
1141,1141,827352,8287.04,8293.92, take this single interpreter and share it between all the different operating system threads that you could create.,"[51039, 1011, 428, 2060, 28846, 290, 2648, 340, 1022, 477, 262, 1180, 5361, 1080, 14390, 326, 345, 714, 2251, 13, 51383]",0.0,-0.24187508144894163,1.635,0.0018657681066542864
1142,1142,827352,8294.880000000001,8300.560000000001," And so as long as the hardware physically only had one CPU, that was all fine.","[51431, 843, 523, 355, 890, 355, 262, 6890, 10170, 691, 550, 530, 9135, 11, 326, 373, 477, 3734, 13, 51715]",0.0,-0.24187508144894163,1.635,0.0018657681066542864
1143,1143,830056,8301.519999999999,8309.199999999999," And then as hardware vendors were suddenly telling us, Oh, you got to paralyze. Everything's got to be paralyzed.","[50411, 843, 788, 355, 6890, 17192, 547, 6451, 5149, 514, 11, 3966, 11, 345, 1392, 284, 26901, 2736, 13, 11391, 338, 1392, 284, 307, 36175, 13, 50795]",0.0,-0.22711896372365428,1.6043478260869566,0.0006443081656470895
1144,1144,830056,8310.0,8321.199999999999," People started saying, Oh, but we can use multiple threads in Python. And then they discovered, Oh, but actually all threads run on a single, single core.","[50835, 4380, 2067, 2282, 11, 3966, 11, 475, 356, 460, 779, 3294, 14390, 287, 11361, 13, 843, 788, 484, 5071, 11, 3966, 11, 475, 1682, 477, 14390, 1057, 319, 257, 2060, 11, 2060, 4755, 13, 51395]",0.0,-0.22711896372365428,1.6043478260869566,0.0006443081656470895
1145,1145,830056,8321.199999999999,8328.96," Yeah. I mean, is there a way, is there ideas in the future to remove the global interpreter log Gil?","[51395, 9425, 13, 314, 1612, 11, 318, 612, 257, 835, 11, 318, 612, 4213, 287, 262, 2003, 284, 4781, 262, 3298, 28846, 2604, 10689, 30, 51783]",0.0,-0.22711896372365428,1.6043478260869566,0.0006443081656470895
1146,1146,832896,8329.439999999999,8332.96," Like maybe multiple sub interpreters, some tricky.","[50387, 4525, 3863, 3294, 850, 16795, 1010, 11, 617, 17198, 13, 50563]",0.0,-0.18910540262858072,1.6479591836734695,0.0005994339589960873
1147,1147,832896,8334.72,8340.48," Interpreters on top of interpreters kind of thing. Yeah, there are a couple of possible","[50651, 4225, 3866, 1010, 319, 1353, 286, 16795, 1010, 1611, 286, 1517, 13, 9425, 11, 612, 389, 257, 3155, 286, 1744, 50939]",0.0,-0.18910540262858072,1.6479591836734695,0.0005994339589960873
1148,1148,832896,8341.199999999999,8348.24," futures there. The most likely future is that we'll get multiple sub interpreters,","[50975, 25650, 612, 13, 383, 749, 1884, 2003, 318, 326, 356, 1183, 651, 3294, 850, 16795, 1010, 11, 51327]",0.0,-0.18910540262858072,1.6479591836734695,0.0005994339589960873
1149,1149,832896,8349.359999999999,8358.08, which each run a completely independent Python program. Nice. But there there's still some benefit of,"[51383, 543, 1123, 1057, 257, 3190, 4795, 11361, 1430, 13, 18460, 13, 887, 612, 612, 338, 991, 617, 4414, 286, 51819]",0.0,-0.18910540262858072,1.6479591836734695,0.0005994339589960873
1150,1150,835896,8359.119999999999,8367.039999999999, of sort of faster communication between those programs. But it's also managing for you this,"[50371, 286, 3297, 286, 5443, 6946, 1022, 883, 4056, 13, 887, 340, 338, 635, 11149, 329, 345, 428, 50767]",0.0,-0.21222752700617284,1.695852534562212,0.0004868337418884039
1151,1151,835896,8367.759999999998,8372.32," running a multiple Python programs. Yeah, we just hidden from you, right?","[50803, 2491, 257, 3294, 11361, 4056, 13, 9425, 11, 356, 655, 7104, 422, 345, 11, 826, 30, 51031]",0.0,-0.21222752700617284,1.695852534562212,0.0004868337418884039
1152,1152,835896,8373.439999999999,8379.919999999998," It's hidden from you, but you have to spend more time communicating between those programs, because the sort of","[51087, 632, 338, 7104, 422, 345, 11, 475, 345, 423, 284, 4341, 517, 640, 22889, 1022, 883, 4056, 11, 780, 262, 3297, 286, 51411]",0.0,-0.21222752700617284,1.695852534562212,0.0004868337418884039
1153,1153,835896,8381.039999999999,8388.08, the attractive thing about the multi threaded model is that the threads can share objects.,"[51467, 262, 10966, 1517, 546, 262, 5021, 40945, 2746, 318, 326, 262, 14390, 460, 2648, 5563, 13, 51819]",0.0,-0.21222752700617284,1.695852534562212,0.0004868337418884039
1154,1154,838808,8388.72,8393.2," At the same time, that's also the downfall of the multi threaded programming model,","[50395, 1629, 262, 976, 640, 11, 326, 338, 635, 262, 38041, 286, 262, 5021, 40945, 8300, 2746, 11, 50619]",0.0,-0.12751244765061598,1.5469613259668509,0.0002001980901695788
1155,1155,838808,8393.84,8401.6," because when you do share objects, you weren't and you didn't necessarily intend to share them or","[50651, 780, 618, 345, 466, 2648, 5563, 11, 345, 6304, 470, 290, 345, 1422, 470, 6646, 14765, 284, 2648, 606, 393, 51039]",0.0,-0.12751244765061598,1.5469613259668509,0.0002001980901695788
1156,1156,838808,8402.56,8410.88, there were aspects of those objects that were not reusable. You get all kinds of concurrency bugs.,"[51087, 612, 547, 7612, 286, 883, 5563, 326, 547, 407, 42339, 13, 921, 651, 477, 6982, 286, 1673, 13382, 11316, 13, 51503]",0.0,-0.12751244765061598,1.5469613259668509,0.0002001980901695788
1157,1157,841088,8411.439999999999,8419.279999999999, And so the reason I wrote that little blog post about semaphores was that concurrency bugs are,"[50391, 843, 523, 262, 1738, 314, 2630, 326, 1310, 4130, 1281, 546, 5026, 6570, 2850, 373, 326, 1673, 13382, 11316, 389, 50783]",0.0,-0.1353046444879062,1.4793814432989691,0.0010508795967325568
1158,1158,841088,8419.279999999999,8427.759999999998, just harder. It would be nice if Python had no global interpreter log and it had so-called free,"[50783, 655, 7069, 13, 632, 561, 307, 3621, 611, 11361, 550, 645, 3298, 28846, 2604, 290, 340, 550, 523, 12, 7174, 1479, 51207]",0.0,-0.1353046444879062,1.4793814432989691,0.0010508795967325568
1159,1159,841088,8427.759999999998,8437.679999999998, threading. But it would also cause a lot more software bugs. The interesting thing is that there,"[51207, 4704, 278, 13, 887, 340, 561, 635, 2728, 257, 1256, 517, 3788, 11316, 13, 383, 3499, 1517, 318, 326, 612, 51703]",0.0,-0.1353046444879062,1.4793814432989691,0.0010508795967325568
1160,1160,843768,8437.68,8444.720000000001, is still a possible future where we are actually going to or where we could experiment at least,"[50363, 318, 991, 257, 1744, 2003, 810, 356, 389, 1682, 1016, 284, 393, 810, 356, 714, 6306, 379, 1551, 50715]",0.0,-0.14034279780601389,1.5027027027027027,0.0010603676782920957
1161,1161,843768,8444.720000000001,8454.24," with that, because there is a guy working for Facebook who has developed a fork of CPython","[50715, 351, 326, 11, 780, 612, 318, 257, 3516, 1762, 329, 3203, 508, 468, 4166, 257, 15563, 286, 16932, 7535, 51191]",0.0,-0.14034279780601389,1.5027027027027027,0.0010603676782920957
1162,1162,843768,8455.2,8463.68," that he called the no-gill interpreter, where he removed the gill and made a whole bunch of","[51239, 326, 339, 1444, 262, 645, 12, 70, 359, 28846, 11, 810, 339, 4615, 262, 308, 359, 290, 925, 257, 2187, 7684, 286, 51663]",0.0,-0.14034279780601389,1.5027027027027027,0.0010603676782920957
1163,1163,846368,8463.76,8469.12, optimizations so that the single threaded case doesn't run too much slower.,"[50367, 41446, 523, 326, 262, 2060, 40945, 1339, 1595, 470, 1057, 1165, 881, 13611, 13, 50635]",0.0,-0.14542951223985204,1.5125,0.004385601729154587
1164,1164,846368,8470.64,8475.36, And multi threaded case will actually use all the cores that you have.,"[50711, 843, 5021, 40945, 1339, 481, 1682, 779, 477, 262, 21758, 326, 345, 423, 13, 50947]",0.0,-0.14542951223985204,1.5125,0.004385601729154587
1165,1165,846368,8478.08,8488.720000000001, So that would be an interesting possibility if we would be willing as Python core developers to,"[51083, 1406, 326, 561, 307, 281, 3499, 5885, 611, 356, 561, 307, 4684, 355, 11361, 4755, 6505, 284, 51615]",0.0,-0.14542951223985204,1.5125,0.004385601729154587
1166,1166,848872,8488.72,8497.84, actually maintain that code indefinitely. And if we're willing to put up with the,"[50363, 1682, 5529, 326, 2438, 24391, 13, 843, 611, 356, 821, 4684, 284, 1234, 510, 351, 262, 50819]",0.0,-0.11562462720003995,1.5314285714285714,0.002698294585570693
1167,1167,848872,8497.84,8504.24, additional complexity of the interpreter and the additional sort of overhead for the single,"[50819, 3224, 13357, 286, 262, 28846, 290, 262, 3224, 3297, 286, 16965, 329, 262, 2060, 51139]",0.0,-0.11562462720003995,1.5314285714285714,0.002698294585570693
1168,1168,848872,8504.24,8517.279999999999," threaded case, and I'm personally not convinced that there are enough people needing the speed","[51139, 40945, 1339, 11, 290, 314, 1101, 7620, 407, 9431, 326, 612, 389, 1576, 661, 18139, 262, 2866, 51791]",0.0,-0.11562462720003995,1.5314285714285714,0.002698294585570693
1169,1169,851728,8517.28,8526.400000000001, of multiple threads with their Python programs that it's worth to sort of take that performance,"[50363, 286, 3294, 14390, 351, 511, 11361, 4056, 326, 340, 338, 2861, 284, 3297, 286, 1011, 326, 2854, 50819]",0.0,-0.08950471878051758,1.528735632183908,0.000707584316842258
1170,1170,851728,8526.400000000001,8532.800000000001, hit and that complexity hit. And I feel that the gill actually is a pretty nice,"[50819, 2277, 290, 326, 13357, 2277, 13, 843, 314, 1254, 326, 262, 308, 359, 1682, 318, 257, 2495, 3621, 51139]",0.0,-0.08950471878051758,1.528735632183908,0.000707584316842258
1171,1171,851728,8533.76,8541.28, goldilocks point between no threads and all threads all the time. But not everybody agrees,"[51187, 3869, 346, 3320, 966, 1022, 645, 14390, 290, 477, 14390, 477, 262, 640, 13, 887, 407, 7288, 14386, 51563]",0.0,-0.08950471878051758,1.528735632183908,0.000707584316842258
1172,1172,854128,8541.28,8547.68, on that. So that is definitely a possible future. The sub interpreters look like a fairly safe,"[50363, 319, 326, 13, 1406, 326, 318, 4753, 257, 1744, 2003, 13, 383, 850, 16795, 1010, 804, 588, 257, 6547, 3338, 50683]",0.0,-0.16941979056910464,1.4845360824742269,0.021355602890253067
1173,1173,854128,8547.68,8556.720000000001," bet for 312, so say a year from now. So the goal is to do a new version every year for Python.","[50683, 731, 329, 34465, 11, 523, 910, 257, 614, 422, 783, 13, 1406, 262, 3061, 318, 284, 466, 257, 649, 2196, 790, 614, 329, 11361, 13, 51135]",0.0,-0.16941979056910464,1.4845360824742269,0.021355602890253067
1174,1174,854128,8556.720000000001,8563.92," Let me ask you perhaps a fun question, but there's a philosophy to do. Will there ever be a Python","[51135, 3914, 502, 1265, 345, 3737, 257, 1257, 1808, 11, 475, 612, 338, 257, 8876, 284, 466, 13, 2561, 612, 1683, 307, 257, 11361, 51495]",0.0,-0.16941979056910464,1.4845360824742269,0.021355602890253067
1175,1175,856392,8563.92,8574.960000000001," 4.0? Now, before you say it's currently a joke, and probably not, we're going to go to 3.99 or 3.9999.","[50363, 604, 13, 15, 30, 2735, 11, 878, 345, 910, 340, 338, 3058, 257, 9707, 11, 290, 2192, 407, 11, 356, 821, 1016, 284, 467, 284, 513, 13, 2079, 393, 513, 13, 2079, 2079, 13, 50915]",0.0,-0.19230236830534758,1.2340425531914894,0.07257748395204544
1176,1176,856392,8576.24,8583.84, Can you imagine possible features that Python 4.0 might have that would,"[50979, 1680, 345, 5967, 1744, 3033, 326, 11361, 604, 13, 15, 1244, 423, 326, 561, 51359]",0.0,-0.19230236830534758,1.2340425531914894,0.07257748395204544
1177,1177,858384,8584.72,8595.2," necessitate the creation of the new 4.0? Given the amount of pain and joy, suffering and triumph","[50407, 2418, 12027, 262, 6282, 286, 262, 649, 604, 13, 15, 30, 11259, 262, 2033, 286, 2356, 290, 8716, 11, 7195, 290, 15499, 50931]",0.0,-0.14824892580509186,1.4970414201183433,0.002342719119042158
1178,1178,858384,8595.2,8599.04, that was involved in the move between version two and version three?,"[50931, 326, 373, 2950, 287, 262, 1445, 1022, 2196, 734, 290, 2196, 1115, 30, 51123]",0.0,-0.14824892580509186,1.4970414201183433,0.002342719119042158
1179,1179,858384,8601.36,8611.6," Yeah, well, we as a community and as a core development team, we have a large amount of","[51239, 9425, 11, 880, 11, 356, 355, 257, 2055, 290, 355, 257, 4755, 2478, 1074, 11, 356, 423, 257, 1588, 2033, 286, 51751]",0.0,-0.14824892580509186,1.4970414201183433,0.002342719119042158
1180,1180,861160,8612.32,8623.28," painful memories about the Python 3 transition, which is one reason that everybody is happy","[50399, 12132, 9846, 546, 262, 11361, 513, 6801, 11, 543, 318, 530, 1738, 326, 7288, 318, 3772, 50947]",0.0,-0.1277173126445097,1.515625,0.00034389927168376744
1181,1181,861160,8623.28,8631.2," that we've decided there's not going to be a 4.0 at least, not anytime soon. And if there is going","[50947, 326, 356, 1053, 3066, 612, 338, 407, 1016, 284, 307, 257, 604, 13, 15, 379, 1551, 11, 407, 17949, 2582, 13, 843, 611, 612, 318, 1016, 51343]",0.0,-0.1277173126445097,1.515625,0.00034389927168376744
1182,1182,861160,8631.2,8639.36," to be one that will sort of plan the transition very differently. Because clearly, we underestimated","[51343, 284, 307, 530, 326, 481, 3297, 286, 1410, 262, 6801, 845, 10338, 13, 4362, 4084, 11, 356, 36190, 51751]",0.0,-0.1277173126445097,1.515625,0.00034389927168376744
1183,1183,863936,8639.36,8650.24, the pain that transition caused for our users in the Python 3 case. And had we known we could have,"[50363, 262, 2356, 326, 6801, 4073, 329, 674, 2985, 287, 262, 11361, 513, 1339, 13, 843, 550, 356, 1900, 356, 714, 423, 50907]",0.0,-0.13166644356467508,1.5591397849462365,0.0006950481911189854
1184,1184,863936,8650.24,8658.960000000001," sort of designed Python 3 somewhat differently without making it any worse, we just thought that","[50907, 3297, 286, 3562, 11361, 513, 6454, 10338, 1231, 1642, 340, 597, 4785, 11, 356, 655, 1807, 326, 51343]",0.0,-0.13166644356467508,1.5591397849462365,0.0006950481911189854
1185,1185,863936,8658.960000000001,8666.960000000001," we had a good plan, but we underestimated where what sort of the users were capable of when it","[51343, 356, 550, 257, 922, 1410, 11, 475, 356, 36190, 810, 644, 3297, 286, 262, 2985, 547, 6007, 286, 618, 340, 51743]",0.0,-0.13166644356467508,1.5591397849462365,0.0006950481911189854
1186,1186,866696,8666.96,8672.64," comes to that kind of transition. By the way, I think we talked way before, like a year and a","[50363, 2058, 284, 326, 1611, 286, 6801, 13, 2750, 262, 835, 11, 314, 892, 356, 6619, 835, 878, 11, 588, 257, 614, 290, 257, 50647]",0.0,-0.18236334482828775,1.5053763440860215,0.006328719202429056
1187,1187,866696,8672.64,8682.96, half before the Python 2 officially end of life. What was that? What was your memory of the end,"[50647, 2063, 878, 262, 11361, 362, 8720, 886, 286, 1204, 13, 1867, 373, 326, 30, 1867, 373, 534, 4088, 286, 262, 886, 51163]",0.0,-0.18236334482828775,1.5053763440860215,0.006328719202429056
1188,1188,866696,8682.96,8690.16," of life? Did you shed a tear on January 1st, 2020? Was there everyone on the core team had","[51163, 286, 1204, 30, 7731, 345, 14999, 257, 11626, 319, 3269, 352, 301, 11, 12131, 30, 8920, 612, 2506, 319, 262, 4755, 1074, 550, 51523]",0.0,-0.18236334482828775,1.5053763440860215,0.006328719202429056
1189,1189,869016,8690.24,8697.68," basically moved on years before? It was purely, it was a little symbolic moment","[50367, 6209, 3888, 319, 812, 878, 30, 632, 373, 14177, 11, 340, 373, 257, 1310, 18975, 2589, 50739]",0.0,-0.12061444405586488,1.3989071038251366,0.008292014710605145
1190,1190,869016,8699.68,8711.28, to signal to the remaining users that there was no longer going to be any new releases or support,"[50839, 284, 6737, 284, 262, 5637, 2985, 326, 612, 373, 645, 2392, 1016, 284, 307, 597, 649, 10050, 393, 1104, 51419]",0.0,-0.12061444405586488,1.3989071038251366,0.008292014710605145
1191,1191,869016,8711.28,8717.68, for Python 2.7. Did you shed a single tear while looking out over the horizon?,"[51419, 329, 11361, 362, 13, 22, 13, 7731, 345, 14999, 257, 2060, 11626, 981, 2045, 503, 625, 262, 17810, 30, 51739]",0.0,-0.12061444405586488,1.3989071038251366,0.008292014710605145
1192,1192,871768,8718.48,8724.16," I'm not a very poetic person and I don't shed tears like that, but no.","[50403, 314, 1101, 407, 257, 845, 38273, 1048, 290, 314, 836, 470, 14999, 10953, 588, 326, 11, 475, 645, 13, 50687]",0.0,-0.2234871820970015,1.5330188679245282,0.002952028764411807
1193,1193,871768,8727.04,8734.960000000001," We actually had planned a party, but the party was planned for the US Python conference that year,","[50831, 775, 1682, 550, 6027, 257, 2151, 11, 475, 262, 2151, 373, 6027, 329, 262, 1294, 11361, 4495, 326, 614, 11, 51227]",0.0,-0.2234871820970015,1.5330188679245282,0.002952028764411807
1194,1194,871768,8734.960000000001,8739.12," which would never happen, of course, because of the pandemic. Oh, was it like a March?","[51227, 543, 561, 1239, 1645, 11, 286, 1781, 11, 780, 286, 262, 19798, 5314, 13, 3966, 11, 373, 340, 588, 257, 2805, 30, 51435]",0.0,-0.2234871820970015,1.5330188679245282,0.002952028764411807
1195,1195,871768,8739.12,8744.4," Yeah, the conference was going to be, I think, late April that year.","[51435, 9425, 11, 262, 4495, 373, 1016, 284, 307, 11, 314, 892, 11, 2739, 3035, 326, 614, 13, 51699]",0.0,-0.2234871820970015,1.5330188679245282,0.002952028764411807
1196,1196,874440,8745.199999999999,8753.359999999999," So that was a very difficult decision to cancel it, but they did. Anyway, if we're going to have","[50403, 1406, 326, 373, 257, 845, 2408, 2551, 284, 14241, 340, 11, 475, 484, 750, 13, 21836, 11, 611, 356, 821, 1016, 284, 423, 50811]",0.0,-0.17075611168230084,1.5824175824175823,0.003243272425606847
1197,1197,874440,8753.359999999999,8761.6," a Python 4, we're going to have to have both a different reason for having that and a different","[50811, 257, 11361, 604, 11, 356, 821, 1016, 284, 423, 284, 423, 1111, 257, 1180, 1738, 329, 1719, 326, 290, 257, 1180, 51223]",0.0,-0.17075611168230084,1.5824175824175823,0.003243272425606847
1198,1198,874440,8761.6,8769.039999999999," process for managing the transition. Can you imagine a possible process that, so I think you're","[51223, 1429, 329, 11149, 262, 6801, 13, 1680, 345, 5967, 257, 1744, 1429, 326, 11, 523, 314, 892, 345, 821, 51595]",0.0,-0.17075611168230084,1.5824175824175823,0.003243272425606847
1199,1199,876904,8769.12,8774.480000000001, implying that if there's a 4.0 in some ways it would break back compatibility?,"[50367, 30253, 326, 611, 612, 338, 257, 604, 13, 15, 287, 617, 2842, 340, 561, 2270, 736, 17764, 30, 50635]",0.0,-0.20050738198416573,1.3958333333333333,0.0006598602631129324
1200,1200,876904,8775.36,8783.84," So here is a concrete thought I've had and I'm not unique, but not everyone agrees with this.","[50679, 1406, 994, 318, 257, 10017, 1807, 314, 1053, 550, 290, 314, 1101, 407, 3748, 11, 475, 407, 2506, 14386, 351, 428, 13, 51103]",0.0,-0.20050738198416573,1.3958333333333333,0.0006598602631129324
1201,1201,876904,8783.84,8792.240000000002," So this is definitely a personal opinion. If we were to try something like that no-gill Python,","[51103, 1406, 428, 318, 4753, 257, 2614, 4459, 13, 1002, 356, 547, 284, 1949, 1223, 588, 326, 645, 12, 70, 359, 11361, 11, 51523]",0.0,-0.20050738198416573,1.3958333333333333,0.0006598602631129324
1202,1202,879224,8792.32,8809.52," my expectation is that it would feel just different enough, at least for the part of the Python ecosystem","[50367, 616, 17507, 318, 326, 340, 561, 1254, 655, 1180, 1576, 11, 379, 1551, 329, 262, 636, 286, 262, 11361, 13187, 51227]",0.0,-0.16541398655284534,1.4027777777777777,6.659245991613716e-05
1203,1203,879224,8809.52,8819.28, that is heavily based on C extensions. And that is like the entire machine learning data science,"[51227, 326, 318, 7272, 1912, 319, 327, 18366, 13, 843, 326, 318, 588, 262, 2104, 4572, 4673, 1366, 3783, 51715]",0.0,-0.16541398655284534,1.4027777777777777,6.659245991613716e-05
1204,1204,881928,8819.28,8830.0, scientific Python world is all based on C extensions for Python. And so those people would,"[50363, 5654, 11361, 995, 318, 477, 1912, 319, 327, 18366, 329, 11361, 13, 843, 523, 883, 661, 561, 50899]",0.0,-0.0918332040309906,1.574585635359116,0.002098340541124344
1205,1205,881928,8830.0,8841.04," likely feel the pain the most because they, even if we don't change anything about the syntax of","[50899, 1884, 1254, 262, 2356, 262, 749, 780, 484, 11, 772, 611, 356, 836, 470, 1487, 1997, 546, 262, 15582, 286, 51451]",0.0,-0.0918332040309906,1.574585635359116,0.002098340541124344
1206,1206,881928,8841.04,8846.640000000001," the language and the semantics of the language when you're writing Python code, we could even say","[51451, 262, 3303, 290, 262, 33815, 286, 262, 3303, 618, 345, 821, 3597, 11361, 2438, 11, 356, 714, 772, 910, 51731]",0.0,-0.0918332040309906,1.574585635359116,0.002098340541124344
1207,1207,884664,8846.64,8855.599999999999, suppose that after Python say 319 instead of 320 will have 4.0. Suppose that's the time when we,"[50363, 11691, 326, 706, 11361, 910, 40385, 2427, 286, 20959, 481, 423, 604, 13, 15, 13, 39200, 326, 338, 262, 640, 618, 356, 50811]",0.0,-0.152111140164462,1.5240641711229947,0.0026817352045327425
1208,1208,884664,8856.56,8866.64, flip the switch to 4.0 will not have a gill. Imagine it was like that. So I would probably say,"[50859, 14283, 262, 5078, 284, 604, 13, 15, 481, 407, 423, 257, 308, 359, 13, 18450, 340, 373, 588, 326, 13, 1406, 314, 561, 2192, 910, 51363]",0.0,-0.152111140164462,1.5240641711229947,0.0026817352045327425
1209,1209,884664,8868.24,8876.4," that particular year the release that we named 4.0 will be syntactically, it will not have any","[51443, 326, 1948, 614, 262, 2650, 326, 356, 3706, 604, 13, 15, 481, 307, 7419, 529, 1146, 11, 340, 481, 407, 423, 597, 51851]",0.0,-0.152111140164462,1.5240641711229947,0.0026817352045327425
1210,1210,887640,8876.4,8882.96," new syntactical features, no new modules in the standard library, no new built-in functions.","[50363, 649, 7419, 529, 605, 3033, 11, 645, 649, 13103, 287, 262, 3210, 5888, 11, 645, 649, 3170, 12, 259, 5499, 13, 50691]",0.0,-0.15299649305746588,1.5372340425531914,0.00048442481784150004
1211,1211,887640,8884.4,8893.199999999999," Everything will be at the Python level will be purely compatible with Python 3.9. However,","[50763, 11391, 481, 307, 379, 262, 11361, 1241, 481, 307, 14177, 11670, 351, 11361, 513, 13, 24, 13, 2102, 11, 51203]",0.0,-0.15299649305746588,1.5372340425531914,0.00048442481784150004
1212,1212,887640,8894.8,8903.279999999999," extension modules will have to make a change. They all have to be recompiled, they will not have the same","[51283, 7552, 13103, 481, 423, 284, 787, 257, 1487, 13, 1119, 477, 423, 284, 307, 48765, 3902, 11, 484, 481, 407, 423, 262, 976, 51707]",0.0,-0.15299649305746588,1.5372340425531914,0.00048442481784150004
1213,1213,890328,8904.08,8918.400000000001," binary interface, the semantics and APIs for some things that are frequently accessed by C extensions","[50403, 13934, 7071, 11, 262, 33815, 290, 23113, 329, 617, 1243, 326, 389, 6777, 17535, 416, 327, 18366, 51119]",0.0,-0.15083620499591438,1.305732484076433,9.337489609606564e-05
1214,1214,890328,8918.400000000001,8928.08," will be different. And so for a pure Python user, 4.0 would be a breeze, except that there are very few","[51119, 481, 307, 1180, 13, 843, 523, 329, 257, 5899, 11361, 2836, 11, 604, 13, 15, 561, 307, 257, 28633, 11, 2845, 326, 612, 389, 845, 1178, 51603]",0.0,-0.15083620499591438,1.305732484076433,9.337489609606564e-05
1215,1215,892808,8928.4,8934.72," pure Python users left, because everybody who is using Python for something significant is using","[50379, 5899, 11361, 2985, 1364, 11, 780, 7288, 508, 318, 1262, 11361, 329, 1223, 2383, 318, 1262, 50695]",0.0,-0.15865691279021787,1.5340314136125655,0.0010781795717775822
1216,1216,892808,8935.52,8941.12," third-party extensions. There are like, I don't know, several hundreds of thousands of third-party","[50735, 2368, 12, 10608, 18366, 13, 1318, 389, 588, 11, 314, 836, 470, 760, 11, 1811, 5179, 286, 4138, 286, 2368, 12, 10608, 51015]",0.0,-0.15865691279021787,1.5340314136125655,0.0010781795717775822
1217,1217,892808,8941.12,8951.28," extensions on the PIPI service. And I'm not saying they're all good, but there is a large list of","[51015, 18366, 319, 262, 350, 4061, 40, 2139, 13, 843, 314, 1101, 407, 2282, 484, 821, 477, 922, 11, 475, 612, 318, 257, 1588, 1351, 286, 51523]",0.0,-0.15865691279021787,1.5340314136125655,0.0010781795717775822
1218,1218,895128,8951.28,8958.400000000001, extensions that would have to do work. And some of those extensions are currently already low on,"[50363, 18366, 326, 561, 423, 284, 466, 670, 13, 843, 617, 286, 883, 18366, 389, 3058, 1541, 1877, 319, 50719]",0.0,-0.11640801694658068,1.476923076923077,0.0017363461665809155
1219,1219,895128,8958.400000000001,8966.560000000001," maintainers, and they're struggling to keep afloat. So there you can give a huge heads up to them,","[50719, 5529, 364, 11, 290, 484, 821, 9648, 284, 1394, 45759, 13, 1406, 612, 345, 460, 1577, 257, 3236, 6665, 510, 284, 606, 11, 51127]",0.0,-0.11640801694658068,1.476923076923077,0.0017363461665809155
1220,1220,895128,8966.560000000001,8972.640000000001," if you go to 4.0 to really keep developing it. Yeah, we'd probably have to do something like","[51127, 611, 345, 467, 284, 604, 13, 15, 284, 1107, 1394, 5922, 340, 13, 9425, 11, 356, 1549, 2192, 423, 284, 466, 1223, 588, 51431]",0.0,-0.11640801694658068,1.476923076923077,0.0017363461665809155
1221,1221,897264,8973.439999999999,8981.279999999999," several years before, who knows, maybe five years earlier, like 3.15, we would have to say,","[50403, 1811, 812, 878, 11, 508, 4206, 11, 3863, 1936, 812, 2961, 11, 588, 513, 13, 1314, 11, 356, 561, 423, 284, 910, 11, 50795]",0.0,-0.24497726228502062,1.4367816091954022,0.00019624597916845232
1222,1222,897264,8982.0,8987.119999999999," and I'm just making the specific numbers up, but we at some point, we'd have to say","[50831, 290, 314, 1101, 655, 1642, 262, 2176, 3146, 510, 11, 475, 356, 379, 617, 966, 11, 356, 1549, 423, 284, 910, 51087]",0.0,-0.24497726228502062,1.4367816091954022,0.00019624597916845232
1223,1223,897264,8989.439999999999,8994.88, that no-gill Python could be an option. It might be a compile-time option.,"[51203, 326, 645, 12, 70, 359, 11361, 714, 307, 281, 3038, 13, 632, 1244, 307, 257, 17632, 12, 2435, 3038, 13, 51475]",0.0,-0.24497726228502062,1.4367816091954022,0.00019624597916845232
1224,1224,899488,8995.679999999998,9002.88," If you want to use no-gill Python, you have to recompile Python from source for your platform using","[50403, 1002, 345, 765, 284, 779, 645, 12, 70, 359, 11361, 11, 345, 423, 284, 48765, 576, 11361, 422, 2723, 329, 534, 3859, 1262, 50763]",0.0,-0.24214288785860136,1.6348314606741574,0.00473772082477808
1225,1225,899488,9002.88,9010.24," your toolset. All you have to do is change one configuration variable, and then you just run make","[50763, 534, 2891, 2617, 13, 1439, 345, 423, 284, 466, 318, 1487, 530, 8398, 7885, 11, 290, 788, 345, 655, 1057, 787, 51131]",0.0,-0.24214288785860136,1.6348314606741574,0.00473772082477808
1226,1226,899488,9011.439999999999,9018.88," or configure and make, and it will build it for you. But now you also have to use the no-gill","[51191, 393, 17425, 290, 787, 11, 290, 340, 481, 1382, 340, 329, 345, 13, 887, 783, 345, 635, 423, 284, 779, 262, 645, 12, 70, 359, 51563]",0.0,-0.24214288785860136,1.6348314606741574,0.00473772082477808
1227,1227,901888,9019.519999999999,9027.199999999999, compatible versions of all extension modules you want to use. And so as long as many extension,"[50395, 11670, 6300, 286, 477, 7552, 13103, 345, 765, 284, 779, 13, 843, 523, 355, 890, 355, 867, 7552, 50779]",0.0,-0.09900742310744065,1.546448087431694,0.00023107412562239915
1228,1228,901888,9027.199999999999,9037.039999999999," modules don't have fully functional variants that work in the no-gill world, that's not a very","[50779, 13103, 836, 470, 423, 3938, 10345, 17670, 326, 670, 287, 262, 645, 12, 70, 359, 995, 11, 326, 338, 407, 257, 845, 51271]",0.0,-0.09900742310744065,1.546448087431694,0.00023107412562239915
1229,1229,901888,9037.039999999999,9045.279999999999," practical thing for Python users, but it would allow extension developers to test the waters,","[51271, 8472, 1517, 329, 11361, 2985, 11, 475, 340, 561, 1249, 7552, 6505, 284, 1332, 262, 10150, 11, 51683]",0.0,-0.09900742310744065,1.546448087431694,0.00023107412562239915
1230,1230,904528,9046.24,9052.0, see what they need to syntactically to be able to compile at all. Maybe they're using,"[50411, 766, 644, 484, 761, 284, 7419, 529, 1146, 284, 307, 1498, 284, 17632, 379, 477, 13, 6674, 484, 821, 1262, 50699]",0.0,-0.11993885040283203,1.6306306306306306,0.00031342703732661903
1231,1231,904528,9053.6,9059.04, functions that are defined by the Python 3 runtime that won't be in the Python 4 runtime.,"[50779, 5499, 326, 389, 5447, 416, 262, 11361, 513, 19124, 326, 1839, 470, 307, 287, 262, 11361, 604, 19124, 13, 51051]",0.0,-0.11993885040283203,1.6306306306306306,0.00031342703732661903
1232,1232,904528,9059.04,9065.84," Those functions will not work. They'll have to find an alternative, but they can experiment with","[51051, 5845, 5499, 481, 407, 670, 13, 1119, 1183, 423, 284, 1064, 281, 5559, 11, 475, 484, 460, 6306, 351, 51391]",0.0,-0.11993885040283203,1.6306306306306306,0.00031342703732661903
1233,1233,904528,9065.84,9071.44," that and sort of write test applications. And that would be a way to transition, and that","[51391, 326, 290, 3297, 286, 3551, 1332, 5479, 13, 843, 326, 561, 307, 257, 835, 284, 6801, 11, 290, 326, 51671]",0.0,-0.11993885040283203,1.6306306306306306,0.00031342703732661903
1234,1234,907144,9072.0,9081.04, that could be a series of releases where the Python 4 is more and more imminent. We,"[50391, 326, 714, 307, 257, 2168, 286, 10050, 810, 262, 11361, 604, 318, 517, 290, 517, 21161, 13, 775, 50843]",0.0,-0.1292552387013155,1.5561797752808988,0.0008807529229670763
1235,1235,907144,9082.0,9089.6, have supported more and more third-party extension modules to have solid support that works for,"[50891, 423, 4855, 517, 290, 517, 2368, 12, 10608, 7552, 13103, 284, 423, 4735, 1104, 326, 2499, 329, 51271]",0.0,-0.1292552387013155,1.5561797752808988,0.0008807529229670763
1236,1236,907144,9089.6,9101.04, no-gill Python for that new API. And then sort of Python 4.0 is like the official moment that the,"[51271, 645, 12, 70, 359, 11361, 329, 326, 649, 7824, 13, 843, 788, 3297, 286, 11361, 604, 13, 15, 318, 588, 262, 1743, 2589, 326, 262, 51843]",0.0,-0.1292552387013155,1.5561797752808988,0.0008807529229670763
1237,1237,910104,9101.04,9108.640000000001," mayor comes out and cuts the ribbon and now Python, now the sort of no-gill mode is the default","[50363, 9591, 2058, 503, 290, 6630, 262, 29092, 290, 783, 11361, 11, 783, 262, 3297, 286, 645, 12, 70, 359, 4235, 318, 262, 4277, 50743]",0.0,-0.1808568429255831,1.5176470588235293,0.0003589497064240277
1238,1238,910104,9108.640000000001,9113.76, and maybe the only mode there is. The Internet wants to know from Reddit.,"[50743, 290, 3863, 262, 691, 4235, 612, 318, 13, 383, 4455, 3382, 284, 760, 422, 10750, 13, 50999]",0.0,-0.1808568429255831,1.5176470588235293,0.0003589497064240277
1239,1239,910104,9117.04,9124.240000000002," It's a small and fun question. There's many fun questions, but out of the PyPy packages,","[51163, 632, 338, 257, 1402, 290, 1257, 1808, 13, 1318, 338, 867, 1257, 2683, 11, 475, 503, 286, 262, 9485, 20519, 10392, 11, 51523]",0.0,-0.1808568429255831,1.5176470588235293,0.0003589497064240277
1240,1240,912424,9124.24,9131.28," PyPy packages, do you have ones you like? Do you, in your opinion, other must have","[50363, 9485, 20519, 10392, 11, 466, 345, 423, 3392, 345, 588, 30, 2141, 345, 11, 287, 534, 4459, 11, 584, 1276, 423, 50715]",0.0,-0.17890337705612183,1.609375,0.029474910348653793
1241,1241,912424,9131.28,9135.119999999999, PyPy libraries or ones you use all the time constantly?,"[50715, 9485, 20519, 12782, 393, 3392, 345, 779, 477, 262, 640, 7558, 30, 50907]",0.0,-0.17890337705612183,1.609375,0.029474910348653793
1242,1242,912424,9135.119999999999,9140.72," Oh my, that... I should really have a standard answer for that question, but","[50907, 3966, 616, 11, 326, 986, 314, 815, 1107, 423, 257, 3210, 3280, 329, 326, 1808, 11, 475, 51187]",0.0,-0.17890337705612183,1.609375,0.029474910348653793
1243,1243,912424,9141.36,9148.0," like a positive standard answer, but my current standard answer is that I'm not a big user of","[51219, 588, 257, 3967, 3210, 3280, 11, 475, 616, 1459, 3210, 3280, 318, 326, 314, 1101, 407, 257, 1263, 2836, 286, 51551]",0.0,-0.17890337705612183,1.609375,0.029474910348653793
1244,1244,914800,9148.0,9155.36," third-party packages. When I write Python code, I'm usually developing some tooling around","[50363, 2368, 12, 10608, 10392, 13, 1649, 314, 3551, 11361, 2438, 11, 314, 1101, 3221, 5922, 617, 2891, 278, 1088, 50731]",0.0,-0.13984383593548785,1.7383177570093458,0.01119738258421421
1245,1245,914800,9155.36,9163.44, building Python itself. And the last thing we want is dependencies on third-party packages.,"[50731, 2615, 11361, 2346, 13, 843, 262, 938, 1517, 356, 765, 318, 20086, 319, 2368, 12, 10608, 10392, 13, 51135]",0.0,-0.13984383593548785,1.7383177570093458,0.01119738258421421
1246,1246,914800,9163.44,9166.8, So I tend to just use the standard library and...,"[51135, 1406, 314, 4327, 284, 655, 779, 262, 3210, 5888, 290, 986, 51303]",0.0,-0.13984383593548785,1.7383177570093458,0.01119738258421421
1247,1247,914800,9166.8,9168.88, That's where your focus is. That's where your focus is.,"[51303, 1320, 338, 810, 534, 2962, 318, 13, 1320, 338, 810, 534, 2962, 318, 13, 51407]",0.0,-0.13984383593548785,1.7383177570093458,0.01119738258421421
1248,1248,914800,9170.24,9176.16, But do you keep an eye of what's out there to understand where the standard library,"[51475, 887, 466, 345, 1394, 281, 4151, 286, 644, 338, 503, 612, 284, 1833, 810, 262, 3210, 5888, 51771]",0.0,-0.13984383593548785,1.7383177570093458,0.01119738258421421
1249,1249,917616,9176.16,9181.76," could be moving, should be moving? It's a good kind of landscape of what's missing from the","[50363, 714, 307, 3867, 11, 815, 307, 3867, 30, 632, 338, 257, 922, 1611, 286, 10747, 286, 644, 338, 4814, 422, 262, 50643]",0.0,-0.1369585245847702,1.583815028901734,0.0005741821951232851
1250,1250,917616,9181.76,9186.72," standard library. Well, usually when something's missing from the standard library nowadays,","[50643, 3210, 5888, 13, 3894, 11, 3221, 618, 1223, 338, 4814, 422, 262, 3210, 5888, 26760, 11, 50891]",0.0,-0.1369585245847702,1.583815028901734,0.0005741821951232851
1251,1251,917616,9189.92,9199.68," it is a relatively new idea. And there is a third-party implementation, or maybe possibly","[51051, 340, 318, 257, 5365, 649, 2126, 13, 843, 612, 318, 257, 2368, 12, 10608, 7822, 11, 393, 3863, 5457, 51539]",0.0,-0.1369585245847702,1.583815028901734,0.0005741821951232851
1252,1252,919968,9199.68,9206.48," multiple third-party implementations, but they evolve at a much higher rate than they could","[50363, 3294, 2368, 12, 10608, 25504, 11, 475, 484, 18101, 379, 257, 881, 2440, 2494, 621, 484, 714, 50703]",0.0,-0.08143730279875964,1.7757009345794392,0.00458040926605463
1253,1253,919968,9206.48,9216.24, when they're in the standard library. So it would be a big reduction in activity to incorporate,"[50703, 618, 484, 821, 287, 262, 3210, 5888, 13, 1406, 340, 561, 307, 257, 1263, 7741, 287, 3842, 284, 19330, 51191]",0.0,-0.08143730279875964,1.7757009345794392,0.00458040926605463
1254,1254,919968,9216.24,9222.0, things like that in the standard library. So I like that there is a lively package ecosystem and,"[51191, 1243, 588, 326, 287, 262, 3210, 5888, 13, 1406, 314, 588, 326, 612, 318, 257, 29696, 5301, 13187, 290, 51479]",0.0,-0.08143730279875964,1.7757009345794392,0.00458040926605463
1255,1255,919968,9222.0,9227.92, that sort of recent trends in the standard library are actually that we're doing the occasional,"[51479, 326, 3297, 286, 2274, 11257, 287, 262, 3210, 5888, 389, 1682, 326, 356, 821, 1804, 262, 12209, 51775]",0.0,-0.08143730279875964,1.7757009345794392,0.00458040926605463
1256,1256,922792,9227.92,9240.72, spring cleaning where we're just... We're choosing some modules that have not had a lot of change,"[50363, 6076, 12724, 810, 356, 821, 655, 986, 775, 821, 11236, 617, 13103, 326, 423, 407, 550, 257, 1256, 286, 1487, 51003]",0.0,-0.13573007872610382,1.574585635359116,0.0002866119903046638
1257,1257,922792,9240.72,9249.2, in a long time and that maybe would be better off not existing at all at this point because,"[51003, 287, 257, 890, 640, 290, 326, 3863, 561, 307, 1365, 572, 407, 4683, 379, 477, 379, 428, 966, 780, 51427]",0.0,-0.13573007872610382,1.574585635359116,0.0002866119903046638
1258,1258,922792,9249.2,9256.56," there might be a better third-party alternative anyway, and we're sort of slowly removing those","[51427, 612, 1244, 307, 257, 1365, 2368, 12, 10608, 5559, 6949, 11, 290, 356, 821, 3297, 286, 6364, 10829, 883, 51795]",0.0,-0.13573007872610382,1.574585635359116,0.0002866119903046638
1259,1259,925656,9256.56,9266.16, that often those are things that I sort of... I spiked somewhere in 1992 or 1993. If you look,"[50363, 326, 1690, 883, 389, 1243, 326, 314, 3297, 286, 986, 314, 38927, 7382, 287, 9768, 393, 9656, 13, 1002, 345, 804, 50843]",0.0,-0.1735045731957279,1.5105263157894737,0.001699116313830018
1260,1260,925656,9266.16,9274.0," through the commit history, it's very sad. All cosmetic changes, like changes in the indentation","[50843, 832, 262, 4589, 2106, 11, 340, 338, 845, 6507, 13, 1439, 27284, 2458, 11, 588, 2458, 287, 262, 33793, 341, 51235]",0.0,-0.1735045731957279,1.5105263157894737,0.001699116313830018
1261,1261,925656,9274.0,9282.72," style or the name of this other standard library module got changed or nothing of any substance,","[51235, 3918, 393, 262, 1438, 286, 428, 584, 3210, 5888, 8265, 1392, 3421, 393, 2147, 286, 597, 9136, 11, 51671]",0.0,-0.1735045731957279,1.5105263157894737,0.001699116313830018
1262,1262,928272,9282.72,9291.92," the API is identical to what it was 20 years ago. So speaking of packages, they have a lot of","[50363, 262, 7824, 318, 10411, 284, 644, 340, 373, 1160, 812, 2084, 13, 1406, 5486, 286, 10392, 11, 484, 423, 257, 1256, 286, 50823]",0.0,-0.16226617085564995,1.4836065573770492,0.013405095785856247
1263,1263,928272,9291.92,9298.16," impact on a lot of people's lives. Does it make sense to you why Python has become the primary,","[50823, 2928, 319, 257, 1256, 286, 661, 338, 3160, 13, 8314, 340, 787, 2565, 284, 345, 1521, 11361, 468, 1716, 262, 4165, 11, 51135]",0.0,-0.16226617085564995,1.4836065573770492,0.013405095785856247
1264,1264,928272,9298.16,9303.84," the dominant language for the machine learning community? So packages like PyTorch, TensorFlow,","[51135, 262, 11410, 3303, 329, 262, 4572, 4673, 2055, 30, 1406, 10392, 588, 9485, 15884, 354, 11, 309, 22854, 37535, 11, 51419]",0.0,-0.16226617085564995,1.4836065573770492,0.013405095785856247
1265,1265,928272,9304.4,9308.96," Secuet Learn, and even like the lower-level stuff like NumPy, SciPy, Pandas,","[51447, 1882, 84, 316, 14365, 11, 290, 772, 588, 262, 2793, 12, 5715, 3404, 588, 31835, 20519, 11, 10286, 20519, 11, 16492, 292, 11, 51675]",0.0,-0.16226617085564995,1.4836065573770492,0.013405095785856247
1266,1266,930896,9309.039999999999,9313.919999999998, Matplotlib with visualization. Can you like... Does it make sense to you why it,"[50367, 6550, 29487, 8019, 351, 32704, 13, 1680, 345, 588, 986, 8314, 340, 787, 2565, 284, 345, 1521, 340, 50611]",0.0,-0.20413085392543248,1.3611111111111112,0.002579800318926573
1267,1267,930896,9316.56,9320.32, permeated the entire data science machine learning AI community?,"[50743, 29298, 515, 262, 2104, 1366, 3783, 4572, 4673, 9552, 2055, 30, 50931]",0.0,-0.20413085392543248,1.3611111111111112,0.002579800318926573
1268,1268,930896,9321.039999999999,9328.4," Well, it's... Part of it is an effect that's as simple as we're all driving on the right side of the","[50967, 3894, 11, 340, 338, 986, 2142, 286, 340, 318, 281, 1245, 326, 338, 355, 2829, 355, 356, 821, 477, 5059, 319, 262, 826, 1735, 286, 262, 51335]",0.0,-0.20413085392543248,1.3611111111111112,0.002579800318926573
1269,1269,932840,9328.4,9336.96," road, right? It's compatibility. Yeah. And part of it is","[50363, 2975, 11, 826, 30, 632, 338, 17764, 13, 9425, 13, 843, 636, 286, 340, 318, 50791]",0.0,-0.12925296110265394,1.518018018018018,0.006645780056715012
1270,1270,932840,9340.08,9346.48," not quite as fundamental as driving on the right side of the road, which you have to do for safety","[50947, 407, 2407, 355, 7531, 355, 5059, 319, 262, 826, 1735, 286, 262, 2975, 11, 543, 345, 423, 284, 466, 329, 3747, 51267]",0.0,-0.12925296110265394,1.518018018018018,0.006645780056715012
1271,1271,932840,9346.48,9351.84," reasons. I mean, you have to agree on something. They could have picked JavaScript or Perl.","[51267, 3840, 13, 314, 1612, 11, 345, 423, 284, 4236, 319, 1223, 13, 1119, 714, 423, 6497, 11933, 393, 24316, 13, 51535]",0.0,-0.12925296110265394,1.518018018018018,0.006645780056715012
1272,1272,932840,9352.72,9358.24, There was a time in the early 2000s that it really looked like Perl was going to dominate,"[51579, 1318, 373, 257, 640, 287, 262, 1903, 4751, 82, 326, 340, 1107, 3114, 588, 24316, 373, 1016, 284, 17863, 51855]",0.0,-0.12925296110265394,1.518018018018018,0.006645780056715012
1273,1273,935824,9358.24,9365.039999999999, like biosciences because DNA search was all based on regular expressions and Perl has the fastest,"[50363, 588, 37140, 979, 3007, 780, 7446, 2989, 373, 477, 1912, 319, 3218, 14700, 290, 24316, 468, 262, 14162, 50703]",0.0,-0.16193179080360814,1.4943181818181819,0.0002547238254919648
1274,1274,935824,9365.039999999999,9371.68, and most comprehensive regular expression engine still does. I spent quite a long time with Perl.,"[50703, 290, 749, 9815, 3218, 5408, 3113, 991, 857, 13, 314, 3377, 2407, 257, 890, 640, 351, 24316, 13, 51035]",0.0,-0.16193179080360814,1.4943181818181819,0.0002547238254919648
1275,1275,935824,9371.68,9378.8, That was another letting go of this kind of data processing system.,"[51035, 1320, 373, 1194, 9616, 467, 286, 428, 1611, 286, 1366, 7587, 1080, 13, 51391]",0.0,-0.16193179080360814,1.4943181818181819,0.0002547238254919648
1276,1276,937880,9379.599999999999,9387.519999999999, The reasons why Python became the lingua franca of scientific code and,"[50403, 383, 3840, 1521, 11361, 2627, 262, 18459, 6413, 1216, 42124, 286, 5654, 2438, 290, 50799]",0.0,-0.11635894610964019,1.4046242774566473,0.0026896363124251366
1277,1277,937880,9389.759999999998,9397.039999999999," machine learning in particular and data science, it really had a lot to do with","[50911, 4572, 4673, 287, 1948, 290, 1366, 3783, 11, 340, 1107, 550, 257, 1256, 284, 466, 351, 51275]",0.0,-0.11635894610964019,1.4046242774566473,0.0026896363124251366
1278,1278,937880,9398.4,9406.48," anything was better than C or C++. Recently, a guy who worked at Lawrence Livermore National","[51343, 1997, 373, 1365, 621, 327, 393, 327, 4880, 13, 23413, 11, 257, 3516, 508, 3111, 379, 13914, 45036, 3549, 2351, 51747]",0.0,-0.11635894610964019,1.4046242774566473,0.0026896363124251366
1279,1279,940648,9406.48,9419.359999999999, Laboratories in the computing division wrote me his memoirs and he had his own view of how he,"[50363, 46779, 287, 262, 14492, 7297, 2630, 502, 465, 24649, 82, 290, 339, 550, 465, 898, 1570, 286, 703, 339, 51007]",0.0,-0.12551323298750253,1.5524861878453038,0.0015738154761493206
1280,1280,940648,9419.359999999999,9428.88, helped something he called computational steering into existence. And this was the idea that you,"[51007, 4193, 1223, 339, 1444, 31350, 19702, 656, 6224, 13, 843, 428, 373, 262, 2126, 326, 345, 51483]",0.0,-0.12551323298750253,1.5524861878453038,0.0015738154761493206
1281,1281,940648,9428.88,9436.24, take libraries that in his days were written in Fortran that solved universal mathematical,"[51483, 1011, 12782, 326, 287, 465, 1528, 547, 3194, 287, 6401, 2596, 326, 16019, 10112, 18069, 51851]",0.0,-0.12551323298750253,1.5524861878453038,0.0015738154761493206
1282,1282,943624,9436.24,9444.64, problems. And those libraries still work. But the scientists that used the libraries,"[50363, 2761, 13, 843, 883, 12782, 991, 670, 13, 887, 262, 5519, 326, 973, 262, 12782, 50783]",0.0,-0.2109807032459187,1.6419753086419753,0.0010165737476199865
1283,1283,943624,9445.68,9454.0, used them to solve continuously different specific applications and answer different questions.,"[50835, 973, 606, 284, 8494, 17282, 1180, 2176, 5479, 290, 3280, 1180, 2683, 13, 51251]",0.0,-0.2109807032459187,1.6419753086419753,0.0010165737476199865
1284,1284,943624,9454.72,9463.199999999999, And so those poor scientists were required to use say Fortran because Fortran was the,"[51287, 843, 523, 883, 3595, 5519, 547, 2672, 284, 779, 910, 6401, 2596, 780, 6401, 2596, 373, 262, 51711]",0.0,-0.2109807032459187,1.6419753086419753,0.0010165737476199865
1285,1285,946320,9463.76,9469.36, language that the library was written in. And then the scientists would have to write,"[50391, 3303, 326, 262, 5888, 373, 3194, 287, 13, 843, 788, 262, 5519, 561, 423, 284, 3551, 50671]",0.0,-0.25332862611800905,1.5568181818181819,0.0007243254804052413
1286,1286,946320,9470.0,9476.640000000001, an application that sort of uses the library to solve a particular equation or a set of,"[50703, 281, 3586, 326, 3297, 286, 3544, 262, 5888, 284, 8494, 257, 1948, 16022, 393, 257, 900, 286, 51035]",0.0,-0.25332862611800905,1.5568181818181819,0.0007243254804052413
1287,1287,946320,9478.0,9487.52, answer a set of questions and the same for C++. Because there's interoperability. So the dusty decks,"[51103, 3280, 257, 900, 286, 2683, 290, 262, 976, 329, 327, 4880, 13, 4362, 612, 338, 48817, 1799, 13, 1406, 262, 36972, 13136, 51579]",0.0,-0.25332862611800905,1.5568181818181819,0.0007243254804052413
1288,1288,948752,9488.0,9497.68, written either in C++ or Fortran. And so Paul Dubois was one of the people who I think in the mid,"[50387, 3194, 2035, 287, 327, 4880, 393, 6401, 2596, 13, 843, 523, 3362, 10322, 10924, 373, 530, 286, 262, 661, 508, 314, 892, 287, 262, 3095, 50871]",0.0,-0.16487253928671078,1.323943661971831,0.004269907251000404
1289,1289,948752,9497.68,9509.36, 90s saw that you needed a higher level language for the scientists to sort of tie together,"[50871, 4101, 82, 2497, 326, 345, 2622, 257, 2440, 1241, 3303, 329, 262, 5519, 284, 3297, 286, 9839, 1978, 51455]",0.0,-0.16487253928671078,1.323943661971831,0.004269907251000404
1290,1290,950936,9510.16,9515.68, the fundamental mathematical algorithms of linear algebra and other stuff.,"[50403, 262, 7531, 18069, 16113, 286, 14174, 37139, 290, 584, 3404, 13, 50679]",0.0,-0.10493725863370028,1.5168539325842696,0.00011856362107209861
1291,1291,950936,9517.12,9527.12, And so gradually some libraries started appearing that did very fundamental stuff with arrays of,"[50751, 843, 523, 11835, 617, 12782, 2067, 12655, 326, 750, 845, 7531, 3404, 351, 26515, 286, 51251]",0.0,-0.10493725863370028,1.5168539325842696,0.00011856362107209861
1292,1292,950936,9527.12,9534.960000000001, numbers in Python. I mean when I first created Python I was not expecting it to be used for arrays,"[51251, 3146, 287, 11361, 13, 314, 1612, 618, 314, 717, 2727, 11361, 314, 373, 407, 12451, 340, 284, 307, 973, 329, 26515, 51643]",0.0,-0.10493725863370028,1.5168539325842696,0.00011856362107209861
1293,1293,953496,9534.96,9541.439999999999, of numbers much. I thought that was like an outdated data type. And everything was like objects,"[50363, 286, 3146, 881, 13, 314, 1807, 326, 373, 588, 281, 23572, 1366, 2099, 13, 843, 2279, 373, 588, 5563, 50687]",0.0,-0.09957520755720728,1.6607142857142858,0.026202742010354996
1294,1294,953496,9541.439999999999,9548.0, and strings and like Python was good and fast at string manipulation and objects obviously.,"[50687, 290, 13042, 290, 588, 11361, 373, 922, 290, 3049, 379, 4731, 17512, 290, 5563, 6189, 13, 51015]",0.0,-0.09957520755720728,1.6607142857142858,0.026202742010354996
1295,1295,953496,9548.0,9554.0, But arrays of numbers were not very efficient and the multidimensional arrays didn't even exist,"[51015, 887, 26515, 286, 3146, 547, 407, 845, 6942, 290, 262, 1963, 312, 16198, 26515, 1422, 470, 772, 2152, 51315]",0.0,-0.09957520755720728,1.6607142857142858,0.026202742010354996
1296,1296,953496,9554.0,9562.24, in the language at all. But there were people who realized that Python had extensibility,"[51315, 287, 262, 3303, 379, 477, 13, 887, 612, 547, 661, 508, 6939, 326, 11361, 550, 1070, 641, 2247, 51727]",0.0,-0.09957520755720728,1.6607142857142858,0.026202742010354996
1297,1297,956224,9562.56,9572.16, that was flexible enough that they could write third party packages that did support large,"[50379, 326, 373, 12846, 1576, 326, 484, 714, 3551, 2368, 2151, 10392, 326, 750, 1104, 1588, 50859]",0.0,-0.10223122510043058,1.4945652173913044,5.9205543948337436e-05
1298,1298,956224,9572.16,9578.8, arrays of numbers and operations on them very efficiently. And somehow they got a foothold,"[50859, 26515, 286, 3146, 290, 4560, 319, 606, 845, 18306, 13, 843, 7599, 484, 1392, 257, 48271, 51191]",0.0,-0.10223122510043058,1.4945652173913044,5.9205543948337436e-05
1299,1299,956224,9579.6,9586.8, through sort of different parts of the scientific community. I remember that the Hubble Space,"[51231, 832, 3297, 286, 1180, 3354, 286, 262, 5654, 2055, 13, 314, 3505, 326, 262, 40455, 4687, 51591]",0.0,-0.10223122510043058,1.4945652173913044,5.9205543948337436e-05
1300,1300,958680,9586.8,9594.08, Telescope people in Baltimore were somehow big Python fans in the late 90s. And at various,"[50363, 36789, 661, 287, 10346, 547, 7599, 1263, 11361, 3296, 287, 262, 2739, 4101, 82, 13, 843, 379, 2972, 50727]",0.0,-0.10791880508949017,1.4945652173913044,0.0011050968896597624
1301,1301,958680,9594.64,9603.599999999999, points small improvements were made and more people got in touch with using Python to derive,"[50755, 2173, 1402, 8561, 547, 925, 290, 517, 661, 1392, 287, 3638, 351, 1262, 11361, 284, 27099, 51203]",0.0,-0.10791880508949017,1.4945652173913044,0.0011050968896597624
1302,1302,958680,9603.599999999999,9612.96, these libraries of interesting algorithms. And like once you have a bunch of scientists who,"[51203, 777, 12782, 286, 3499, 16113, 13, 843, 588, 1752, 345, 423, 257, 7684, 286, 5519, 508, 51671]",0.0,-0.10791880508949017,1.4945652173913044,0.0011050968896597624
1303,1303,961296,9612.96,9618.8," are working on similar problems, say they're all working on stuff that that data that comes in","[50363, 389, 1762, 319, 2092, 2761, 11, 910, 484, 821, 477, 1762, 319, 3404, 326, 326, 1366, 326, 2058, 287, 50655]",0.0,-0.15281140804290771,1.6909871244635193,0.002960092155262828
1304,1304,961296,9618.8,9623.759999999998," from the Hubble Space Telescope, but they're looking at different things. Some are looking at stars","[50655, 422, 262, 40455, 4687, 36789, 11, 475, 484, 821, 2045, 379, 1180, 1243, 13, 2773, 389, 2045, 379, 5788, 50903]",0.0,-0.15281140804290771,1.6909871244635193,0.002960092155262828
1305,1305,961296,9623.759999999998,9630.0, in this galaxy other are looking at galaxies. The math is completely different. But the underlying,"[50903, 287, 428, 16161, 584, 389, 2045, 379, 27982, 13, 383, 10688, 318, 3190, 1180, 13, 887, 262, 10238, 51215]",0.0,-0.15281140804290771,1.6909871244635193,0.002960092155262828
1306,1306,961296,9631.119999999999,9639.359999999999," libraries are still the same. And so they exchange code. They say, well, I wrote this Python program","[51271, 12782, 389, 991, 262, 976, 13, 843, 523, 484, 5163, 2438, 13, 1119, 910, 11, 880, 11, 314, 2630, 428, 11361, 1430, 51683]",0.0,-0.15281140804290771,1.6909871244635193,0.002960092155262828
1307,1307,963936,9639.36,9646.640000000001," or I wrote a Python library to solve this class of problems. And the other guys either say, oh,","[50363, 393, 314, 2630, 257, 11361, 5888, 284, 8494, 428, 1398, 286, 2761, 13, 843, 262, 584, 3730, 2035, 910, 11, 11752, 11, 50727]",0.0,-0.16765204628745278,1.6180257510729614,0.0023634193930774927
1308,1308,963936,9646.640000000001,9653.92," I can use let library two or if you make a few changes, I can use that library to. Why start","[50727, 314, 460, 779, 1309, 5888, 734, 393, 611, 345, 787, 257, 1178, 2458, 11, 314, 460, 779, 326, 5888, 284, 13, 4162, 923, 51091]",0.0,-0.16765204628745278,1.6180257510729614,0.0023634193930774927
1309,1309,963936,9653.92,9661.92," from scratch in Pearl or JavaScript, where there's not that infrastructure for arrays of numbers","[51091, 422, 12692, 287, 18482, 393, 11933, 11, 810, 612, 338, 407, 326, 6884, 329, 26515, 286, 3146, 51491]",0.0,-0.16765204628745278,1.6180257510729614,0.0023634193930774927
1310,1310,963936,9661.92,9668.16," yet, where in Python you have it. And so more and more scientists at different places doing","[51491, 1865, 11, 810, 287, 11361, 345, 423, 340, 13, 843, 523, 517, 290, 517, 5519, 379, 1180, 4113, 1804, 51803]",0.0,-0.16765204628745278,1.6180257510729614,0.0023634193930774927
1311,1311,966816,9668.16,9677.68," different, different work, discovered Python. And then then people who had an idea for an important","[50363, 1180, 11, 1180, 670, 11, 5071, 11361, 13, 843, 788, 788, 661, 508, 550, 281, 2126, 329, 281, 1593, 50839]",0.0,-0.1603473799569266,1.53475935828877,0.0005306804669089615
1312,1312,966816,9677.68,9685.28," new fundamental library decided, oh, Python is is actually already known to our users. So,","[50839, 649, 7531, 5888, 3066, 11, 11752, 11, 11361, 318, 318, 1682, 1541, 1900, 284, 674, 2985, 13, 1406, 11, 51219]",0.0,-0.1603473799569266,1.53475935828877,0.0005306804669089615
1313,1313,966816,9686.32,9691.44," let's use Python as the user interface. I think that's how tensor, I imagine at least that's how","[51271, 1309, 338, 779, 11361, 355, 262, 2836, 7071, 13, 314, 892, 326, 338, 703, 11192, 273, 11, 314, 5967, 379, 1551, 326, 338, 703, 51527]",0.0,-0.1603473799569266,1.53475935828877,0.0005306804669089615
1314,1314,969144,9691.52,9698.32," tensor flow ended up with Python as the user interface. Right. But with tensor flow, there's","[50367, 11192, 273, 5202, 4444, 510, 351, 11361, 355, 262, 2836, 7071, 13, 6498, 13, 887, 351, 11192, 273, 5202, 11, 612, 338, 50707]",0.0,-0.2016729271930197,1.580110497237569,0.003317388007417321
1315,1315,969144,9698.32,9705.44, a deeper history of what the community is. It's not just like what packages it needs. It's like,"[50707, 257, 9211, 2106, 286, 644, 262, 2055, 318, 13, 632, 338, 407, 655, 588, 644, 10392, 340, 2476, 13, 632, 338, 588, 51063]",0.0,-0.2016729271930197,1.580110497237569,0.003317388007417321
1316,1316,969144,9705.44,9713.36, what the community leans on for programming language because tensor flow had a prior library that,"[51063, 644, 262, 2055, 39416, 319, 329, 8300, 3303, 780, 11192, 273, 5202, 550, 257, 3161, 5888, 326, 51459]",0.0,-0.2016729271930197,1.580110497237569,0.003317388007417321
1317,1317,971336,9713.52,9719.12, was internal to Google. But there was also competing machine learning frameworks like,"[50371, 373, 5387, 284, 3012, 13, 887, 612, 373, 635, 11780, 4572, 4673, 29251, 588, 50651]",0.0,-0.17137373947515722,1.593073593073593,0.14790615439414978
1318,1318,971336,9719.12,9727.44," the nano cafe, they were in Python, there was some Scala, some other languages, but Python was","[50651, 262, 38706, 26725, 11, 484, 547, 287, 11361, 11, 612, 373, 617, 38334, 11, 617, 584, 8950, 11, 475, 11361, 373, 51067]",0.0,-0.17137373947515722,1.593073593073593,0.14790615439414978
1319,1319,971336,9727.44,9734.08, really dominating it. And it's interesting because there's other languages from the engineering,"[51067, 1107, 30651, 340, 13, 843, 340, 338, 3499, 780, 612, 338, 584, 8950, 422, 262, 8705, 51399]",0.0,-0.17137373947515722,1.593073593073593,0.14790615439414978
1320,1320,971336,9734.08,9741.92," space, like MATLAB, that a lot of people used, but different design choices by the company,","[51399, 2272, 11, 588, 36775, 48780, 11, 326, 257, 1256, 286, 661, 973, 11, 475, 1180, 1486, 7747, 416, 262, 1664, 11, 51791]",0.0,-0.17137373947515722,1.593073593073593,0.14790615439414978
1321,1321,974192,9741.92,9747.68, by the core developers led to it not spreading. And one of the choices of MATLAB,"[50363, 416, 262, 4755, 6505, 2957, 284, 340, 407, 14342, 13, 843, 530, 286, 262, 7747, 286, 36775, 48780, 50651]",0.0,-0.13479019733185463,1.4918032786885247,0.0001599976676516235
1322,1322,974192,9748.960000000001,9754.48," by mathworks is to not make it open source, right? Or not, you know, having people pay.","[50715, 416, 10688, 5225, 318, 284, 407, 787, 340, 1280, 2723, 11, 826, 30, 1471, 407, 11, 345, 760, 11, 1719, 661, 1414, 13, 50991]",0.0,-0.13479019733185463,1.4918032786885247,0.0001599976676516235
1323,1323,974192,9754.48,9761.84," It was a very expensive product. And so, universities especially disliked it because it was a price","[50991, 632, 373, 257, 845, 5789, 1720, 13, 843, 523, 11, 11155, 2592, 43252, 340, 780, 340, 373, 257, 2756, 51359]",0.0,-0.13479019733185463,1.4918032786885247,0.0001599976676516235
1324,1324,974192,9761.84,9770.72," per seat. I remember hearing. Yeah, but I think that's not why it failed or I failed to spread.","[51359, 583, 5852, 13, 314, 3505, 4854, 13, 9425, 11, 475, 314, 892, 326, 338, 407, 1521, 340, 4054, 393, 314, 4054, 284, 4104, 13, 51803]",0.0,-0.13479019733185463,1.4918032786885247,0.0001599976676516235
1325,1325,977072,9770.8,9776.72," I think the universities didn't like it, but they would still pay for it. The thing is it didn't","[50367, 314, 892, 262, 11155, 1422, 470, 588, 340, 11, 475, 484, 561, 991, 1414, 329, 340, 13, 383, 1517, 318, 340, 1422, 470, 50663]",0.0,-0.15483097453693767,1.5884773662551441,0.00035205285530537367
1326,1326,977072,9776.72,9785.359999999999," feed into that GitHub open source packages culture. So like, and that's somehow a precondition for","[50663, 3745, 656, 326, 21722, 1280, 2723, 10392, 3968, 13, 1406, 588, 11, 290, 326, 338, 7599, 257, 3718, 623, 653, 329, 51095]",0.0,-0.15483097453693767,1.5884773662551441,0.00035205285530537367
1327,1327,977072,9786.8,9793.119999999999," viral spreading the hacker culture, like the Tinkler culture. With Python, it feels like you can","[51167, 14416, 14342, 262, 23385, 3968, 11, 588, 262, 309, 676, 1754, 3968, 13, 2080, 11361, 11, 340, 5300, 588, 345, 460, 51483]",0.0,-0.15483097453693767,1.5884773662551441,0.00035205285530537367
1328,1328,977072,9793.119999999999,9797.679999999998, build a package from scratch or solve a particular problem and get excited about sharing that,"[51483, 1382, 257, 5301, 422, 12692, 393, 8494, 257, 1948, 1917, 290, 651, 6568, 546, 7373, 326, 51711]",0.0,-0.15483097453693767,1.5884773662551441,0.00035205285530537367
1329,1329,979768,9797.68,9802.24, package with others. And that creates an excitement about a language.,"[50363, 5301, 351, 1854, 13, 843, 326, 8075, 281, 14067, 546, 257, 3303, 13, 50591]",0.0,-0.1702794545813452,1.5251141552511416,0.004965708591043949
1330,1330,979768,9802.24,9806.800000000001," I tend to like Python's approach to open source in particular because it's sort of,","[50591, 314, 4327, 284, 588, 11361, 338, 3164, 284, 1280, 2723, 287, 1948, 780, 340, 338, 3297, 286, 11, 50819]",0.0,-0.1702794545813452,1.5251141552511416,0.004965708591043949
1331,1331,979768,9808.0,9816.720000000001, it's almost egalitarian. There's little hierarchy. There's obviously some because,"[50879, 340, 338, 2048, 41469, 13, 1318, 338, 1310, 18911, 13, 1318, 338, 6189, 617, 780, 51315]",0.0,-0.1702794545813452,1.5251141552511416,0.004965708591043949
1332,1332,979768,9816.720000000001,9821.2," they're like, you know, only to decide whether you drive on the left or the right side of the road","[51315, 484, 821, 588, 11, 345, 760, 11, 691, 284, 5409, 1771, 345, 3708, 319, 262, 1364, 393, 262, 826, 1735, 286, 262, 2975, 51539]",0.0,-0.1702794545813452,1.5251141552511416,0.004965708591043949
1333,1333,982120,9821.2,9828.480000000001, sometimes. But there is a lot of access for people with little power. You don't have to work,"[50363, 3360, 13, 887, 612, 318, 257, 1256, 286, 1895, 329, 661, 351, 1310, 1176, 13, 921, 836, 470, 423, 284, 670, 50727]",0.0,-0.08252488321332789,1.5026455026455026,0.004089872352778912
1334,1334,982120,9828.480000000001,9837.44, for a big tech company to make a difference in the Python world. We have affordable events that,"[50727, 329, 257, 1263, 7261, 1664, 284, 787, 257, 3580, 287, 262, 11361, 995, 13, 775, 423, 10935, 2995, 326, 51175]",0.0,-0.08252488321332789,1.5026455026455026,0.004089872352778912
1335,1335,982120,9837.44,9847.28, really care about community and support people. And sort of the community is like a big deal at,"[51175, 1107, 1337, 546, 2055, 290, 1104, 661, 13, 843, 3297, 286, 262, 2055, 318, 588, 257, 1263, 1730, 379, 51667]",0.0,-0.08252488321332789,1.5026455026455026,0.004089872352778912
1336,1336,984728,9847.36,9856.960000000001," our conferences and in the PSF. When the PSF funds events, it's always about growing the community.","[50367, 674, 19993, 290, 287, 262, 6599, 37, 13, 1649, 262, 6599, 37, 5153, 2995, 11, 340, 338, 1464, 546, 3957, 262, 2055, 13, 50847]",0.0,-0.14271953582763672,1.3955223880597014,0.002551985438913107
1337,1337,984728,9857.84,9867.76," The PSF funds very little development. They do some, but most of the money that the PSF","[50891, 383, 6599, 37, 5153, 845, 1310, 2478, 13, 1119, 466, 617, 11, 475, 749, 286, 262, 1637, 326, 262, 6599, 37, 51387]",0.0,-0.14271953582763672,1.3955223880597014,0.002551985438913107
1338,1338,986776,9868.56,9878.64," forks out is to community fostering things. So speaking of egalitarian, last time we talked","[50403, 43378, 503, 318, 284, 2055, 44209, 1243, 13, 1406, 5486, 286, 41469, 11, 938, 640, 356, 6619, 50907]",0.0,-0.11860217154026031,1.4422110552763818,0.0003332220367155969
1339,1339,986776,9878.64,9885.28," four years ago, it was just after you stepped down from your role as the benevolent dictator","[50907, 1440, 812, 2084, 11, 340, 373, 655, 706, 345, 10764, 866, 422, 534, 2597, 355, 262, 45599, 26671, 51239]",0.0,-0.11860217154026031,1.4422110552763818,0.0003332220367155969
1340,1340,986776,9885.28,9892.72," for life BDFL. Looking back, what are your insights and lessons you learned from that experience about","[51239, 329, 1204, 347, 8068, 43, 13, 15616, 736, 11, 644, 389, 534, 17218, 290, 11658, 345, 4499, 422, 326, 1998, 546, 51611]",0.0,-0.11860217154026031,1.4422110552763818,0.0003332220367155969
1341,1341,989272,9892.72,9901.439999999999," Python developer community, about human nature, about human civilization, life itself? Oh my.","[50363, 11361, 8517, 2055, 11, 546, 1692, 3450, 11, 546, 1692, 14355, 11, 1204, 2346, 30, 3966, 616, 13, 50799]",0.0,-0.17359844473905342,1.3669064748201438,0.0018285521073266864
1342,1342,989272,9904.0,9913.84, I probably held on to the position too long. I remember being just extremely stressed for a long,"[50927, 314, 2192, 2714, 319, 284, 262, 2292, 1165, 890, 13, 314, 3505, 852, 655, 4457, 15033, 329, 257, 890, 51419]",0.0,-0.17359844473905342,1.3669064748201438,0.0018285521073266864
1343,1343,991384,9913.84,9923.36," time. And it wasn't very clear to me what was leading, what was causing this stress.","[50363, 640, 13, 843, 340, 2492, 470, 845, 1598, 284, 502, 644, 373, 3756, 11, 644, 373, 6666, 428, 5503, 13, 50839]",0.0,-0.12941956520080566,1.3,0.018157456070184708
1344,1344,991384,9926.32,9938.72," And looking back, I should have sort of relinquished my central role as BDFL sooner.","[50987, 843, 2045, 736, 11, 314, 815, 423, 3297, 286, 36610, 1348, 616, 4318, 2597, 355, 347, 8068, 43, 14556, 13, 51607]",0.0,-0.12941956520080566,1.3,0.018157456070184708
1345,1345,993872,9939.599999999999,9945.279999999999, What were the pros and cons of the BDFL role? Like what were the you not relinquishing it?,"[50407, 1867, 547, 262, 10360, 290, 762, 286, 262, 347, 8068, 43, 2597, 30, 4525, 644, 547, 262, 345, 407, 36610, 3929, 340, 30, 50691]",0.0,-0.18237671358831997,1.5957446808510638,0.007730911020189524
1346,1346,993872,9945.279999999999,9949.92, What are the benefits of that for the community? And what are the drawbacks?,"[50691, 1867, 389, 262, 4034, 286, 326, 329, 262, 2055, 30, 843, 644, 389, 262, 42763, 30, 50923]",0.0,-0.18237671358831997,1.5957446808510638,0.007730911020189524
1347,1347,993872,9949.92,9954.88," Well, the benefits for the community would be things like","[50923, 3894, 11, 262, 4034, 329, 262, 2055, 561, 307, 1243, 588, 51171]",0.0,-0.18237671358831997,1.5957446808510638,0.007730911020189524
1348,1348,995488,9955.359999999999,9972.24, clarity of vision and sort of a clear direction because I had certain ideas in mind when I created Python.,"[50387, 16287, 286, 5761, 290, 3297, 286, 257, 1598, 4571, 780, 314, 550, 1728, 4213, 287, 2000, 618, 314, 2727, 11361, 13, 51231]",0.0,-0.20921094682481553,1.4285714285714286,0.0016674015205353498
1349,1349,995488,9972.24,9980.4, And while I sort of let myself be influenced by many other ideas as Python evolved and became,"[51231, 843, 981, 314, 3297, 286, 1309, 3589, 307, 12824, 416, 867, 584, 4213, 355, 11361, 12572, 290, 2627, 51639]",0.0,-0.20921094682481553,1.4285714285714286,0.0016674015205353498
1350,1350,998040,9981.039999999999,9990.96," more successful and more complex and more used, I also stuck to certain principles. And it's still","[50395, 517, 4388, 290, 517, 3716, 290, 517, 973, 11, 314, 635, 7819, 284, 1728, 7811, 13, 843, 340, 338, 991, 50891]",0.0,-0.18279641739865568,1.4202898550724639,8.363203960470855e-05
1351,1351,998040,9990.96,10000.4, hard to say what are Python's core principles. But the fact that I was playing that role and sort,"[50891, 1327, 284, 910, 644, 389, 11361, 338, 4755, 7811, 13, 887, 262, 1109, 326, 314, 373, 2712, 326, 2597, 290, 3297, 51363]",0.0,-0.18279641739865568,1.4202898550724639,8.363203960470855e-05
1352,1352,1000040,10000.56,10010.8, of always very active grew the community in a certain way. It modeled to the community how to,"[50371, 286, 1464, 845, 4075, 6348, 262, 2055, 287, 257, 1728, 835, 13, 632, 29563, 284, 262, 2055, 703, 284, 50883]",0.0,-0.1396779737610748,1.808641975308642,0.002811877289786935
1353,1353,1000040,10010.8,10018.24," think about how to solve a certain problem. Well, that was a source of stress, but it was also","[50883, 892, 546, 703, 284, 8494, 257, 1728, 1917, 13, 3894, 11, 326, 373, 257, 2723, 286, 5503, 11, 475, 340, 373, 635, 51255]",0.0,-0.1396779737610748,1.808641975308642,0.002811877289786935
1354,1354,1000040,10018.24,10023.92," beneficial. It was a source of stress for me personally, but it was beneficial for the community because","[51255, 13205, 13, 632, 373, 257, 2723, 286, 5503, 329, 502, 7620, 11, 475, 340, 373, 13205, 329, 262, 2055, 780, 51539]",0.0,-0.1396779737610748,1.808641975308642,0.002811877289786935
1355,1355,1002392,10024.88,10032.8, people sort of over time had learned how I was thinking and could predict,"[50411, 661, 3297, 286, 625, 640, 550, 4499, 703, 314, 373, 3612, 290, 714, 4331, 50807]",0.0,-0.22922488621303014,1.4915254237288136,0.0002060345868812874
1356,1356,1002392,10034.56,10040.72," how I would decide about a particular issue and not always perfectly, of course. But there was","[50895, 703, 314, 561, 5409, 546, 257, 1948, 2071, 290, 407, 1464, 7138, 11, 286, 1781, 13, 887, 612, 373, 51203]",0.0,-0.22922488621303014,1.4915254237288136,0.0002060345868812874
1357,1357,1002392,10042.72,10050.0," there wasn't a lot of jerking around like this year, the Democrats are in power and we're doing","[51303, 612, 2492, 470, 257, 1256, 286, 13665, 3364, 1088, 588, 428, 614, 11, 262, 4956, 389, 287, 1176, 290, 356, 821, 1804, 51667]",0.0,-0.22922488621303014,1.4915254237288136,0.0002060345868812874
1358,1358,1005000,10050.0,10054.64, these kind of things. And now the Republicans are in power and they roll all that back into,"[50363, 777, 1611, 286, 1243, 13, 843, 783, 262, 4734, 389, 287, 1176, 290, 484, 4836, 477, 326, 736, 656, 50595]",0.0,-0.15204924921835622,1.5449438202247192,0.001474099582992494
1359,1359,1005000,10054.64,10063.76," those kind of things. There is a clear fairly straight path ahead. And so fortunately, the","[50595, 883, 1611, 286, 1243, 13, 1318, 318, 257, 1598, 6547, 3892, 3108, 4058, 13, 843, 523, 39955, 11, 262, 51051]",0.0,-0.15204924921835622,1.5449438202247192,0.001474099582992494
1360,1360,1005000,10063.76,10072.4, successor structure with the steering council has sort of found a similar way of leading the,"[51051, 17270, 4645, 351, 262, 19702, 6745, 468, 3297, 286, 1043, 257, 2092, 835, 286, 3756, 262, 51483]",0.0,-0.15204924921835622,1.5449438202247192,0.001474099582992494
1361,1361,1007240,10072.4,10079.84," community in a fairly steady direction without stagnating. And for me personally,","[50363, 2055, 287, 257, 6547, 11831, 4571, 1231, 23196, 803, 13, 843, 329, 502, 7620, 11, 50735]",0.0,-0.14091266380561576,1.5654008438818565,0.0045401412062346935
1362,1362,1007240,10079.84,10086.16," it's more fun because there are there are things I can just ignore. Yeah, oh, yeah, there's a bug","[50735, 340, 338, 517, 1257, 780, 612, 389, 612, 389, 1243, 314, 460, 655, 8856, 13, 9425, 11, 11752, 11, 10194, 11, 612, 338, 257, 5434, 51051]",0.0,-0.14091266380561576,1.5654008438818565,0.0045401412062346935
1363,1363,1007240,10086.16,10093.199999999999, in multi processing. Let's someone else decide whether that's important to solve or not. I'll,"[51051, 287, 5021, 7587, 13, 3914, 338, 2130, 2073, 5409, 1771, 326, 338, 1593, 284, 8494, 393, 407, 13, 314, 1183, 51403]",0.0,-0.14091266380561576,1.5654008438818565,0.0045401412062346935
1364,1364,1007240,10093.199999999999,10100.16," stick to typing in the async IO and the faster interpreter. Yeah, it allows you to focus a little","[51403, 4859, 284, 19720, 287, 262, 30351, 24418, 290, 262, 5443, 28846, 13, 9425, 11, 340, 3578, 345, 284, 2962, 257, 1310, 51751]",0.0,-0.14091266380561576,1.5654008438818565,0.0045401412062346935
1365,1365,1010016,10100.24,10106.8, bit more. Yeah. What are interesting differences in culture if you can comment on between Google,"[50367, 1643, 517, 13, 9425, 13, 1867, 389, 3499, 5400, 287, 3968, 611, 345, 460, 2912, 319, 1022, 3012, 50695]",0.0,-0.20614199411301387,1.5826446280991735,0.0014727532397955656
1366,1366,1010016,10106.8,10112.64," Dropbox and Microsoft from a Python programming perspective, all places you've been to the positive.","[50695, 38930, 290, 5413, 422, 257, 11361, 8300, 6650, 11, 477, 4113, 345, 1053, 587, 284, 262, 3967, 13, 50987]",0.0,-0.20614199411301387,1.5826446280991735,0.0014727532397955656
1367,1367,1010016,10114.72,10120.08, Is there a difference or is it just about people and there's great people everywhere?,"[51091, 1148, 612, 257, 3580, 393, 318, 340, 655, 546, 661, 290, 612, 338, 1049, 661, 8347, 30, 51359]",0.0,-0.20614199411301387,1.5826446280991735,0.0014727532397955656
1368,1368,1010016,10120.08,10126.96, Or is there a culture differences? Sort of Dropbox is much smaller than the other two in your list.,"[51359, 1471, 318, 612, 257, 3968, 5400, 30, 33947, 286, 38930, 318, 881, 4833, 621, 262, 584, 734, 287, 534, 1351, 13, 51703]",0.0,-0.20614199411301387,1.5826446280991735,0.0014727532397955656
1369,1369,1012696,10127.679999999998,10135.599999999999, Yeah. So that is a big difference. The set of products they provide is narrower. So they're,"[50399, 9425, 13, 1406, 326, 318, 257, 1263, 3580, 13, 383, 900, 286, 3186, 484, 2148, 318, 40369, 13, 1406, 484, 821, 50795]",0.0,-0.2049708506640266,1.4756756756756757,0.0016115409089252353
1370,1370,1012696,10135.599999999999,10144.08," more focused. And yeah, and Dropbox sort of at least during the time I was there had the","[50795, 517, 5670, 13, 843, 10194, 11, 290, 38930, 3297, 286, 379, 1551, 1141, 262, 640, 314, 373, 612, 550, 262, 51219]",0.0,-0.2049708506640266,1.4756756756756757,0.0016115409089252353
1371,1371,1012696,10144.08,10151.759999999998," tendency of sort of making a big plan, putting the whole company behind that plan for a year","[51219, 13542, 286, 3297, 286, 1642, 257, 1263, 1410, 11, 5137, 262, 2187, 1664, 2157, 326, 1410, 329, 257, 614, 51603]",0.0,-0.2049708506640266,1.4756756756756757,0.0016115409089252353
1372,1372,1015176,10152.32,10155.36, and then evaluate and then suddenly find that,"[50391, 290, 788, 13446, 290, 788, 6451, 1064, 326, 50543]",0.0,-0.12474483913845485,1.6111111111111112,0.00011961379641434178
1373,1373,1015176,10157.68,10162.48, everything was wrong about the plan and then they had to do something completely different.,"[50659, 2279, 373, 2642, 546, 262, 1410, 290, 788, 484, 550, 284, 466, 1223, 3190, 1180, 13, 50899]",0.0,-0.12474483913845485,1.6111111111111112,0.00011961379641434178
1374,1374,1015176,10163.6,10171.12, And so there was like the annual engineering reorg was sort of an unpleasant tradition at,"[50955, 843, 523, 612, 373, 588, 262, 5079, 8705, 302, 2398, 373, 3297, 286, 281, 22029, 6761, 379, 51331]",0.0,-0.12474483913845485,1.6111111111111112,0.00011961379641434178
1375,1375,1015176,10171.12,10176.16," Dropbox because like, oh, there's a new VP of engineering. And so now all the directors are","[51331, 38930, 780, 588, 11, 11752, 11, 612, 338, 257, 649, 23342, 286, 8705, 13, 843, 523, 783, 477, 262, 13445, 389, 51583]",0.0,-0.12474483913845485,1.6111111111111112,0.00011961379641434178
1376,1376,1017616,10176.16,10184.4, being reshuffled. And this guy was in charge of infrastructure one year and the next year he was,"[50363, 852, 27179, 1648, 992, 13, 843, 428, 3516, 373, 287, 3877, 286, 6884, 530, 614, 290, 262, 1306, 614, 339, 373, 50775]",0.0,-0.12588054531223172,1.5708502024291497,0.0006322108674794436
1377,1377,1017616,10184.4,10190.08," made in charge of, I don't know, product development. It's fascinating because like you don't think","[50775, 925, 287, 3877, 286, 11, 314, 836, 470, 760, 11, 1720, 2478, 13, 632, 338, 13899, 780, 588, 345, 836, 470, 892, 51059]",0.0,-0.12588054531223172,1.5708502024291497,0.0006322108674794436
1378,1378,1017616,10190.08,10195.52," about these companies internally, but I, you know, Dropbox to me from the very beginning was one of","[51059, 546, 777, 2706, 20947, 11, 475, 314, 11, 345, 760, 11, 38930, 284, 502, 422, 262, 845, 3726, 373, 530, 286, 51331]",0.0,-0.12588054531223172,1.5708502024291497,0.0006322108674794436
1379,1379,1017616,10195.52,10202.24," my favorite services. There's certain like programs and online services that make me happy,","[51331, 616, 4004, 2594, 13, 1318, 338, 1728, 588, 4056, 290, 2691, 2594, 326, 787, 502, 3772, 11, 51667]",0.0,-0.12588054531223172,1.5708502024291497,0.0006322108674794436
1380,1380,1020224,10202.32,10206.88, making me more efficient and all that kind of stuff. But one of the powers of those kinds of,"[50367, 1642, 502, 517, 6942, 290, 477, 326, 1611, 286, 3404, 13, 887, 530, 286, 262, 5635, 286, 883, 6982, 286, 50595]",0.0,-0.14579648441738552,1.7047970479704797,0.004489281214773655
1381,1381,1020224,10206.88,10211.6," services, they disappear that you're not supposed to think about how it all works. But it's incredible","[50595, 2594, 11, 484, 10921, 326, 345, 821, 407, 4385, 284, 892, 546, 703, 340, 477, 2499, 13, 887, 340, 338, 8082, 50831]",0.0,-0.14579648441738552,1.7047970479704797,0.004489281214773655
1382,1382,1020224,10211.6,10220.08," to me that you can sync stuff effortlessly across so many machines so quickly. And like, don't have","[50831, 284, 502, 326, 345, 460, 17510, 3404, 42241, 1973, 523, 867, 8217, 523, 2952, 13, 843, 588, 11, 836, 470, 423, 51255]",0.0,-0.14579648441738552,1.7047970479704797,0.004489281214773655
1383,1383,1020224,10220.08,10224.72," to worry about conflicts. They take care of the, you know, as a person that comes from","[51255, 284, 5490, 546, 12333, 13, 1119, 1011, 1337, 286, 262, 11, 345, 760, 11, 355, 257, 1048, 326, 2058, 422, 51487]",0.0,-0.14579648441738552,1.7047970479704797,0.004489281214773655
1384,1384,1020224,10225.44,10230.16, version repositories and all that kind of stuff or merge is super difficult and,"[51523, 2196, 38072, 290, 477, 326, 1611, 286, 3404, 393, 20121, 318, 2208, 2408, 290, 51759]",0.0,-0.14579648441738552,1.7047970479704797,0.004489281214773655
1385,1385,1023016,10231.119999999999,10234.8, just keeping different versions of different files is very tricky. The fact that they could,"[50411, 655, 5291, 1180, 6300, 286, 1180, 3696, 318, 845, 17198, 13, 383, 1109, 326, 484, 714, 50595]",0.0,-0.1442209099823574,1.7011070110701108,0.00027614610735327005
1386,1386,1023016,10234.8,10239.68," take care of that is just, I don't know, the, the engineering behind the scenes must be super","[50595, 1011, 1337, 286, 326, 318, 655, 11, 314, 836, 470, 760, 11, 262, 11, 262, 8705, 2157, 262, 8188, 1276, 307, 2208, 50839]",0.0,-0.1442209099823574,1.7011070110701108,0.00027614610735327005
1387,1387,1023016,10239.68,10245.6," difficult, both on the computer infrastructure and the software. A lot of internal sort of","[50839, 2408, 11, 1111, 319, 262, 3644, 6884, 290, 262, 3788, 13, 317, 1256, 286, 5387, 3297, 286, 51135]",0.0,-0.1442209099823574,1.7011070110701108,0.00027614610735327005
1388,1388,1023016,10246.16,10253.039999999999," hand ringing about things like that. But the, the product itself always worked very smoothly.","[51163, 1021, 32333, 546, 1243, 588, 326, 13, 887, 262, 11, 262, 1720, 2346, 1464, 3111, 845, 21461, 13, 51507]",0.0,-0.1442209099823574,1.7011070110701108,0.00027614610735327005
1389,1389,1023016,10254.48,10258.88, But there's probably a lot of lessons to that. You can have a lot of turmoil inside on the,"[51579, 887, 612, 338, 2192, 257, 1256, 286, 11658, 284, 326, 13, 921, 460, 423, 257, 1256, 286, 26962, 2641, 319, 262, 51799]",0.0,-0.1442209099823574,1.7011070110701108,0.00027614610735327005
1390,1390,1025888,10258.88,10264.4," engineering side. But if the product is good, the product is good and maybe don't mess with that","[50363, 8705, 1735, 13, 887, 611, 262, 1720, 318, 922, 11, 262, 1720, 318, 922, 290, 3863, 836, 470, 2085, 351, 326, 50639]",0.0,-0.1824588179588318,1.6801801801801801,0.0004031795833725482
1391,1391,1025888,10264.4,10270.4," either. You know, when it's good, keep it's like with Google focus on the search and ads.","[50639, 2035, 13, 921, 760, 11, 618, 340, 338, 922, 11, 1394, 340, 338, 588, 351, 3012, 2962, 319, 262, 2989, 290, 9011, 13, 50939]",0.0,-0.1824588179588318,1.6801801801801801,0.0004031795833725482
1392,1392,1025888,10271.839999999998,10277.439999999999, Right. And money will come. Yeah. And make sure that's done extremely well. And don't forget,"[51011, 6498, 13, 843, 1637, 481, 1282, 13, 9425, 13, 843, 787, 1654, 326, 338, 1760, 4457, 880, 13, 843, 836, 470, 6044, 51291]",0.0,-0.1824588179588318,1.6801801801801801,0.0004031795833725482
1393,1393,1025888,10277.439999999999,10283.92, what you do extremely well. And in what ways do you provide value and happiness to the world?,"[51291, 644, 345, 466, 4457, 880, 13, 843, 287, 644, 2842, 466, 345, 2148, 1988, 290, 12157, 284, 262, 995, 30, 51615]",0.0,-0.1824588179588318,1.6801801801801801,0.0004031795833725482
1394,1394,1028392,10283.92,10289.6, Make sure you do that well. Is there something else to say about Google and Microsoft?,"[50363, 6889, 1654, 345, 466, 326, 880, 13, 1148, 612, 1223, 2073, 284, 910, 546, 3012, 290, 5413, 30, 50647]",0.0,-0.1403836984744017,1.5843621399176955,0.002940697828307748
1395,1395,1028392,10289.6,10294.32," Microsoft has had a very fascinating shift recently with the new CEO,","[50647, 5413, 468, 550, 257, 845, 13899, 6482, 2904, 351, 262, 649, 6123, 11, 50883]",0.0,-0.1403836984744017,1.5843621399176955,0.002940697828307748
1396,1396,1028392,10295.28,10301.68," what, you know, recent CEO with purchasing GitHub, embracing open source culture,","[50931, 644, 11, 345, 760, 11, 2274, 6123, 351, 14080, 21722, 11, 26005, 1280, 2723, 3968, 11, 51251]",0.0,-0.1403836984744017,1.5843621399176955,0.002940697828307748
1397,1397,1028392,10301.68,10304.48, embracing the developer culture is pretty interesting to see.,"[51251, 26005, 262, 8517, 3968, 318, 2495, 3499, 284, 766, 13, 51391]",0.0,-0.1403836984744017,1.5843621399176955,0.002940697828307748
1398,1398,1028392,10304.48,10310.960000000001," That's like why I joined Microsoft. I mean, after retiring and thinking that I would","[51391, 1320, 338, 588, 1521, 314, 5399, 5413, 13, 314, 1612, 11, 706, 29040, 290, 3612, 326, 314, 561, 51715]",0.0,-0.1403836984744017,1.5843621399176955,0.002940697828307748
1399,1399,1031096,10311.679999999998,10315.439999999999," stay retired for the rest of my life, which of course was a ridiculous thought.","[50399, 2652, 9880, 329, 262, 1334, 286, 616, 1204, 11, 543, 286, 1781, 373, 257, 11441, 1807, 13, 50587]",0.0,-0.174584032541298,1.5675675675675675,0.00031114977900870144
1400,1400,1031096,10316.16,10322.4," But I was, I was, I was done working for a bit and then the pandemic made me realize that work","[50623, 887, 314, 373, 11, 314, 373, 11, 314, 373, 1760, 1762, 329, 257, 1643, 290, 788, 262, 19798, 5314, 925, 502, 6537, 326, 670, 50935]",0.0,-0.174584032541298,1.5675675675675675,0.00031114977900870144
1401,1401,1031096,10322.4,10328.72, work and also provide a source of fulfillment. Keep you out of trouble.,"[50935, 670, 290, 635, 2148, 257, 2723, 286, 32402, 13, 9175, 345, 503, 286, 5876, 13, 51251]",0.0,-0.174584032541298,1.5675675675675675,0.00031114977900870144
1402,1402,1031096,10331.199999999999,10340.64," Microsoft is a very interesting company because it has this incredible, very long and varied history.","[51375, 5413, 318, 257, 845, 3499, 1664, 780, 340, 468, 428, 8082, 11, 845, 890, 290, 15641, 2106, 13, 51847]",0.0,-0.174584032541298,1.5675675675675675,0.00031114977900870144
1403,1403,1034096,10341.119999999999,10350.24," And this amazing catalog of products that many of which also date way back. I mean,","[50371, 843, 428, 4998, 18388, 286, 3186, 326, 867, 286, 543, 635, 3128, 835, 736, 13, 314, 1612, 11, 50827]",0.0,-0.11671790932164047,1.434065934065934,8.58889616210945e-05
1404,1404,1034096,10352.88,10358.88," I've been, been talking to a bunch of Excel people lately and Excel is like 35 years old.","[50959, 314, 1053, 587, 11, 587, 3375, 284, 257, 7684, 286, 24134, 661, 16537, 290, 24134, 318, 588, 3439, 812, 1468, 13, 51259]",0.0,-0.11671790932164047,1.434065934065934,8.58889616210945e-05
1405,1405,1034096,10359.839999999998,10366.08," And they can still read spreadsheets that, that they might find on an old floppy drive.","[51307, 843, 484, 460, 991, 1100, 4104, 42011, 326, 11, 326, 484, 1244, 1064, 319, 281, 1468, 49415, 3708, 13, 51619]",0.0,-0.11671790932164047,1.434065934065934,8.58889616210945e-05
1406,1406,1036608,10366.8,10372.08," Yeah. Yeah, there's, man, there've been so many incredible tools through the years.","[50399, 9425, 13, 9425, 11, 612, 338, 11, 582, 11, 612, 1053, 587, 523, 867, 8082, 4899, 832, 262, 812, 13, 50663]",0.0,-0.1993175802878963,1.5956521739130434,0.0028125012759119272
1407,1407,1036608,10373.2,10381.039999999999," Excel, one of, one of the great shames of my life is that I've never learned how to use Excel","[50719, 24134, 11, 530, 286, 11, 530, 286, 262, 1049, 427, 1047, 286, 616, 1204, 318, 326, 314, 1053, 1239, 4499, 703, 284, 779, 24134, 51111]",0.0,-0.1993175802878963,1.5956521739130434,0.0028125012759119272
1408,1408,1036608,10381.039999999999,10386.88," well. I mean, it just always felt like so many features are there. It's similar with IDEs,","[51111, 880, 13, 314, 1612, 11, 340, 655, 1464, 2936, 588, 523, 867, 3033, 389, 612, 13, 632, 338, 2092, 351, 4522, 23041, 11, 51403]",0.0,-0.1993175802878963,1.5956521739130434,0.0028125012759119272
1409,1409,1036608,10386.88,10393.44," like PyCharm. It feels like I, I converge quickly to the dumbest way to use a thing to get the job","[51403, 588, 9485, 1925, 1670, 13, 632, 5300, 588, 314, 11, 314, 47873, 2952, 284, 262, 13526, 395, 835, 284, 779, 257, 1517, 284, 651, 262, 1693, 51731]",0.0,-0.1993175802878963,1.5956521739130434,0.0028125012759119272
1410,1410,1039344,10393.44,10396.800000000001, done when clearly there's so much more power in your fingertips.,"[50363, 1760, 618, 4084, 612, 338, 523, 881, 517, 1176, 287, 534, 40142, 13, 50531]",0.0,-0.17267632715910383,1.6285714285714286,0.001406489871442318
1411,1411,1039344,10397.68,10401.76," Yeah. But there's, I do think there's probably expert users of Excel.","[50575, 9425, 13, 887, 612, 338, 11, 314, 466, 892, 612, 338, 2192, 5887, 2985, 286, 24134, 13, 50779]",0.0,-0.17267632715910383,1.6285714285714286,0.001406489871442318
1412,1412,1039344,10403.76,10408.640000000001," Excel is a cash cow, actually. Oh, it actually brings the money. Oh, yeah.","[50879, 24134, 318, 257, 5003, 9875, 11, 1682, 13, 3966, 11, 340, 1682, 6774, 262, 1637, 13, 3966, 11, 10194, 13, 51123]",0.0,-0.17267632715910383,1.6285714285714286,0.001406489871442318
1413,1413,1039344,10408.640000000001,10416.480000000001," A lot of the engineering sort of, if you look deep inside Excel, there's some very good engineering,","[51123, 317, 1256, 286, 262, 8705, 3297, 286, 11, 611, 345, 804, 2769, 2641, 24134, 11, 612, 338, 617, 845, 922, 8705, 11, 51515]",0.0,-0.17267632715910383,1.6285714285714286,0.001406489871442318
1414,1414,1039344,10416.480000000001,10422.800000000001," very, very impressive stuff. Okay. Now I need to definitely learn Excel a little better.","[51515, 845, 11, 845, 8036, 3404, 13, 16805, 13, 2735, 314, 761, 284, 4753, 2193, 24134, 257, 1310, 1365, 13, 51831]",0.0,-0.17267632715910383,1.6285714285714286,0.001406489871442318
1415,1415,1042280,10422.88,10427.84, I had issues because I'm a keyboard person. So I had issues coming up with shortcuts. And,"[50367, 314, 550, 2428, 780, 314, 1101, 257, 10586, 1048, 13, 1406, 314, 550, 2428, 2406, 510, 351, 32953, 13, 843, 50615]",0.0,-0.1203033727243406,1.7343173431734318,0.00041303219040855765
1416,1416,1042280,10427.84,10433.439999999999," Microsoft sometimes it's changed over the years, but sometimes they kind of want to make things","[50615, 5413, 3360, 340, 338, 3421, 625, 262, 812, 11, 475, 3360, 484, 1611, 286, 765, 284, 787, 1243, 50895]",0.0,-0.1203033727243406,1.7343173431734318,0.00041303219040855765
1417,1417,1042280,10433.439999999999,10441.439999999999, easier for you on the surface and therefore make it harder for like people that like to have,"[50895, 4577, 329, 345, 319, 262, 4417, 290, 4361, 787, 340, 7069, 329, 588, 661, 326, 588, 284, 423, 51295]",0.0,-0.1203033727243406,1.7343173431734318,0.00041303219040855765
1418,1418,1042280,10441.439999999999,10446.64," shortcuts and all that kind of stuff to optimize their workflow. Now Excel is probably, people","[51295, 32953, 290, 477, 326, 1611, 286, 3404, 284, 27183, 511, 30798, 13, 2735, 24134, 318, 2192, 11, 661, 51555]",0.0,-0.1203033727243406,1.7343173431734318,0.00041303219040855765
1419,1419,1042280,10446.64,10450.64," are probably yelling at me. It's like, no, Excel probably has a lot of ways to optimize the work","[51555, 389, 2192, 22187, 379, 502, 13, 632, 338, 588, 11, 645, 11, 24134, 2192, 468, 257, 1256, 286, 2842, 284, 27183, 262, 670, 51755]",0.0,-0.1203033727243406,1.7343173431734318,0.00041303219040855765
1420,1420,1045064,10450.64,10457.359999999999," in fact, I keep discovering that there are many features in Excel that only exists at keyboard","[50363, 287, 1109, 11, 314, 1394, 21611, 326, 612, 389, 867, 3033, 287, 24134, 326, 691, 7160, 379, 10586, 50699]",0.0,-0.14516008276688425,1.619047619047619,0.0008145914180204272
1421,1421,1045064,10457.359999999999,10463.92," shortcuts. Yeah, that's the sense I have. And now like I'm embarrassed that it's just, you just","[50699, 32953, 13, 9425, 11, 326, 338, 262, 2565, 314, 423, 13, 843, 783, 588, 314, 1101, 21100, 326, 340, 338, 655, 11, 345, 655, 51027]",0.0,-0.14516008276688425,1.619047619047619,0.0008145914180204272
1422,1422,1045064,10463.92,10470.72," have to know what they are. Yeah. That's, that's like, there's no logic or, or reason to the","[51027, 423, 284, 760, 644, 484, 389, 13, 9425, 13, 1320, 338, 11, 326, 338, 588, 11, 612, 338, 645, 9156, 393, 11, 393, 1738, 284, 262, 51367]",0.0,-0.14516008276688425,1.619047619047619,0.0008145914180204272
1423,1423,1045064,10470.72,10476.0," assignment of the keyboard shortcuts because they, they go back even longer than 35 years.","[51367, 16237, 286, 262, 10586, 32953, 780, 484, 11, 484, 467, 736, 772, 2392, 621, 3439, 812, 13, 51631]",0.0,-0.14516008276688425,1.619047619047619,0.0008145914180204272
1424,1424,1047600,10476.96,10482.48, Can you maybe comment about such in Adela and how hard it is for a CEO to sort of pivot,"[50411, 1680, 345, 3863, 2912, 546, 884, 287, 1215, 10304, 290, 703, 1327, 340, 318, 329, 257, 6123, 284, 3297, 286, 30355, 50687]",0.0,-0.1765606850385666,1.4585635359116023,0.003663035575300455
1425,1425,1047600,10482.48,10486.88, the company towards open source or developer culture? Is there something you could see about,"[50687, 262, 1664, 3371, 1280, 2723, 393, 8517, 3968, 30, 1148, 612, 1223, 345, 714, 766, 546, 50907]",0.0,-0.1765606850385666,1.4585635359116023,0.003663035575300455
1426,1426,1047600,10486.88,10493.92," like, what's the role of leadership in such a pivot and definition of a new vision?","[50907, 588, 11, 644, 338, 262, 2597, 286, 5531, 287, 884, 257, 30355, 290, 6770, 286, 257, 649, 5761, 30, 51259]",0.0,-0.1765606850385666,1.4585635359116023,0.003663035575300455
1427,1427,1049392,10494.0,10507.12," I've never met him, but I hear he's just a really sharp thinker, but he also has an incredible","[50367, 314, 1053, 1239, 1138, 683, 11, 475, 314, 3285, 339, 338, 655, 257, 1107, 7786, 45206, 11, 475, 339, 635, 468, 281, 8082, 51023]",0.0,-0.10507898745329483,1.371212121212121,0.0009682640666142106
1428,1428,1049392,10507.12,10513.76," business sense. He took the organization that had very solid pieces, but that was also","[51023, 1597, 2565, 13, 679, 1718, 262, 4009, 326, 550, 845, 4735, 5207, 11, 475, 326, 373, 635, 51355]",0.0,-0.10507898745329483,1.371212121212121,0.0009682640666142106
1429,1429,1051376,10514.56,10524.64," struggling with all sorts of shameful things, especially the Steve Balmer time. I imagine in","[50403, 9648, 351, 477, 10524, 286, 34078, 1243, 11, 2592, 262, 6542, 8528, 647, 640, 13, 314, 5967, 287, 50907]",0.0,-0.20377597212791443,1.5138121546961325,0.0017356672324240208
1430,1430,1051376,10524.64,10531.44," part through his personal charm and thinking, and of course, the great trust that the rest of","[50907, 636, 832, 465, 2614, 20024, 290, 3612, 11, 290, 286, 1781, 11, 262, 1049, 3774, 326, 262, 1334, 286, 51247]",0.0,-0.20377597212791443,1.5138121546961325,0.0017356672324240208
1431,1431,1051376,10531.44,10536.800000000001," the leadership has in him, he managed to, to really turn the company around and sort of","[51247, 262, 5531, 468, 287, 683, 11, 339, 5257, 284, 11, 284, 1107, 1210, 262, 1664, 1088, 290, 3297, 286, 51515]",0.0,-0.20377597212791443,1.5138121546961325,0.0017356672324240208
1432,1432,1053680,10537.199999999999,10546.24," change it from, from openly hostile to open source to, to actively embracing open source.","[50383, 1487, 340, 422, 11, 422, 11764, 12524, 284, 1280, 2723, 284, 11, 284, 10630, 26005, 1280, 2723, 13, 50835]",0.0,-0.1532003190782335,1.6491228070175439,0.00012126816000090912
1433,1433,1053680,10546.88,10552.16," And that doesn't mean that suddenly Excel is going to go open source, but that means that","[50867, 843, 326, 1595, 470, 1612, 326, 6451, 24134, 318, 1016, 284, 467, 1280, 2723, 11, 475, 326, 1724, 326, 51131]",0.0,-0.1532003190782335,1.6491228070175439,0.00012126816000090912
1434,1434,1053680,10552.16,10558.8," there's room for a product like VS code, which is open source. Yeah, it's fascinating. It gives","[51131, 612, 338, 2119, 329, 257, 1720, 588, 22269, 2438, 11, 543, 318, 1280, 2723, 13, 9425, 11, 340, 338, 13899, 13, 632, 3607, 51463]",0.0,-0.1532003190782335,1.6491228070175439,0.00012126816000090912
1435,1435,1053680,10558.8,10566.0," me faith that large companies with good leadership can grow, can expand, can change and pivot and so","[51463, 502, 4562, 326, 1588, 2706, 351, 922, 5531, 460, 1663, 11, 460, 4292, 11, 460, 1487, 290, 30355, 290, 523, 51823]",0.0,-0.1532003190782335,1.6491228070175439,0.00012126816000090912
1436,1436,1056600,10566.0,10572.72, on develop because it gets harder and harder as the company gets large. You wrote a blog post,"[50363, 319, 1205, 780, 340, 3011, 7069, 290, 7069, 355, 262, 1664, 3011, 1588, 13, 921, 2630, 257, 4130, 1281, 50699]",0.0,-0.14148827486259993,1.5418326693227091,0.002052983967587352
1437,1437,1056600,10572.72,10577.68, in response to a person looking for advice about whether with a CS degree to choose a nine to five,"[50699, 287, 2882, 284, 257, 1048, 2045, 329, 5608, 546, 1771, 351, 257, 9429, 4922, 284, 3853, 257, 5193, 284, 1936, 50947]",0.0,-0.14148827486259993,1.5418326693227091,0.002052983967587352
1438,1438,1056600,10577.68,10585.2, job or to become an entrepreneur. It's an interesting question. If you just think from first principles,"[50947, 1693, 393, 284, 1716, 281, 19500, 13, 632, 338, 281, 3499, 1808, 13, 1002, 345, 655, 892, 422, 717, 7811, 51323]",0.0,-0.14148827486259993,1.5418326693227091,0.002052983967587352
1439,1439,1056600,10585.2,10591.04," right now, somebody has took a few years in programming has loved software engineering. In","[51323, 826, 783, 11, 8276, 468, 1718, 257, 1178, 812, 287, 8300, 468, 6151, 3788, 8705, 13, 554, 51615]",0.0,-0.14148827486259993,1.5418326693227091,0.002052983967587352
1440,1440,1059104,10591.12,10598.320000000002," some sense, creating Python is an entrepreneurial endeavor. That's a choice that a lot of people","[50367, 617, 2565, 11, 4441, 11361, 318, 281, 39365, 28251, 13, 1320, 338, 257, 3572, 326, 257, 1256, 286, 661, 50727]",0.0,-0.12908370320389911,1.6553398058252426,0.0006501468596979976
1441,1441,1059104,10598.960000000001,10605.28, that are good programmers have to make. Do I work for a big company or do I create something new?,"[50759, 326, 389, 922, 24867, 423, 284, 787, 13, 2141, 314, 670, 329, 257, 1263, 1664, 393, 466, 314, 2251, 1223, 649, 30, 51075]",0.0,-0.12908370320389911,1.6553398058252426,0.0006501468596979976
1442,1442,1059104,10608.0,10611.84, Or you can work for a big company and create something new there.,"[51211, 1471, 345, 460, 670, 329, 257, 1263, 1664, 290, 2251, 1223, 649, 612, 13, 51403]",0.0,-0.12908370320389911,1.6553398058252426,0.0006501468596979976
1443,1443,1059104,10613.28,10620.080000000002," Oh, inside the, yeah, I mean big companies have individuals who create new stuff","[51475, 3966, 11, 2641, 262, 11, 10194, 11, 314, 1612, 1263, 2706, 423, 3925, 508, 2251, 649, 3404, 51815]",0.0,-0.12908370320389911,1.6553398058252426,0.0006501468596979976
1444,1444,1062008,10620.8,10626.08, that eventually grows big all the time. And if you're the person that creates a new thing and,"[50399, 326, 4191, 13676, 1263, 477, 262, 640, 13, 843, 611, 345, 821, 262, 1048, 326, 8075, 257, 649, 1517, 290, 50663]",0.0,-0.1468372012293616,1.6278026905829597,4.330069350544363e-05
1445,1445,1062008,10626.08,10631.039999999999," grows big, you'll have a chance to move up quickly in the company to run that thing.","[50663, 13676, 1263, 11, 345, 1183, 423, 257, 2863, 284, 1445, 510, 2952, 287, 262, 1664, 284, 1057, 326, 1517, 13, 50911]",0.0,-0.1468372012293616,1.6278026905829597,4.330069350544363e-05
1446,1446,1062008,10632.4,10640.32," If that's your aspiration, what can also happen is that someone is brilliant engineer and sort of","[50979, 1002, 326, 338, 534, 48217, 11, 644, 460, 635, 1645, 318, 326, 2130, 318, 10457, 11949, 290, 3297, 286, 51375]",0.0,-0.1468372012293616,1.6278026905829597,4.330069350544363e-05
1447,1447,1062008,10641.44,10650.0, builds a great first version of a product and has no aspirations to then become a man.,"[51431, 12188, 257, 1049, 717, 2196, 286, 257, 1720, 290, 468, 645, 27337, 284, 788, 1716, 257, 582, 13, 51859]",0.0,-0.1468372012293616,1.6278026905829597,4.330069350544363e-05
1448,1448,1065008,10650.56,10656.16, And grow the team from five people to 20 people to 100 people to 1000 people and,"[50387, 843, 1663, 262, 1074, 422, 1936, 661, 284, 1160, 661, 284, 1802, 661, 284, 8576, 661, 290, 50667]",0.0,-0.18730859756469725,1.6603773584905661,0.0023961039260029793
1449,1449,1065008,10657.28,10665.68, be in charge of hiring and meetings and they move on to inventing another crazy thing inside the,"[50723, 307, 287, 3877, 286, 12965, 290, 8292, 290, 484, 1445, 319, 284, 8067, 278, 1194, 7165, 1517, 2641, 262, 51143]",0.0,-0.18730859756469725,1.6603773584905661,0.0023961039260029793
1450,1450,1065008,10665.68,10673.68, same company or sometimes they they found a startup or they moved to a different great,"[51143, 976, 1664, 393, 3360, 484, 484, 1043, 257, 13693, 393, 484, 3888, 284, 257, 1180, 1049, 51543]",0.0,-0.18730859756469725,1.6603773584905661,0.0023961039260029793
1451,1451,1067368,10674.56,10681.6, large or small company. There's all sorts of models. And sometimes people sort of do have this,"[50407, 1588, 393, 1402, 1664, 13, 1318, 338, 477, 10524, 286, 4981, 13, 843, 3360, 661, 3297, 286, 466, 423, 428, 50759]",0.0,-0.1807314157485962,1.4262295081967213,0.00010021019988926128
1452,1452,1067368,10682.24,10690.56," whole trajectory from engineer buckling down writing code, not 9 to 5, but more like","[50791, 2187, 22942, 422, 11949, 10230, 1359, 866, 3597, 2438, 11, 407, 860, 284, 642, 11, 475, 517, 588, 51207]",0.0,-0.1807314157485962,1.4262295081967213,0.00010021019988926128
1453,1453,1067368,10691.52,10699.36," noon till midnight, seven days a week. And coming up with the product and sort of","[51255, 19613, 10597, 15896, 11, 3598, 1528, 257, 1285, 13, 843, 2406, 510, 351, 262, 1720, 290, 3297, 286, 51647]",0.0,-0.1807314157485962,1.4262295081967213,0.00010021019988926128
1454,1454,1069936,10699.84,10707.84," staying in charge. I mean, if you take Drew Houston, drop oxus founder, he is still the CEO.","[50387, 10589, 287, 3877, 13, 314, 1612, 11, 611, 345, 1011, 18624, 6995, 11, 4268, 12018, 385, 9119, 11, 339, 318, 991, 262, 6123, 13, 50787]",0.0,-0.3592752908405505,1.530054644808743,0.00018640012422110885
1455,1455,1069936,10709.04,10715.36," And at least when when I was there, he had not checked out or anything. He was, he was good","[50847, 843, 379, 1551, 618, 618, 314, 373, 612, 11, 339, 550, 407, 10667, 503, 393, 1997, 13, 679, 373, 11, 339, 373, 922, 51163]",0.0,-0.3592752908405505,1.530054644808743,0.00018640012422110885
1456,1456,1069936,10715.36,10724.0," CEO, but he had started out as the technical inventor or co inventor. And so he was someone who","[51163, 6123, 11, 475, 339, 550, 2067, 503, 355, 262, 6276, 33475, 393, 763, 33475, 13, 843, 523, 339, 373, 2130, 508, 51595]",0.0,-0.3592752908405505,1.530054644808743,0.00018640012422110885
1457,1457,1072400,10724.96,10731.68," I don't know if he always aspired that I think when when he was 16, he already started a company.","[50411, 314, 836, 470, 760, 611, 339, 1464, 355, 6474, 326, 314, 892, 618, 618, 339, 373, 1467, 11, 339, 1541, 2067, 257, 1664, 13, 50747]",0.0,-0.2885622569492885,1.5232558139534884,9.878441778710112e-05
1458,1458,1072400,10731.68,10739.04," So maybe maybe he did, but he sort of it turned out that that he he did have the","[50747, 1406, 3863, 3863, 339, 750, 11, 475, 339, 3297, 286, 340, 2900, 503, 326, 326, 339, 339, 750, 423, 262, 51115]",0.0,-0.2885622569492885,1.5232558139534884,9.878441778710112e-05
1459,1459,1072400,10739.84,10747.36, personal sort of skill set needed to grow and stay on top. And other people sort of,"[51155, 2614, 3297, 286, 5032, 900, 2622, 284, 1663, 290, 2652, 319, 1353, 13, 843, 584, 661, 3297, 286, 51531]",0.0,-0.2885622569492885,1.5232558139534884,9.878441778710112e-05
1460,1460,1074736,10747.36,10755.04, sort of a brilliant engineers and horrible at management. I count myself at least in the second,"[50363, 3297, 286, 257, 10457, 12037, 290, 12361, 379, 4542, 13, 314, 954, 3589, 379, 1551, 287, 262, 1218, 50747]",0.0,-0.1755890332735502,1.5263157894736843,0.0007492361473850906
1461,1461,1074736,10755.04,10761.36, category. So you're your first love and still your love is to be the quote unquote individual,"[50747, 6536, 13, 1406, 345, 821, 534, 717, 1842, 290, 991, 534, 1842, 318, 284, 307, 262, 9577, 555, 22708, 1981, 51063]",0.0,-0.1755890332735502,1.5263157894736843,0.0007492361473850906
1462,1462,1074736,10761.36,10771.52, contributor. So the programmer. Do you have advice for a programming beginner on how to learn Python,"[51063, 18920, 13, 1406, 262, 24292, 13, 2141, 345, 423, 5608, 329, 257, 8300, 31516, 319, 703, 284, 2193, 11361, 51571]",0.0,-0.1755890332735502,1.5263157894736843,0.0007492361473850906
1463,1463,1077152,10771.52,10785.04," the right way? Find something you actually want to do with it. If you say, I want to learn skill","[50363, 262, 826, 835, 30, 9938, 1223, 345, 1682, 765, 284, 466, 351, 340, 13, 1002, 345, 910, 11, 314, 765, 284, 2193, 5032, 51039]",0.0,-0.13889621805261682,1.3714285714285714,0.007419587578624487
1464,1464,1077152,10785.04,10793.84," X, that's not enough motivation. You need to pick something. And it can be a, it can be a crazy","[51039, 1395, 11, 326, 338, 407, 1576, 14052, 13, 921, 761, 284, 2298, 1223, 13, 843, 340, 460, 307, 257, 11, 340, 460, 307, 257, 7165, 51479]",0.0,-0.13889621805261682,1.3714285714285714,0.007419587578624487
1465,1465,1079384,10793.92,10803.12, problem you want to solve. It can be completely unrealistic. But something that that challenges,"[50367, 1917, 345, 765, 284, 8494, 13, 632, 460, 307, 3190, 31363, 13, 887, 1223, 326, 326, 6459, 50827]",0.0,-0.17006855425627335,1.6075949367088607,0.006064462009817362
1466,1466,1079384,10803.12,10812.72," you into actually learning coding in, in some language. And there's so many projects out there,","[50827, 345, 656, 1682, 4673, 19617, 287, 11, 287, 617, 3303, 13, 843, 612, 338, 523, 867, 4493, 503, 612, 11, 51307]",0.0,-0.17006855425627335,1.6075949367088607,0.006064462009817362
1467,1467,1079384,10812.72,10816.48, you can look forward like that. That doesn't have to be some big ambitious thing. It could be,"[51307, 345, 460, 804, 2651, 588, 326, 13, 1320, 1595, 470, 423, 284, 307, 617, 1263, 14742, 1517, 13, 632, 714, 307, 51495]",0.0,-0.17006855425627335,1.6075949367088607,0.006064462009817362
1468,1468,1079384,10816.48,10822.08," writing a small bot. If you're into social media, you can write a red a bot or a Twitter bot or","[51495, 3597, 257, 1402, 10214, 13, 1002, 345, 821, 656, 1919, 2056, 11, 345, 460, 3551, 257, 2266, 257, 10214, 393, 257, 3009, 10214, 393, 51775]",0.0,-0.17006855425627335,1.6075949367088607,0.006064462009817362
1469,1469,1082208,10822.88,10829.6," or some aspect of automating some something that you do every single day, processing files,","[50403, 393, 617, 4843, 286, 3557, 803, 617, 1223, 326, 345, 466, 790, 2060, 1110, 11, 7587, 3696, 11, 50739]",0.0,-0.180971547781703,1.7014218009478672,0.00034783442970365286
1470,1470,1082208,10829.6,10835.2," all that kind of stuff. Nowadays, you can take machine learning components and sort of","[50739, 477, 326, 1611, 286, 3404, 13, 2735, 20544, 11, 345, 460, 1011, 4572, 4673, 6805, 290, 3297, 286, 51019]",0.0,-0.180971547781703,1.7014218009478672,0.00034783442970365286
1471,1471,1082208,10836.24,10841.44," plug those things together. So cool stuff with them. So that's actually a good, really good","[51071, 6107, 883, 1243, 1978, 13, 1406, 3608, 3404, 351, 606, 13, 1406, 326, 338, 1682, 257, 922, 11, 1107, 922, 51331]",0.0,-0.180971547781703,1.7014218009478672,0.00034783442970365286
1472,1472,1082208,10841.44,10844.96," example. So if you're interested in machine learning, the state machine learning is such","[51331, 1672, 13, 1406, 611, 345, 821, 4609, 287, 4572, 4673, 11, 262, 1181, 4572, 4673, 318, 884, 51507]",0.0,-0.180971547781703,1.7014218009478672,0.00034783442970365286
1473,1473,1084496,10845.679999999998,10853.279999999999, that like a tutorial that takes an hour can get you to start using pre-trained models to do,"[50399, 326, 588, 257, 11808, 326, 2753, 281, 1711, 460, 651, 345, 284, 923, 1262, 662, 12, 35311, 4981, 284, 466, 50779]",0.0,-0.1089836061000824,1.695067264573991,0.0005160819855518639
1474,1474,1084496,10853.279999999999,10857.679999999998, something super cool. And that's a good way to learn Python because you learn just enough to,"[50779, 1223, 2208, 3608, 13, 843, 326, 338, 257, 922, 835, 284, 2193, 11361, 780, 345, 2193, 655, 1576, 284, 50999]",0.0,-0.1089836061000824,1.695067264573991,0.0005160819855518639
1475,1475,1084496,10857.679999999998,10864.16," run this model and that's like a sneaky way to get in there to figure out how to import stuff,","[50999, 1057, 428, 2746, 290, 326, 338, 588, 257, 48930, 835, 284, 651, 287, 612, 284, 3785, 503, 703, 284, 1330, 3404, 11, 51323]",0.0,-0.1089836061000824,1.695067264573991,0.0005160819855518639
1476,1476,1084496,10864.16,10872.32," how to write basic IO, how to run functions. I'm not sure if it's the best way to learn the basics","[51323, 703, 284, 3551, 4096, 24418, 11, 703, 284, 1057, 5499, 13, 314, 1101, 407, 1654, 611, 340, 338, 262, 1266, 835, 284, 2193, 262, 19165, 51731]",0.0,-0.1089836061000824,1.695067264573991,0.0005160819855518639
1477,1477,1087232,10872.48,10877.52," Python, but it could be nice to just get fall in love first and then figure out the basics, right?","[50371, 11361, 11, 475, 340, 714, 307, 3621, 284, 655, 651, 2121, 287, 1842, 717, 290, 788, 3785, 503, 262, 19165, 11, 826, 30, 50623]",0.0,-0.18512667470903538,1.44,0.01324637420475483
1478,1478,1087232,10877.52,10883.039999999999," Yeah, you can't expect to learn Python from a one hour video,","[50623, 9425, 11, 345, 460, 470, 1607, 284, 2193, 11361, 422, 257, 530, 1711, 2008, 11, 50899]",0.0,-0.18512667470903538,1.44,0.01324637420475483
1479,1479,1087232,10883.039999999999,10892.24," sort of blanking out on the name of someone who wrote a very funny blog post where he said,","[50899, 3297, 286, 9178, 278, 503, 319, 262, 1438, 286, 2130, 508, 2630, 257, 845, 8258, 4130, 1281, 810, 339, 531, 11, 51359]",0.0,-0.18512667470903538,1.44,0.01324637420475483
1480,1480,1089224,10893.119999999999,10901.44," I see all these ads for things like learn Python in 10 days or so. And he said,","[50407, 314, 766, 477, 777, 9011, 329, 1243, 588, 2193, 11361, 287, 838, 1528, 393, 523, 13, 843, 339, 531, 11, 50823]",0.0,-0.1340188980102539,1.6591928251121075,0.011512785218656063
1481,1481,1089224,10901.44,10909.039999999999," the goal should be learn Python in 10 years. That's hilarious, but I completely disagree with that.","[50823, 262, 3061, 815, 307, 2193, 11361, 287, 838, 812, 13, 1320, 338, 20105, 11, 475, 314, 3190, 12546, 351, 326, 13, 51203]",0.0,-0.1340188980102539,1.6591928251121075,0.011512785218656063
1482,1482,1089224,10909.039999999999,10915.44, I think the criticism behind that is that the place is just like the blog post from earlier.,"[51203, 314, 892, 262, 7734, 2157, 326, 318, 326, 262, 1295, 318, 655, 588, 262, 4130, 1281, 422, 2961, 13, 51523]",0.0,-0.1340188980102539,1.6591928251121075,0.011512785218656063
1483,1483,1089224,10915.44,10920.24," The places that tell you learn Python five minutes or 10 minutes, they're actually usually really","[51523, 383, 4113, 326, 1560, 345, 2193, 11361, 1936, 2431, 393, 838, 2431, 11, 484, 821, 1682, 3221, 1107, 51763]",0.0,-0.1340188980102539,1.6591928251121075,0.011512785218656063
1484,1484,1092024,10920.24,10928.56," bad tutorials. So the thing is, I do believe that you can learn a thing in an hour to get some","[50363, 2089, 27992, 13, 1406, 262, 1517, 318, 11, 314, 466, 1975, 326, 345, 460, 2193, 257, 1517, 287, 281, 1711, 284, 651, 617, 50779]",0.0,-0.1622007179260254,1.5975103734439835,0.001992824487388134
1485,1485,1092024,10928.56,10935.119999999999," interesting quick, it hooks you. It just takes a tremendous amount of skill to be that kind of","[50779, 3499, 2068, 11, 340, 26569, 345, 13, 632, 655, 2753, 257, 12465, 2033, 286, 5032, 284, 307, 326, 1611, 286, 51107]",0.0,-0.1622007179260254,1.5975103734439835,0.001992824487388134
1486,1486,1092024,10935.119999999999,10940.4, educator. Richard Feynman was able to condense a lot of ideas and physics in a very short amount,"[51107, 45562, 13, 6219, 5452, 2047, 805, 373, 1498, 284, 1779, 1072, 257, 1256, 286, 4213, 290, 11887, 287, 257, 845, 1790, 2033, 51371]",0.0,-0.1622007179260254,1.5975103734439835,0.001992824487388134
1487,1487,1092024,10940.4,10946.0," of time, but that takes a deep, deep understanding. And so yes, of course, the actual, I think the","[51371, 286, 640, 11, 475, 326, 2753, 257, 2769, 11, 2769, 4547, 13, 843, 523, 3763, 11, 286, 1781, 11, 262, 4036, 11, 314, 892, 262, 51651]",0.0,-0.1622007179260254,1.5975103734439835,0.001992824487388134
1488,1488,1094600,10946.88,10951.92," 10 years is about the experience, the pain along the way. And there's something fun to","[50407, 838, 812, 318, 546, 262, 1998, 11, 262, 2356, 1863, 262, 835, 13, 843, 612, 338, 1223, 1257, 284, 50659]",0.0,-0.18743091625171704,1.5126050420168067,0.0005928971222601831
1489,1489,1094600,10951.92,10959.76," have to practice. You can memorize the syntax, but well, I couldn't, but maybe someone else can,","[50659, 423, 284, 3357, 13, 921, 460, 16181, 1096, 262, 15582, 11, 475, 880, 11, 314, 3521, 470, 11, 475, 3863, 2130, 2073, 460, 11, 51051]",0.0,-0.18743091625171704,1.5126050420168067,0.0005928971222601831
1490,1490,1094600,10959.76,10966.4," but that doesn't make you a coder. Yeah, actually, coding has changed in fascinating ways.","[51051, 475, 326, 1595, 470, 787, 345, 257, 269, 12342, 13, 9425, 11, 1682, 11, 19617, 468, 3421, 287, 13899, 2842, 13, 51383]",0.0,-0.18743091625171704,1.5126050420168067,0.0005928971222601831
1491,1491,1094600,10966.4,10971.36," Because so much of coding is copying pastings from Stack Overflow and then adjusting,","[51383, 4362, 523, 881, 286, 19617, 318, 23345, 1613, 654, 422, 23881, 3827, 11125, 290, 788, 22000, 11, 51631]",0.0,-0.18743091625171704,1.5126050420168067,0.0005928971222601831
1492,1492,1097136,10972.08,10976.32," which is another way of coding. And I don't want to talk down to that kind of style of coding,","[50399, 543, 318, 1194, 835, 286, 19617, 13, 843, 314, 836, 470, 765, 284, 1561, 866, 284, 326, 1611, 286, 3918, 286, 19617, 11, 50611]",0.0,-0.1800843202150785,1.5793991416309012,0.001036959234625101
1493,1493,1097136,10976.32,10980.24, because it's kind of nicely efficient. But you know where that is going?,"[50611, 780, 340, 338, 1611, 286, 16576, 6942, 13, 887, 345, 760, 810, 326, 318, 1016, 30, 50807]",0.0,-0.1800843202150785,1.5793991416309012,0.001036959234625101
1494,1494,1097136,10981.6,10988.880000000001," Code generation. No, seriously, GitHub co-pilot. Yeah, co-pilot. I use it every day. And it really,","[50875, 6127, 5270, 13, 1400, 11, 6411, 11, 21722, 763, 12, 79, 23439, 13, 9425, 11, 763, 12, 79, 23439, 13, 314, 779, 340, 790, 1110, 13, 843, 340, 1107, 11, 51239]",0.0,-0.1800843202150785,1.5793991416309012,0.001036959234625101
1495,1495,1097136,10988.880000000001,10995.44," yeah, it writes a lot of code for me. And usually it's slightly wrong, but it still saves me typing.","[51239, 10194, 11, 340, 6797, 257, 1256, 286, 2438, 329, 502, 13, 843, 3221, 340, 338, 4622, 2642, 11, 475, 340, 991, 16031, 502, 19720, 13, 51567]",0.0,-0.1800843202150785,1.5793991416309012,0.001036959234625101
1496,1496,1099544,10996.0,11003.12, Because all I have to do is like change one word in a line of text that otherwise it generated,"[50391, 4362, 477, 314, 423, 284, 466, 318, 588, 1487, 530, 1573, 287, 257, 1627, 286, 2420, 326, 4306, 340, 7560, 50747]",0.0,-0.1307801952609768,1.6353591160220995,0.0012108366936445236
1497,1497,1099544,11003.12,11009.92," perfectly. And like, how many times are you looking for like, Oh, what was I doing this morning? I was","[50747, 7138, 13, 843, 588, 11, 703, 867, 1661, 389, 345, 2045, 329, 588, 11, 3966, 11, 644, 373, 314, 1804, 428, 3329, 30, 314, 373, 51087]",0.0,-0.1307801952609768,1.6353591160220995,0.0012108366936445236
1498,1498,1099544,11009.92,11018.24," looking for an begin marker and I was looking for an end marker. And so begin is blah, blah, blah,","[51087, 2045, 329, 281, 2221, 18364, 290, 314, 373, 2045, 329, 281, 886, 18364, 13, 843, 523, 2221, 318, 33367, 11, 33367, 11, 33367, 11, 51503]",0.0,-0.1307801952609768,1.6353591160220995,0.0012108366936445236
1499,1499,1101824,11018.24,11027.28," search for begin. This is the begin token. And then the next line, I type E. And it","[50363, 2989, 329, 2221, 13, 770, 318, 262, 2221, 11241, 13, 843, 788, 262, 1306, 1627, 11, 314, 2099, 412, 13, 843, 340, 50815]",0.0,-0.17127991770650006,1.5575221238938053,0.03786114230751991
1500,1500,1101824,11027.92,11033.6, completes the whole line with end instead of begin. That's a very simple example. Sometimes it,"[50847, 32543, 262, 2187, 1627, 351, 886, 2427, 286, 2221, 13, 1320, 338, 257, 845, 2829, 1672, 13, 8975, 340, 51131]",0.0,-0.17127991770650006,1.5575221238938053,0.03786114230751991
1501,1501,1101824,11033.6,11038.4," sort of, if I name my function, right, it writes at five or 10 line function.","[51131, 3297, 286, 11, 611, 314, 1438, 616, 2163, 11, 826, 11, 340, 6797, 379, 1936, 393, 838, 1627, 2163, 13, 51371]",0.0,-0.17127991770650006,1.5575221238938053,0.03786114230751991
1502,1502,1101824,11040.16,11048.08," And you know, Python enough to very quickly then detect the issues. So it becomes a really good","[51459, 843, 345, 760, 11, 11361, 1576, 284, 845, 2952, 788, 4886, 262, 2428, 13, 1406, 340, 4329, 257, 1107, 922, 51855]",0.0,-0.17127991770650006,1.5575221238938053,0.03786114230751991
1503,1503,1104808,11048.08,11053.84," dance partner, then it doesn't save me a lot of thinking. But since I'm a poor typist, I'm very","[50363, 9280, 5212, 11, 788, 340, 1595, 470, 3613, 502, 257, 1256, 286, 3612, 13, 887, 1201, 314, 1101, 257, 3595, 2170, 396, 11, 314, 1101, 845, 50651]",0.0,-0.11051645373353863,1.6125,0.0008042464614845812
1504,1504,1104808,11053.84,11062.48," much appreciative of all the, all the typing it does for me. Much better actually than the previous","[50651, 881, 5763, 876, 286, 477, 262, 11, 477, 262, 19720, 340, 857, 329, 502, 13, 13111, 1365, 1682, 621, 262, 2180, 51083]",0.0,-0.11051645373353863,1.6125,0.0008042464614845812
1505,1505,1104808,11062.48,11069.6," generation of suggestions that are also still built in VS code. Where when you hit like a dot,","[51083, 5270, 286, 11776, 326, 389, 635, 991, 3170, 287, 22269, 2438, 13, 6350, 618, 345, 2277, 588, 257, 16605, 11, 51439]",0.0,-0.11051645373353863,1.6125,0.0008042464614845812
1506,1506,1104808,11070.72,11076.4," it, it tries to guess what the type is of the variable to the left of the dot. And then it gives","[51495, 340, 11, 340, 8404, 284, 4724, 644, 262, 2099, 318, 286, 262, 7885, 284, 262, 1364, 286, 262, 16605, 13, 843, 788, 340, 3607, 51779]",0.0,-0.11051645373353863,1.6125,0.0008042464614845812
1507,1507,1107640,11076.48,11083.6," you a list of pop down menu of what the attributes of that object are, but co-pilot is much, much","[50367, 345, 257, 1351, 286, 1461, 866, 6859, 286, 644, 262, 12608, 286, 326, 2134, 389, 11, 475, 763, 12, 79, 23439, 318, 881, 11, 881, 50723]",0.0,-0.18846953542608963,1.556910569105691,0.00041758190491236746
1508,1508,1107640,11083.6,11089.76," smoother than that. Well, it's fascinating to hear that you use GitHub co-pilot. Do you think,","[50723, 32686, 621, 326, 13, 3894, 11, 340, 338, 13899, 284, 3285, 326, 345, 779, 21722, 763, 12, 79, 23439, 13, 2141, 345, 892, 11, 51031]",0.0,-0.18846953542608963,1.556910569105691,0.00041758190491236746
1509,1509,1107640,11089.76,11097.68," do you worry about the future of that? The automatic code generation, the increasing amount of","[51031, 466, 345, 5490, 546, 262, 2003, 286, 326, 30, 383, 11353, 2438, 5270, 11, 262, 3649, 2033, 286, 51427]",0.0,-0.18846953542608963,1.556910569105691,0.00041758190491236746
1510,1510,1107640,11098.4,11105.039999999999," that kind of capability, our programmers, jobs threatened? Or is there still a significant role","[51463, 326, 1611, 286, 12971, 11, 674, 24867, 11, 3946, 8556, 30, 1471, 318, 612, 991, 257, 2383, 2597, 51795]",0.0,-0.18846953542608963,1.556910569105691,0.00041758190491236746
1511,1511,1110504,11105.04,11109.12, for humans? Are programmers jobs threatened by the existence of stack overflow?,"[50363, 329, 5384, 30, 4231, 24867, 3946, 8556, 416, 262, 6224, 286, 8931, 30343, 30, 50567]",0.0,-0.09858068890041775,1.5695652173913044,0.0007337012211792171
1512,1512,1110504,11110.960000000001,11118.0, I don't think so. It helps you take care of the boring stuff. And you shouldn't try to use it to,"[50659, 314, 836, 470, 892, 523, 13, 632, 5419, 345, 1011, 1337, 286, 262, 14262, 3404, 13, 843, 345, 6584, 470, 1949, 284, 779, 340, 284, 51011]",0.0,-0.09858068890041775,1.5695652173913044,0.0007337012211792171
1513,1513,1110504,11118.0,11126.0, do something that you have no way of understanding what you're doing yet. A tool like that is always,"[51011, 466, 1223, 326, 345, 423, 645, 835, 286, 4547, 644, 345, 821, 1804, 1865, 13, 317, 2891, 588, 326, 318, 1464, 51411]",0.0,-0.09858068890041775,1.5695652173913044,0.0007337012211792171
1514,1514,1110504,11126.0,11133.36," best when the question you're asking is, please remind me of how I do this, which I","[51411, 1266, 618, 262, 1808, 345, 821, 4737, 318, 11, 3387, 7101, 502, 286, 703, 314, 466, 428, 11, 543, 314, 51779]",0.0,-0.09858068890041775,1.5695652173913044,0.0007337012211792171
1515,1515,1113336,11134.16,11142.560000000001," could do. I could look up how to do it. But right now, I've forgotten whether the method is called","[50403, 714, 466, 13, 314, 714, 804, 510, 703, 284, 466, 340, 13, 887, 826, 783, 11, 314, 1053, 11564, 1771, 262, 2446, 318, 1444, 50823]",0.0,-0.14530148083650613,1.482233502538071,0.000512440747115761
1516,1516,1113336,11142.560000000001,11150.720000000001," foo or bar, or how you, what the shape of the API is, does it use a builder object or a constructor","[50823, 22944, 393, 2318, 11, 393, 703, 345, 11, 644, 262, 5485, 286, 262, 7824, 318, 11, 857, 340, 779, 257, 27098, 2134, 393, 257, 23772, 51231]",0.0,-0.14530148083650613,1.482233502538071,0.000512440747115761
1517,1517,1113336,11150.720000000001,11160.24, or a factory or something else? And what are the parameters? It serves that role. It's like a,"[51231, 393, 257, 8860, 393, 1223, 2073, 30, 843, 644, 389, 262, 10007, 30, 632, 9179, 326, 2597, 13, 632, 338, 588, 257, 51707]",0.0,-0.14530148083650613,1.482233502538071,0.000512440747115761
1518,1518,1116024,11160.32,11166.96," great assistant. But the creative work of sort of deciding what you want, what you want to go to do","[50367, 1049, 8796, 13, 887, 262, 7325, 670, 286, 3297, 286, 14615, 644, 345, 765, 11, 644, 345, 765, 284, 467, 284, 466, 50699]",0.0,-0.20086743434270224,1.6401673640167365,0.001529051223769784
1519,1519,1116024,11167.84,11174.96," is totally yours. What do you think is the future of Python in the next 10, 20, 50 years, 100 years?","[50743, 318, 6635, 12431, 13, 1867, 466, 345, 892, 318, 262, 2003, 286, 11361, 287, 262, 1306, 838, 11, 1160, 11, 2026, 812, 11, 1802, 812, 30, 51099]",0.0,-0.20086743434270224,1.6401673640167365,0.001529051223769784
1520,1520,1116024,11174.96,11180.64," You look forward, you ever think about you ever imagine a future of human civilization,","[51099, 921, 804, 2651, 11, 345, 1683, 892, 546, 345, 1683, 5967, 257, 2003, 286, 1692, 14355, 11, 51383]",0.0,-0.20086743434270224,1.6401673640167365,0.001529051223769784
1521,1521,1116024,11180.64,11189.119999999999," or living inside the metaverse on Mars, human or robots everywhere? What part does Python play in that?","[51383, 393, 2877, 2641, 262, 13634, 4399, 319, 8706, 11, 1692, 393, 14193, 8347, 30, 1867, 636, 857, 11361, 711, 287, 326, 30, 51807]",0.0,-0.20086743434270224,1.6401673640167365,0.001529051223769784
1522,1522,1119024,11190.24,11198.08," It'll eventually become sort of a legacy language that plays an important role, but that most people","[50363, 632, 1183, 4191, 1716, 3297, 286, 257, 10655, 3303, 326, 5341, 281, 1593, 2597, 11, 475, 326, 749, 661, 50755]",0.0,-0.1395556926727295,1.5294117647058822,0.001050625229254365
1523,1523,1119024,11198.08,11207.039999999999, have never heard of and don't need to know about just like all kinds of basic structures in,"[50755, 423, 1239, 2982, 286, 290, 836, 470, 761, 284, 760, 546, 655, 588, 477, 6982, 286, 4096, 8573, 287, 51203]",0.0,-0.1395556926727295,1.5294117647058822,0.001050625229254365
1524,1524,1119024,11208.24,11216.32," biology, like mitochondria. So it permeates all of life, all of digital life, but people just","[51263, 17219, 11, 588, 25387, 7496, 13, 1406, 340, 29298, 689, 477, 286, 1204, 11, 477, 286, 4875, 1204, 11, 475, 661, 655, 51667]",0.0,-0.1395556926727295,1.5294117647058822,0.001050625229254365
1525,1525,1121632,11216.32,11219.6, build on top of it. And they only know the stuff that's on top of it.,"[50363, 1382, 319, 1353, 286, 340, 13, 843, 484, 691, 760, 262, 3404, 326, 338, 319, 1353, 286, 340, 13, 50527]",0.0,-0.15758792213771655,1.5903083700440528,0.0029284500051289797
1526,1526,1121632,11219.6,11227.92," Yeah. You guys, you build layers of abstractions. I mean, most programmers nowadays rarely need to","[50527, 9425, 13, 921, 3730, 11, 345, 1382, 11685, 286, 12531, 507, 13, 314, 1612, 11, 749, 24867, 26760, 8365, 761, 284, 50943]",0.0,-0.15758792213771655,1.5903083700440528,0.0029284500051289797
1527,1527,1121632,11228.72,11237.92," do binary arithmetic, right? Yeah, or even think about it, or even learn about it, or they can go","[50983, 466, 13934, 34768, 11, 826, 30, 9425, 11, 393, 772, 892, 546, 340, 11, 393, 772, 2193, 546, 340, 11, 393, 484, 460, 467, 51443]",0.0,-0.15758792213771655,1.5903083700440528,0.0029284500051289797
1528,1528,1121632,11237.92,11245.76, quite far without knowing. I started building little digital circuits out of NAND gates that I,"[51443, 2407, 1290, 1231, 6970, 13, 314, 2067, 2615, 1310, 4875, 24907, 503, 286, 399, 6981, 17435, 326, 314, 51835]",0.0,-0.15758792213771655,1.5903083700440528,0.0029284500051289797
1529,1529,1124576,11245.76,11252.48," build myself with transistors and resistors. So I sort of, I feel very blessed that","[50363, 1382, 3589, 351, 1007, 46334, 290, 4180, 669, 13, 1406, 314, 3297, 286, 11, 314, 1254, 845, 18259, 326, 50699]",0.0,-0.14266091860257663,1.5204678362573099,0.0001704401074675843
1530,1530,1124576,11253.52,11261.84," with that start when I was a teenager, I learned some of the basic, at least concepts","[50751, 351, 326, 923, 618, 314, 373, 257, 15287, 11, 314, 4499, 617, 286, 262, 4096, 11, 379, 1551, 10838, 51167]",0.0,-0.14266091860257663,1.5204678362573099,0.0001704401074675843
1531,1531,1124576,11263.04,11271.84," that go into building a computer. And I sort of every part, I have some understanding what","[51227, 326, 467, 656, 2615, 257, 3644, 13, 843, 314, 3297, 286, 790, 636, 11, 314, 423, 617, 4547, 644, 51667]",0.0,-0.14266091860257663,1.5204678362573099,0.0001704401074675843
1532,1532,1127184,11272.72,11279.44," what it's for and why it's there and how it works. And I can't forget about all that most of the time,","[50407, 644, 340, 338, 329, 290, 1521, 340, 338, 612, 290, 703, 340, 2499, 13, 843, 314, 460, 470, 6044, 546, 477, 326, 749, 286, 262, 640, 11, 50743]",0.0,-0.20763444339527803,1.5380710659898478,9.296264761360362e-05
1533,1533,1127184,11279.44,11288.56," but I sort of, I enjoy knowing, oh, if you go deeper, you at some point you get to NAND gates and half","[50743, 475, 314, 3297, 286, 11, 314, 2883, 6970, 11, 11752, 11, 611, 345, 467, 9211, 11, 345, 379, 617, 966, 345, 651, 284, 399, 6981, 17435, 290, 2063, 51199]",0.0,-0.20763444339527803,1.5380710659898478,9.296264761360362e-05
1534,1534,1127184,11288.56,11296.32, adders and shift registers. And when it comes to the point of how do you actually make a chip out,"[51199, 751, 364, 290, 6482, 28441, 13, 843, 618, 340, 2058, 284, 262, 966, 286, 703, 466, 345, 1682, 787, 257, 11594, 503, 51587]",0.0,-0.20763444339527803,1.5380710659898478,9.296264761360362e-05
1535,1535,1129632,11296.88,11303.039999999999, of silicon? I have no idea. That's just magic to me. But you enjoy knowing that you can walk a,"[50391, 286, 29867, 30, 314, 423, 645, 2126, 13, 1320, 338, 655, 5536, 284, 502, 13, 887, 345, 2883, 6970, 326, 345, 460, 2513, 257, 50699]",0.0,-0.13019829485789838,1.4653465346534653,0.0008273267303593457
1536,1536,1129632,11303.039999999999,11309.44," while towards the lower and lower layers, but you don't need to. It's nice. The other day, as a sort","[50699, 981, 3371, 262, 2793, 290, 2793, 11685, 11, 475, 345, 836, 470, 761, 284, 13, 632, 338, 3621, 13, 383, 584, 1110, 11, 355, 257, 3297, 51019]",0.0,-0.13019829485789838,1.4653465346534653,0.0008273267303593457
1537,1537,1129632,11309.44,11322.24," of a mental exercise, I was trying to figure out if I could build a flip flop circuit out of relays.","[51019, 286, 257, 5110, 5517, 11, 314, 373, 2111, 284, 3785, 503, 611, 314, 714, 1382, 257, 14283, 781, 404, 10349, 503, 286, 823, 592, 13, 51659]",0.0,-0.13019829485789838,1.4653465346534653,0.0008273267303593457
1538,1538,1132224,11323.199999999999,11330.48," I was just sort of trying to remember, oh, how does a relay work? Yeah, there's like this","[50411, 314, 373, 655, 3297, 286, 2111, 284, 3505, 11, 11752, 11, 703, 857, 257, 24248, 670, 30, 9425, 11, 612, 338, 588, 428, 50775]",0.0,-0.17704480130907516,1.5698324022346368,0.0031672476325184107
1539,1539,1132224,11330.48,11339.28," electromagnetic force that pulls a switch open or shut. And you can have like, it can open one","[50775, 31094, 2700, 326, 16194, 257, 5078, 1280, 393, 4423, 13, 843, 345, 460, 423, 588, 11, 340, 460, 1280, 530, 51215]",0.0,-0.17704480130907516,1.5698324022346368,0.0031672476325184107
1540,1540,1132224,11339.28,11347.68, switch in another shut another. And you can have multiple contacts that go at once. And how many,"[51215, 5078, 287, 1194, 4423, 1194, 13, 843, 345, 460, 423, 3294, 13961, 326, 467, 379, 1752, 13, 843, 703, 867, 51635]",0.0,-0.17704480130907516,1.5698324022346368,0.0031672476325184107
1541,1541,1134768,11347.76,11353.92, relays do I really need to sort of represent one bit of information? Can the relay just feed on,"[50367, 823, 592, 466, 314, 1107, 761, 284, 3297, 286, 2380, 530, 1643, 286, 1321, 30, 1680, 262, 24248, 655, 3745, 319, 50675]",0.0,-0.11339657716076783,1.6425531914893616,0.0029832497239112854
1542,1542,1134768,11353.92,11361.76," itself? And there was, I don't think I got to the final solution, but it was fun that I could","[50675, 2346, 30, 843, 612, 373, 11, 314, 836, 470, 892, 314, 1392, 284, 262, 2457, 4610, 11, 475, 340, 373, 1257, 326, 314, 714, 51067]",0.0,-0.11339657716076783,1.6425531914893616,0.0029832497239112854
1543,1543,1134768,11361.76,11368.4, still do a little bit of problem solving and thinking at that level. And it's cool how we build on top,"[51067, 991, 466, 257, 1310, 1643, 286, 1917, 18120, 290, 3612, 379, 326, 1241, 13, 843, 340, 338, 3608, 703, 356, 1382, 319, 1353, 51399]",0.0,-0.11339657716076783,1.6425531914893616,0.0029832497239112854
1544,1544,1134768,11368.4,11373.68," of each other. So there's people there just, you stood on the shoulders of giants and there's","[51399, 286, 1123, 584, 13, 1406, 612, 338, 661, 612, 655, 11, 345, 6204, 319, 262, 12450, 286, 20178, 290, 612, 338, 51663]",0.0,-0.11339657716076783,1.6425531914893616,0.0029832497239112854
1545,1545,1137368,11373.68,11379.52," others will stand on your shoulders. And it's a giant, beautiful higher. Yeah, I feel I sort of","[50363, 1854, 481, 1302, 319, 534, 12450, 13, 843, 340, 338, 257, 6175, 11, 4950, 2440, 13, 9425, 11, 314, 1254, 314, 3297, 286, 50655]",0.0,-0.2037874384129301,1.6666666666666667,0.002448586281388998
1546,1546,1137368,11379.52,11386.4, covered this middle layer of the technology stack where as sort of peters out below the,"[50655, 5017, 428, 3504, 7679, 286, 262, 3037, 8931, 810, 355, 3297, 286, 4273, 364, 503, 2174, 262, 50999]",0.0,-0.2037874384129301,1.6666666666666667,0.002448586281388998
1547,1547,1137368,11387.92,11396.08," level of of of NAND gates. And at the top, I sort of, I lose track when it gets to machine learning.","[51075, 1241, 286, 286, 286, 399, 6981, 17435, 13, 843, 379, 262, 1353, 11, 314, 3297, 286, 11, 314, 4425, 2610, 618, 340, 3011, 284, 4572, 4673, 13, 51483]",0.0,-0.2037874384129301,1.6666666666666667,0.002448586281388998
1548,1548,1137368,11396.800000000001,11401.52," And then eventually, the machine learning will build higher and higher layers that will help us","[51519, 843, 788, 4191, 11, 262, 4572, 4673, 481, 1382, 2440, 290, 2440, 11685, 326, 481, 1037, 514, 51755]",0.0,-0.2037874384129301,1.6666666666666667,0.002448586281388998
1549,1549,1140152,11401.52,11407.28," understand the lowest layer of the physics. And thereby, the universe figures out how","[50363, 1833, 262, 9016, 7679, 286, 262, 11887, 13, 843, 12839, 11, 262, 6881, 5538, 503, 703, 50651]",0.0,-0.11056629447049873,1.5980861244019138,0.0003378571127541363
1550,1550,1140152,11408.32,11415.12," it itself works. Maybe, maybe not. Yeah, I did. I mean, it's it's possible. I mean,","[50703, 340, 2346, 2499, 13, 6674, 11, 3863, 407, 13, 9425, 11, 314, 750, 13, 314, 1612, 11, 340, 338, 340, 338, 1744, 13, 314, 1612, 11, 51043]",0.0,-0.11056629447049873,1.5980861244019138,0.0003378571127541363
1551,1551,1140152,11415.92,11419.76," if you think of human consciousness, if that's even the right concept,","[51083, 611, 345, 892, 286, 1692, 10510, 11, 611, 326, 338, 772, 262, 826, 3721, 11, 51275]",0.0,-0.11056629447049873,1.5980861244019138,0.0003378571127541363
1552,1552,1140152,11421.84,11428.4, it's it's interesting that that sort of we have this super parallel brain that does all these,"[51379, 340, 338, 340, 338, 3499, 326, 326, 3297, 286, 356, 423, 428, 2208, 10730, 3632, 326, 857, 477, 777, 51707]",0.0,-0.11056629447049873,1.5980861244019138,0.0003378571127541363
1553,1553,1142840,11429.359999999999,11434.64, incredible parallel operations like image recognition. I recognize your face.,"[50411, 8082, 10730, 4560, 588, 2939, 9465, 13, 314, 7564, 534, 1986, 13, 50675]",0.0,-0.13496830884148092,1.5593220338983051,0.000139292111271061
1554,1554,1142840,11435.68,11441.84, Does you huge amount of processing that goes on in parallel? There's lots of nerves between my eyes,"[50727, 8314, 345, 3236, 2033, 286, 7587, 326, 2925, 319, 287, 10730, 30, 1318, 338, 6041, 286, 25377, 1022, 616, 2951, 51035]",0.0,-0.13496830884148092,1.5593220338983051,0.000139292111271061
1555,1555,1142840,11441.84,11447.52, and my brain. And the brain does a whole bunch of stuff all at once because it's actually really,"[51035, 290, 616, 3632, 13, 843, 262, 3632, 857, 257, 2187, 7684, 286, 3404, 477, 379, 1752, 780, 340, 338, 1682, 1107, 51319]",0.0,-0.13496830884148092,1.5593220338983051,0.000139292111271061
1556,1556,1142840,11447.52,11454.24," slow circuits, but there are many of them that all work together. On the other hand, when I'm","[51319, 3105, 24907, 11, 475, 612, 389, 867, 286, 606, 326, 477, 670, 1978, 13, 1550, 262, 584, 1021, 11, 618, 314, 1101, 51655]",0.0,-0.13496830884148092,1.5593220338983051,0.000139292111271061
1557,1557,1145424,11454.24,11462.4," speaking, everything is completely sequential. I have to sort of string words together one at a","[50363, 5486, 11, 2279, 318, 3190, 35582, 13, 314, 423, 284, 3297, 286, 4731, 2456, 1978, 530, 379, 257, 50771]",0.0,-0.09166501915973166,1.6358381502890174,0.0006936665740795434
1558,1558,1145424,11462.4,11471.119999999999," time. And when I'm thinking about stuff, when I'm understanding the world, I'm also thinking","[50771, 640, 13, 843, 618, 314, 1101, 3612, 546, 3404, 11, 618, 314, 1101, 4547, 262, 995, 11, 314, 1101, 635, 3612, 51207]",0.0,-0.09166501915973166,1.6358381502890174,0.0006936665740795434
1559,1559,1145424,11471.119999999999,11479.52, of everything like one step at a time. And so we've sort of we've got all this this incredible,"[51207, 286, 2279, 588, 530, 2239, 379, 257, 640, 13, 843, 523, 356, 1053, 3297, 286, 356, 1053, 1392, 477, 428, 428, 8082, 51627]",0.0,-0.09166501915973166,1.6358381502890174,0.0006936665740795434
1560,1560,1147952,11480.32,11489.12," parallel circuitry in our brains. And eventually we use that to simulate a single threaded much,","[50403, 10730, 42344, 287, 674, 14290, 13, 843, 4191, 356, 779, 326, 284, 29308, 257, 2060, 40945, 881, 11, 50843]",0.0,-0.16973044531685966,1.5898876404494382,0.00024388780002482235
1561,1561,1147952,11489.12,11496.960000000001," much higher level interpreter. It's exactly. I mean, that's the illusion of it. That's the","[50843, 881, 2440, 1241, 28846, 13, 632, 338, 3446, 13, 314, 1612, 11, 326, 338, 262, 17878, 286, 340, 13, 1320, 338, 262, 51235]",0.0,-0.16973044531685966,1.5898876404494382,0.00024388780002482235
1562,1562,1147952,11496.960000000001,11504.0, illusion of it for us. That is a single sequential set of thoughts. And all of that came from a,"[51235, 17878, 286, 340, 329, 514, 13, 1320, 318, 257, 2060, 35582, 900, 286, 6066, 13, 843, 477, 286, 326, 1625, 422, 257, 51587]",0.0,-0.16973044531685966,1.5898876404494382,0.00024388780002482235
1563,1563,1150400,11504.0,11511.76, single cell through the process of embryo genesis. So DNA is the code. DNA holds the,"[50363, 2060, 2685, 832, 262, 1429, 286, 39880, 48861, 13, 1406, 7446, 318, 262, 2438, 13, 7446, 6622, 262, 50751]",0.0,-0.2162266046228543,1.6046511627906976,0.0021312693133950233
1564,1564,1150400,11511.76,11517.68," entirety of the code, the information and how to use that information to build up an organism,","[50751, 21818, 286, 262, 2438, 11, 262, 1321, 290, 703, 284, 779, 326, 1321, 284, 1382, 510, 281, 26433, 11, 51047]",0.0,-0.2162266046228543,1.6046511627906976,0.0021312693133950233
1565,1565,1150400,11517.68,11528.32," the entire like the arms, the legs, the brain. So you don't buy a computer, you buy like a seed,","[51047, 262, 2104, 588, 262, 5101, 11, 262, 7405, 11, 262, 3632, 13, 1406, 345, 836, 470, 2822, 257, 3644, 11, 345, 2822, 588, 257, 9403, 11, 51579]",0.0,-0.2162266046228543,1.6046511627906976,0.0021312693133950233
1566,1566,1152832,11529.119999999999,11534.72," diagram. And then you plant the computer and it builds itself in almost the same way,","[50403, 16362, 13, 843, 788, 345, 4618, 262, 3644, 290, 340, 12188, 2346, 287, 2048, 262, 976, 835, 11, 50683]",0.0,-0.14623070788639847,1.7757009345794392,0.0025779425632208586
1567,1567,1152832,11535.52,11544.16," and then does the computation. And then is eventually dies. It gets stale, but gives birth to young","[50723, 290, 788, 857, 262, 29964, 13, 843, 788, 318, 4191, 10564, 13, 632, 3011, 39985, 11, 475, 3607, 4082, 284, 1862, 51155]",0.0,-0.14623070788639847,1.7757009345794392,0.0025779425632208586
1568,1568,1152832,11544.16,11549.68," computers more and more and gives them lessons, but they figure stuff out on their own. And over","[51155, 9061, 517, 290, 517, 290, 3607, 606, 11658, 11, 475, 484, 3785, 3404, 503, 319, 511, 898, 13, 843, 625, 51431]",0.0,-0.14623070788639847,1.7757009345794392,0.0025779425632208586
1569,1569,1152832,11549.68,11555.92," time, it goes on that way. And those computers, when they go to college, try to figure out how to","[51431, 640, 11, 340, 2925, 319, 326, 835, 13, 843, 883, 9061, 11, 618, 484, 467, 284, 4152, 11, 1949, 284, 3785, 503, 703, 284, 51743]",0.0,-0.14623070788639847,1.7757009345794392,0.0025779425632208586
1570,1570,1155592,11555.92,11560.64," program and they build their own little computers. They're increasingly more intelligent,","[50363, 1430, 290, 484, 1382, 511, 898, 1310, 9061, 13, 1119, 821, 6481, 517, 12661, 11, 50599]",0.0,-0.17140822661550423,1.6238532110091743,0.000906334025785327
1571,1571,1155592,11560.64,11566.72," increasingly higher and higher levels of abstractions. Isn't it interesting that you sort of,","[50599, 6481, 2440, 290, 2440, 2974, 286, 12531, 507, 13, 25110, 470, 340, 3499, 326, 345, 3297, 286, 11, 50903]",0.0,-0.17140822661550423,1.6238532110091743,0.000906334025785327
1572,1572,1155592,11566.72,11572.56," you see the same thing appearing at different levels, though, because you have like","[50903, 345, 766, 262, 976, 1517, 12655, 379, 1180, 2974, 11, 996, 11, 780, 345, 423, 588, 51195]",0.0,-0.17140822661550423,1.6238532110091743,0.000906334025785327
1573,1573,1155592,11574.72,11583.12," cells that create new cells. And eventually that builds a whole organism, but then the","[51303, 4778, 326, 2251, 649, 4778, 13, 843, 4191, 326, 12188, 257, 2187, 26433, 11, 475, 788, 262, 51723]",0.0,-0.17140822661550423,1.6238532110091743,0.000906334025785327
1574,1574,1158312,11583.2,11594.800000000001, animal or the plant or the human has its own mechanism of replication that is sort of connected,"[50367, 5044, 393, 262, 4618, 393, 262, 1692, 468, 663, 898, 9030, 286, 30330, 326, 318, 3297, 286, 5884, 50947]",0.0,-0.08179462139423077,1.7409638554216869,0.0002833973558153957
1575,1575,1158312,11594.800000000001,11601.52, in a very complicated way to the mechanism of replication of the cells. And then if you look,"[50947, 287, 257, 845, 8253, 835, 284, 262, 9030, 286, 30330, 286, 262, 4778, 13, 843, 788, 611, 345, 804, 51283]",0.0,-0.08179462139423077,1.7409638554216869,0.0002833973558153957
1576,1576,1158312,11601.52,11608.720000000001," inside the cell, if you see how DNA and proteins are connected, then there is yet another completely","[51283, 2641, 262, 2685, 11, 611, 345, 766, 703, 7446, 290, 15568, 389, 5884, 11, 788, 612, 318, 1865, 1194, 3190, 51643]",0.0,-0.08179462139423077,1.7409638554216869,0.0002833973558153957
1577,1577,1160872,11608.72,11618.24, different mechanism whereby proteins are mass produced using enzymes and a little bit of,"[50363, 1180, 9030, 23482, 15568, 389, 2347, 4635, 1262, 29120, 290, 257, 1310, 1643, 286, 50839]",0.0,-0.09620824881962367,1.5276073619631902,0.0007392935804091394
1578,1578,1160872,11618.24,11623.359999999999," code from DNA. And of course, viruses break into it at that level.","[50839, 2438, 422, 7446, 13, 843, 286, 1781, 11, 20547, 2270, 656, 340, 379, 326, 1241, 13, 51095]",0.0,-0.09620824881962367,1.5276073619631902,0.0007392935804091394
1579,1579,1160872,11624.16,11630.88," And while the mechanisms might be different, it seems like the nature of the mechanism is the","[51135, 843, 981, 262, 11701, 1244, 307, 1180, 11, 340, 2331, 588, 262, 3450, 286, 262, 9030, 318, 262, 51471]",0.0,-0.09620824881962367,1.5276073619631902,0.0007392935804091394
1580,1580,1163088,11630.88,11640.32," same. And it cares across natural languages and programming languages, humans, maybe even human","[50363, 976, 13, 843, 340, 16609, 1973, 3288, 8950, 290, 8300, 8950, 11, 5384, 11, 3863, 772, 1692, 50835]",0.0,-0.1400771634332065,1.5635359116022098,0.02156762219965458
1581,1581,1163088,11640.32,11646.88," civilizations or intelligence civilizations, and then all the way down to the single cell","[50835, 35928, 393, 4430, 35928, 11, 290, 788, 477, 262, 835, 866, 284, 262, 2060, 2685, 51163]",0.0,-0.1400771634332065,1.5635359116022098,0.02156762219965458
1582,1582,1163088,11646.88,11654.72, organism. It is fascinating to see what abstraction levels are built on top of individual humans.,"[51163, 26433, 13, 632, 318, 13899, 284, 766, 644, 34651, 2974, 389, 3170, 319, 1353, 286, 1981, 5384, 13, 51555]",0.0,-0.1400771634332065,1.5635359116022098,0.02156762219965458
1583,1583,1165472,11655.679999999998,11664.0," And how you have whole societies that sort of have a similar self-preservation,","[50411, 843, 703, 345, 423, 2187, 14515, 326, 3297, 286, 423, 257, 2092, 2116, 12, 18302, 13208, 11, 50827]",0.0,-0.1330400225759923,1.5945945945945945,0.007169272750616074
1584,1584,1165472,11665.279999999999,11672.48," I don't know what it is, instinct, nature, abstraction, as the individuals have and the","[50891, 314, 836, 470, 760, 644, 340, 318, 11, 13311, 11, 3450, 11, 34651, 11, 355, 262, 3925, 423, 290, 262, 51251]",0.0,-0.1330400225759923,1.5945945945945945,0.007169272750616074
1585,1585,1165472,11672.48,11678.08, cells have. And they self-replicate and breed in different ways. It's hard for us humans to,"[51251, 4778, 423, 13, 843, 484, 2116, 12, 35666, 5344, 290, 15939, 287, 1180, 2842, 13, 632, 338, 1327, 329, 514, 5384, 284, 51531]",0.0,-0.1330400225759923,1.5945945945945945,0.007169272750616074
1586,1586,1165472,11678.08,11684.0, introspect it because we were very focused on our particular layer of abstraction. But from an,"[51531, 18951, 4443, 340, 780, 356, 547, 845, 5670, 319, 674, 1948, 7679, 286, 34651, 13, 887, 422, 281, 51827]",0.0,-0.1330400225759923,1.5945945945945945,0.007169272750616074
1587,1587,1168400,11684.0,11690.72," alien perspective looking on Earth, they'll probably see the higher level organism of human","[50363, 8756, 6650, 2045, 319, 3668, 11, 484, 1183, 2192, 766, 262, 2440, 1241, 26433, 286, 1692, 50699]",0.0,-0.13949700523825254,1.613733905579399,0.0004790428502019495
1588,1588,1168400,11690.72,11696.4," civilization as part of this bigger organism of life on Earth itself. In fact, that could be an","[50699, 14355, 355, 636, 286, 428, 5749, 26433, 286, 1204, 319, 3668, 2346, 13, 554, 1109, 11, 326, 714, 307, 281, 50983]",0.0,-0.13949700523825254,1.613733905579399,0.0004790428502019495
1589,1589,1168400,11696.4,11705.04," organism just alone, just life, life on Earth. This has been a wild, both philosophical and","[50983, 26433, 655, 3436, 11, 655, 1204, 11, 1204, 319, 3668, 13, 770, 468, 587, 257, 4295, 11, 1111, 17580, 290, 51415]",0.0,-0.13949700523825254,1.613733905579399,0.0004790428502019495
1590,1590,1168400,11705.04,11711.28," technical conversation, you're an amazing human being. You're gracious enough to talk to me when","[51415, 6276, 5273, 11, 345, 821, 281, 4998, 1692, 852, 13, 921, 821, 43210, 1576, 284, 1561, 284, 502, 618, 51727]",0.0,-0.13949700523825254,1.613733905579399,0.0004790428502019495
1591,1591,1171128,11711.36,11717.28," I was first doing this podcast. And one of the earliest first people I've talked to, somebody I","[50367, 314, 373, 717, 1804, 428, 9905, 13, 843, 530, 286, 262, 14555, 717, 661, 314, 1053, 6619, 284, 11, 8276, 314, 50663]",0.0,-0.15763085229056223,1.5993031358885017,0.011181974783539772
1592,1592,1171128,11717.28,11721.52, admired for a long time is just a huge honor that you did it at that time and you do it again.,"[50663, 29382, 329, 257, 890, 640, 318, 655, 257, 3236, 7522, 326, 345, 750, 340, 379, 326, 640, 290, 345, 466, 340, 757, 13, 50875]",0.0,-0.15763085229056223,1.5993031358885017,0.011181974783539772
1593,1593,1171128,11721.52,11726.320000000002, You're awesome. Take your legs. Thanks for listening to this conversation with Guido,"[50875, 921, 821, 7427, 13, 7214, 534, 7405, 13, 6930, 329, 8680, 284, 428, 5273, 351, 1962, 17305, 51115]",0.0,-0.15763085229056223,1.5993031358885017,0.011181974783539772
1594,1594,1171128,11726.320000000002,11731.12," Ben-Rassam. To support this podcast, please check out our sponsors in the description.","[51115, 3932, 12, 49, 562, 321, 13, 1675, 1104, 428, 9905, 11, 3387, 2198, 503, 674, 18073, 287, 262, 6764, 13, 51355]",0.0,-0.15763085229056223,1.5993031358885017,0.011181974783539772
1595,1595,1171128,11731.12,11737.28, And now let me leave you some words from Oscar Wilde. Experience is the name that everyone gives,"[51355, 843, 783, 1309, 502, 2666, 345, 617, 2456, 422, 15694, 45622, 13, 16386, 318, 262, 1438, 326, 2506, 3607, 51663]",0.0,-0.15763085229056223,1.5993031358885017,0.011181974783539772
1596,1596,1173728,11737.28,11742.24, to their mistakes. Thank you for listening and hope to see you next time.,"[50363, 284, 511, 10135, 13, 6952, 345, 329, 8680, 290, 2911, 284, 766, 345, 1306, 640, 13, 50611]",0.0,-0.2227468490600586,1.028169014084507,0.041043754667043686
